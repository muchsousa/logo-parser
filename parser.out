Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statement other_statement
Rule 2     other_statement -> statement other_statement
Rule 3     other_statement -> empty
Rule 4     statement -> instruction
Rule 5     statement -> variable_declaration
Rule 6     statement -> procedure_declaration
Rule 7     statement -> procedure_call
Rule 8     statement -> if_then_else
Rule 9     statement -> while_loop
Rule 10    statement -> write
Rule 11    instruction -> FO number_expression
Rule 12    instruction -> FORWARD number_expression
Rule 13    instruction -> BK number_expression
Rule 14    instruction -> BACKWARD number_expression
Rule 15    instruction -> RT number_expression
Rule 16    instruction -> RIGHT expression
Rule 17    instruction -> LT number_expression
Rule 18    instruction -> LEFT number_expression
Rule 19    instruction -> PD
Rule 20    instruction -> PENDOWN
Rule 21    instruction -> PU
Rule 22    instruction -> PENUP
Rule 23    instruction -> WC
Rule 24    instruction -> WIPECLEAN
Rule 25    instruction -> CS
Rule 26    instruction -> CLEARSCREEN
Rule 27    instruction -> HOME
Rule 28    instruction -> HEADING
Rule 29    instruction -> TYPEIN
Rule 30    instruction -> SETXY number_expression COMMA number_expression
Rule 31    instruction -> XCOR number_expression
Rule 32    instruction -> YCOR number_expression
Rule 33    variable_declaration -> ID ASSIGN expression
Rule 34    variable -> COLON ID
Rule 35    argument_list -> argument_list COMMA argument
Rule 36    argument_list -> argument
Rule 37    argument -> expression
Rule 38    argument -> empty
Rule 39    procedure_declaration -> TO ID argument_list other_statement END
Rule 40    expression_list -> expression_list COMMA expression
Rule 41    expression_list -> expression
Rule 42    expression_list -> empty
Rule 43    procedure_call -> ID expression_list
Rule 44    expression -> OPEN_PAR expression CLOSE_PAR
Rule 45    expression -> boolean_expression
Rule 46    expression -> number_expression
Rule 47    expression -> RANDOM
Rule 48    expression -> string
Rule 49    number_expression -> number_expression ADD number_expression
Rule 50    number_expression -> number_expression SUB number_expression
Rule 51    number_expression -> number_expression MUL number_expression
Rule 52    number_expression -> number_expression DIV number_expression
Rule 53    number_expression -> number_expression POW number_expression
Rule 54    number_expression -> OPEN_PAR number_expression CLOSE_PAR
Rule 55    number_expression -> variable
Rule 56    number_expression -> NUM
Rule 57    boolean_expression -> relational_operation
Rule 58    boolean_expression -> boolean_expression OR boolean_expression
Rule 59    boolean_expression -> boolean_expression AND boolean_expression
Rule 60    boolean_expression -> NOT boolean_expression
Rule 61    boolean_expression -> variable
Rule 62    boolean_expression -> TRUE
Rule 63    boolean_expression -> FALSE
Rule 64    relational_operation -> expression GT_OP expression
Rule 65    relational_operation -> expression LT_OP expression
Rule 66    relational_operation -> expression GTE_OP expression
Rule 67    relational_operation -> expression LTE_OP expression
Rule 68    relational_operation -> expression EQ_OP expression
Rule 69    relational_operation -> expression NE_OP expression
Rule 70    if_then_else -> IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement END
Rule 71    if_then_else -> IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement ELSE other_statement END
Rule 72    while_loop -> WHILE OPEN_PAR boolean_expression CLOSE_PAR other_statement END
Rule 73    write -> WRITE expression
Rule 74    write -> WRITE string
Rule 75    empty -> <empty>
Rule 76    string -> STRING

Terminals, with rules where they appear

ADD                  : 49
AND                  : 59
ASSIGN               : 33
BACKWARD             : 14
BK                   : 13
CLEARSCREEN          : 26
CLOSE_PAR            : 44 54 70 71 72
COLON                : 34
COMMA                : 30 35 40
CS                   : 25
DIV                  : 52
ELSE                 : 71
END                  : 39 70 71 72
EQ_OP                : 68
FALSE                : 63
FO                   : 11
FORWARD              : 12
GTE_OP               : 66
GT_OP                : 64
HEADING              : 28
HOME                 : 27
ID                   : 33 34 39 43
IF                   : 70 71
LEFT                 : 18
LT                   : 17
LTE_OP               : 67
LT_OP                : 65
MUL                  : 51
NE_OP                : 69
NOT                  : 60
NUM                  : 56
OPEN_PAR             : 44 54 70 71 72
OR                   : 58
PD                   : 19
PENDOWN              : 20
PENUP                : 22
POW                  : 53
PU                   : 21
RANDOM               : 47
RIGHT                : 16
RT                   : 15
SETXY                : 30
STRING               : 76
SUB                  : 50
THEN                 : 70 71
TO                   : 39
TRUE                 : 62
TYPEIN               : 29
WC                   : 23
WHILE                : 72
WIPECLEAN            : 24
WRITE                : 73 74
XCOR                 : 31
YCOR                 : 32
error                : 

Nonterminals, with rules where they appear

argument             : 35 36
argument_list        : 35 39
boolean_expression   : 45 58 58 59 59 60 70 71 72
empty                : 3 38 42
expression           : 16 33 37 40 41 44 64 64 65 65 66 66 67 67 68 68 69 69 73
expression_list      : 40 43
if_then_else         : 8
instruction          : 4
number_expression    : 11 12 13 14 15 17 18 30 30 31 32 46 49 49 50 50 51 51 52 52 53 53 54
other_statement      : 1 2 39 70 71 71 72
procedure_call       : 7
procedure_declaration : 6
program              : 0
relational_operation : 57
statement            : 1 2
string               : 48 74
variable             : 55 61
variable_declaration : 5
while_loop           : 9
write                : 10

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement other_statement
    (4) statement -> . instruction
    (5) statement -> . variable_declaration
    (6) statement -> . procedure_declaration
    (7) statement -> . procedure_call
    (8) statement -> . if_then_else
    (9) statement -> . while_loop
    (10) statement -> . write
    (11) instruction -> . FO number_expression
    (12) instruction -> . FORWARD number_expression
    (13) instruction -> . BK number_expression
    (14) instruction -> . BACKWARD number_expression
    (15) instruction -> . RT number_expression
    (16) instruction -> . RIGHT expression
    (17) instruction -> . LT number_expression
    (18) instruction -> . LEFT number_expression
    (19) instruction -> . PD
    (20) instruction -> . PENDOWN
    (21) instruction -> . PU
    (22) instruction -> . PENUP
    (23) instruction -> . WC
    (24) instruction -> . WIPECLEAN
    (25) instruction -> . CS
    (26) instruction -> . CLEARSCREEN
    (27) instruction -> . HOME
    (28) instruction -> . HEADING
    (29) instruction -> . TYPEIN
    (30) instruction -> . SETXY number_expression COMMA number_expression
    (31) instruction -> . XCOR number_expression
    (32) instruction -> . YCOR number_expression
    (33) variable_declaration -> . ID ASSIGN expression
    (39) procedure_declaration -> . TO ID argument_list other_statement END
    (43) procedure_call -> . ID expression_list
    (70) if_then_else -> . IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement END
    (71) if_then_else -> . IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement ELSE other_statement END
    (72) while_loop -> . WHILE OPEN_PAR boolean_expression CLOSE_PAR other_statement END
    (73) write -> . WRITE expression
    (74) write -> . WRITE string

    FO              shift and go to state 10
    FORWARD         shift and go to state 11
    BK              shift and go to state 12
    BACKWARD        shift and go to state 13
    RT              shift and go to state 14
    RIGHT           shift and go to state 15
    LT              shift and go to state 16
    LEFT            shift and go to state 17
    PD              shift and go to state 18
    PENDOWN         shift and go to state 19
    PU              shift and go to state 20
    PENUP           shift and go to state 21
    WC              shift and go to state 22
    WIPECLEAN       shift and go to state 23
    CS              shift and go to state 24
    CLEARSCREEN     shift and go to state 25
    HOME            shift and go to state 26
    HEADING         shift and go to state 27
    TYPEIN          shift and go to state 28
    SETXY           shift and go to state 29
    XCOR            shift and go to state 30
    YCOR            shift and go to state 31
    ID              shift and go to state 32
    TO              shift and go to state 33
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    WRITE           shift and go to state 36

    program                        shift and go to state 1
    statement                      shift and go to state 2
    instruction                    shift and go to state 3
    variable_declaration           shift and go to state 4
    procedure_declaration          shift and go to state 5
    procedure_call                 shift and go to state 6
    if_then_else                   shift and go to state 7
    while_loop                     shift and go to state 8
    write                          shift and go to state 9

state 1

    (0) S' -> program .



state 2

    (1) program -> statement . other_statement
    (2) other_statement -> . statement other_statement
    (3) other_statement -> . empty
    (4) statement -> . instruction
    (5) statement -> . variable_declaration
    (6) statement -> . procedure_declaration
    (7) statement -> . procedure_call
    (8) statement -> . if_then_else
    (9) statement -> . while_loop
    (10) statement -> . write
    (75) empty -> .
    (11) instruction -> . FO number_expression
    (12) instruction -> . FORWARD number_expression
    (13) instruction -> . BK number_expression
    (14) instruction -> . BACKWARD number_expression
    (15) instruction -> . RT number_expression
    (16) instruction -> . RIGHT expression
    (17) instruction -> . LT number_expression
    (18) instruction -> . LEFT number_expression
    (19) instruction -> . PD
    (20) instruction -> . PENDOWN
    (21) instruction -> . PU
    (22) instruction -> . PENUP
    (23) instruction -> . WC
    (24) instruction -> . WIPECLEAN
    (25) instruction -> . CS
    (26) instruction -> . CLEARSCREEN
    (27) instruction -> . HOME
    (28) instruction -> . HEADING
    (29) instruction -> . TYPEIN
    (30) instruction -> . SETXY number_expression COMMA number_expression
    (31) instruction -> . XCOR number_expression
    (32) instruction -> . YCOR number_expression
    (33) variable_declaration -> . ID ASSIGN expression
    (39) procedure_declaration -> . TO ID argument_list other_statement END
    (43) procedure_call -> . ID expression_list
    (70) if_then_else -> . IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement END
    (71) if_then_else -> . IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement ELSE other_statement END
    (72) while_loop -> . WHILE OPEN_PAR boolean_expression CLOSE_PAR other_statement END
    (73) write -> . WRITE expression
    (74) write -> . WRITE string

    $end            reduce using rule 75 (empty -> .)
    FO              shift and go to state 10
    FORWARD         shift and go to state 11
    BK              shift and go to state 12
    BACKWARD        shift and go to state 13
    RT              shift and go to state 14
    RIGHT           shift and go to state 15
    LT              shift and go to state 16
    LEFT            shift and go to state 17
    PD              shift and go to state 18
    PENDOWN         shift and go to state 19
    PU              shift and go to state 20
    PENUP           shift and go to state 21
    WC              shift and go to state 22
    WIPECLEAN       shift and go to state 23
    CS              shift and go to state 24
    CLEARSCREEN     shift and go to state 25
    HOME            shift and go to state 26
    HEADING         shift and go to state 27
    TYPEIN          shift and go to state 28
    SETXY           shift and go to state 29
    XCOR            shift and go to state 30
    YCOR            shift and go to state 31
    ID              shift and go to state 32
    TO              shift and go to state 33
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    WRITE           shift and go to state 36

    statement                      shift and go to state 37
    other_statement                shift and go to state 38
    empty                          shift and go to state 39
    instruction                    shift and go to state 3
    variable_declaration           shift and go to state 4
    procedure_declaration          shift and go to state 5
    procedure_call                 shift and go to state 6
    if_then_else                   shift and go to state 7
    while_loop                     shift and go to state 8
    write                          shift and go to state 9

state 3

    (4) statement -> instruction .

    FO              reduce using rule 4 (statement -> instruction .)
    FORWARD         reduce using rule 4 (statement -> instruction .)
    BK              reduce using rule 4 (statement -> instruction .)
    BACKWARD        reduce using rule 4 (statement -> instruction .)
    RT              reduce using rule 4 (statement -> instruction .)
    RIGHT           reduce using rule 4 (statement -> instruction .)
    LT              reduce using rule 4 (statement -> instruction .)
    LEFT            reduce using rule 4 (statement -> instruction .)
    PD              reduce using rule 4 (statement -> instruction .)
    PENDOWN         reduce using rule 4 (statement -> instruction .)
    PU              reduce using rule 4 (statement -> instruction .)
    PENUP           reduce using rule 4 (statement -> instruction .)
    WC              reduce using rule 4 (statement -> instruction .)
    WIPECLEAN       reduce using rule 4 (statement -> instruction .)
    CS              reduce using rule 4 (statement -> instruction .)
    CLEARSCREEN     reduce using rule 4 (statement -> instruction .)
    HOME            reduce using rule 4 (statement -> instruction .)
    HEADING         reduce using rule 4 (statement -> instruction .)
    TYPEIN          reduce using rule 4 (statement -> instruction .)
    SETXY           reduce using rule 4 (statement -> instruction .)
    XCOR            reduce using rule 4 (statement -> instruction .)
    YCOR            reduce using rule 4 (statement -> instruction .)
    ID              reduce using rule 4 (statement -> instruction .)
    TO              reduce using rule 4 (statement -> instruction .)
    IF              reduce using rule 4 (statement -> instruction .)
    WHILE           reduce using rule 4 (statement -> instruction .)
    WRITE           reduce using rule 4 (statement -> instruction .)
    $end            reduce using rule 4 (statement -> instruction .)
    END             reduce using rule 4 (statement -> instruction .)
    ELSE            reduce using rule 4 (statement -> instruction .)


state 4

    (5) statement -> variable_declaration .

    FO              reduce using rule 5 (statement -> variable_declaration .)
    FORWARD         reduce using rule 5 (statement -> variable_declaration .)
    BK              reduce using rule 5 (statement -> variable_declaration .)
    BACKWARD        reduce using rule 5 (statement -> variable_declaration .)
    RT              reduce using rule 5 (statement -> variable_declaration .)
    RIGHT           reduce using rule 5 (statement -> variable_declaration .)
    LT              reduce using rule 5 (statement -> variable_declaration .)
    LEFT            reduce using rule 5 (statement -> variable_declaration .)
    PD              reduce using rule 5 (statement -> variable_declaration .)
    PENDOWN         reduce using rule 5 (statement -> variable_declaration .)
    PU              reduce using rule 5 (statement -> variable_declaration .)
    PENUP           reduce using rule 5 (statement -> variable_declaration .)
    WC              reduce using rule 5 (statement -> variable_declaration .)
    WIPECLEAN       reduce using rule 5 (statement -> variable_declaration .)
    CS              reduce using rule 5 (statement -> variable_declaration .)
    CLEARSCREEN     reduce using rule 5 (statement -> variable_declaration .)
    HOME            reduce using rule 5 (statement -> variable_declaration .)
    HEADING         reduce using rule 5 (statement -> variable_declaration .)
    TYPEIN          reduce using rule 5 (statement -> variable_declaration .)
    SETXY           reduce using rule 5 (statement -> variable_declaration .)
    XCOR            reduce using rule 5 (statement -> variable_declaration .)
    YCOR            reduce using rule 5 (statement -> variable_declaration .)
    ID              reduce using rule 5 (statement -> variable_declaration .)
    TO              reduce using rule 5 (statement -> variable_declaration .)
    IF              reduce using rule 5 (statement -> variable_declaration .)
    WHILE           reduce using rule 5 (statement -> variable_declaration .)
    WRITE           reduce using rule 5 (statement -> variable_declaration .)
    $end            reduce using rule 5 (statement -> variable_declaration .)
    END             reduce using rule 5 (statement -> variable_declaration .)
    ELSE            reduce using rule 5 (statement -> variable_declaration .)


state 5

    (6) statement -> procedure_declaration .

    FO              reduce using rule 6 (statement -> procedure_declaration .)
    FORWARD         reduce using rule 6 (statement -> procedure_declaration .)
    BK              reduce using rule 6 (statement -> procedure_declaration .)
    BACKWARD        reduce using rule 6 (statement -> procedure_declaration .)
    RT              reduce using rule 6 (statement -> procedure_declaration .)
    RIGHT           reduce using rule 6 (statement -> procedure_declaration .)
    LT              reduce using rule 6 (statement -> procedure_declaration .)
    LEFT            reduce using rule 6 (statement -> procedure_declaration .)
    PD              reduce using rule 6 (statement -> procedure_declaration .)
    PENDOWN         reduce using rule 6 (statement -> procedure_declaration .)
    PU              reduce using rule 6 (statement -> procedure_declaration .)
    PENUP           reduce using rule 6 (statement -> procedure_declaration .)
    WC              reduce using rule 6 (statement -> procedure_declaration .)
    WIPECLEAN       reduce using rule 6 (statement -> procedure_declaration .)
    CS              reduce using rule 6 (statement -> procedure_declaration .)
    CLEARSCREEN     reduce using rule 6 (statement -> procedure_declaration .)
    HOME            reduce using rule 6 (statement -> procedure_declaration .)
    HEADING         reduce using rule 6 (statement -> procedure_declaration .)
    TYPEIN          reduce using rule 6 (statement -> procedure_declaration .)
    SETXY           reduce using rule 6 (statement -> procedure_declaration .)
    XCOR            reduce using rule 6 (statement -> procedure_declaration .)
    YCOR            reduce using rule 6 (statement -> procedure_declaration .)
    ID              reduce using rule 6 (statement -> procedure_declaration .)
    TO              reduce using rule 6 (statement -> procedure_declaration .)
    IF              reduce using rule 6 (statement -> procedure_declaration .)
    WHILE           reduce using rule 6 (statement -> procedure_declaration .)
    WRITE           reduce using rule 6 (statement -> procedure_declaration .)
    $end            reduce using rule 6 (statement -> procedure_declaration .)
    END             reduce using rule 6 (statement -> procedure_declaration .)
    ELSE            reduce using rule 6 (statement -> procedure_declaration .)


state 6

    (7) statement -> procedure_call .

    FO              reduce using rule 7 (statement -> procedure_call .)
    FORWARD         reduce using rule 7 (statement -> procedure_call .)
    BK              reduce using rule 7 (statement -> procedure_call .)
    BACKWARD        reduce using rule 7 (statement -> procedure_call .)
    RT              reduce using rule 7 (statement -> procedure_call .)
    RIGHT           reduce using rule 7 (statement -> procedure_call .)
    LT              reduce using rule 7 (statement -> procedure_call .)
    LEFT            reduce using rule 7 (statement -> procedure_call .)
    PD              reduce using rule 7 (statement -> procedure_call .)
    PENDOWN         reduce using rule 7 (statement -> procedure_call .)
    PU              reduce using rule 7 (statement -> procedure_call .)
    PENUP           reduce using rule 7 (statement -> procedure_call .)
    WC              reduce using rule 7 (statement -> procedure_call .)
    WIPECLEAN       reduce using rule 7 (statement -> procedure_call .)
    CS              reduce using rule 7 (statement -> procedure_call .)
    CLEARSCREEN     reduce using rule 7 (statement -> procedure_call .)
    HOME            reduce using rule 7 (statement -> procedure_call .)
    HEADING         reduce using rule 7 (statement -> procedure_call .)
    TYPEIN          reduce using rule 7 (statement -> procedure_call .)
    SETXY           reduce using rule 7 (statement -> procedure_call .)
    XCOR            reduce using rule 7 (statement -> procedure_call .)
    YCOR            reduce using rule 7 (statement -> procedure_call .)
    ID              reduce using rule 7 (statement -> procedure_call .)
    TO              reduce using rule 7 (statement -> procedure_call .)
    IF              reduce using rule 7 (statement -> procedure_call .)
    WHILE           reduce using rule 7 (statement -> procedure_call .)
    WRITE           reduce using rule 7 (statement -> procedure_call .)
    $end            reduce using rule 7 (statement -> procedure_call .)
    END             reduce using rule 7 (statement -> procedure_call .)
    ELSE            reduce using rule 7 (statement -> procedure_call .)


state 7

    (8) statement -> if_then_else .

    FO              reduce using rule 8 (statement -> if_then_else .)
    FORWARD         reduce using rule 8 (statement -> if_then_else .)
    BK              reduce using rule 8 (statement -> if_then_else .)
    BACKWARD        reduce using rule 8 (statement -> if_then_else .)
    RT              reduce using rule 8 (statement -> if_then_else .)
    RIGHT           reduce using rule 8 (statement -> if_then_else .)
    LT              reduce using rule 8 (statement -> if_then_else .)
    LEFT            reduce using rule 8 (statement -> if_then_else .)
    PD              reduce using rule 8 (statement -> if_then_else .)
    PENDOWN         reduce using rule 8 (statement -> if_then_else .)
    PU              reduce using rule 8 (statement -> if_then_else .)
    PENUP           reduce using rule 8 (statement -> if_then_else .)
    WC              reduce using rule 8 (statement -> if_then_else .)
    WIPECLEAN       reduce using rule 8 (statement -> if_then_else .)
    CS              reduce using rule 8 (statement -> if_then_else .)
    CLEARSCREEN     reduce using rule 8 (statement -> if_then_else .)
    HOME            reduce using rule 8 (statement -> if_then_else .)
    HEADING         reduce using rule 8 (statement -> if_then_else .)
    TYPEIN          reduce using rule 8 (statement -> if_then_else .)
    SETXY           reduce using rule 8 (statement -> if_then_else .)
    XCOR            reduce using rule 8 (statement -> if_then_else .)
    YCOR            reduce using rule 8 (statement -> if_then_else .)
    ID              reduce using rule 8 (statement -> if_then_else .)
    TO              reduce using rule 8 (statement -> if_then_else .)
    IF              reduce using rule 8 (statement -> if_then_else .)
    WHILE           reduce using rule 8 (statement -> if_then_else .)
    WRITE           reduce using rule 8 (statement -> if_then_else .)
    $end            reduce using rule 8 (statement -> if_then_else .)
    END             reduce using rule 8 (statement -> if_then_else .)
    ELSE            reduce using rule 8 (statement -> if_then_else .)


state 8

    (9) statement -> while_loop .

    FO              reduce using rule 9 (statement -> while_loop .)
    FORWARD         reduce using rule 9 (statement -> while_loop .)
    BK              reduce using rule 9 (statement -> while_loop .)
    BACKWARD        reduce using rule 9 (statement -> while_loop .)
    RT              reduce using rule 9 (statement -> while_loop .)
    RIGHT           reduce using rule 9 (statement -> while_loop .)
    LT              reduce using rule 9 (statement -> while_loop .)
    LEFT            reduce using rule 9 (statement -> while_loop .)
    PD              reduce using rule 9 (statement -> while_loop .)
    PENDOWN         reduce using rule 9 (statement -> while_loop .)
    PU              reduce using rule 9 (statement -> while_loop .)
    PENUP           reduce using rule 9 (statement -> while_loop .)
    WC              reduce using rule 9 (statement -> while_loop .)
    WIPECLEAN       reduce using rule 9 (statement -> while_loop .)
    CS              reduce using rule 9 (statement -> while_loop .)
    CLEARSCREEN     reduce using rule 9 (statement -> while_loop .)
    HOME            reduce using rule 9 (statement -> while_loop .)
    HEADING         reduce using rule 9 (statement -> while_loop .)
    TYPEIN          reduce using rule 9 (statement -> while_loop .)
    SETXY           reduce using rule 9 (statement -> while_loop .)
    XCOR            reduce using rule 9 (statement -> while_loop .)
    YCOR            reduce using rule 9 (statement -> while_loop .)
    ID              reduce using rule 9 (statement -> while_loop .)
    TO              reduce using rule 9 (statement -> while_loop .)
    IF              reduce using rule 9 (statement -> while_loop .)
    WHILE           reduce using rule 9 (statement -> while_loop .)
    WRITE           reduce using rule 9 (statement -> while_loop .)
    $end            reduce using rule 9 (statement -> while_loop .)
    END             reduce using rule 9 (statement -> while_loop .)
    ELSE            reduce using rule 9 (statement -> while_loop .)


state 9

    (10) statement -> write .

    FO              reduce using rule 10 (statement -> write .)
    FORWARD         reduce using rule 10 (statement -> write .)
    BK              reduce using rule 10 (statement -> write .)
    BACKWARD        reduce using rule 10 (statement -> write .)
    RT              reduce using rule 10 (statement -> write .)
    RIGHT           reduce using rule 10 (statement -> write .)
    LT              reduce using rule 10 (statement -> write .)
    LEFT            reduce using rule 10 (statement -> write .)
    PD              reduce using rule 10 (statement -> write .)
    PENDOWN         reduce using rule 10 (statement -> write .)
    PU              reduce using rule 10 (statement -> write .)
    PENUP           reduce using rule 10 (statement -> write .)
    WC              reduce using rule 10 (statement -> write .)
    WIPECLEAN       reduce using rule 10 (statement -> write .)
    CS              reduce using rule 10 (statement -> write .)
    CLEARSCREEN     reduce using rule 10 (statement -> write .)
    HOME            reduce using rule 10 (statement -> write .)
    HEADING         reduce using rule 10 (statement -> write .)
    TYPEIN          reduce using rule 10 (statement -> write .)
    SETXY           reduce using rule 10 (statement -> write .)
    XCOR            reduce using rule 10 (statement -> write .)
    YCOR            reduce using rule 10 (statement -> write .)
    ID              reduce using rule 10 (statement -> write .)
    TO              reduce using rule 10 (statement -> write .)
    IF              reduce using rule 10 (statement -> write .)
    WHILE           reduce using rule 10 (statement -> write .)
    WRITE           reduce using rule 10 (statement -> write .)
    $end            reduce using rule 10 (statement -> write .)
    END             reduce using rule 10 (statement -> write .)
    ELSE            reduce using rule 10 (statement -> write .)


state 10

    (11) instruction -> FO . number_expression
    (49) number_expression -> . number_expression ADD number_expression
    (50) number_expression -> . number_expression SUB number_expression
    (51) number_expression -> . number_expression MUL number_expression
    (52) number_expression -> . number_expression DIV number_expression
    (53) number_expression -> . number_expression POW number_expression
    (54) number_expression -> . OPEN_PAR number_expression CLOSE_PAR
    (55) number_expression -> . variable
    (56) number_expression -> . NUM
    (34) variable -> . COLON ID

    OPEN_PAR        shift and go to state 41
    NUM             shift and go to state 43
    COLON           shift and go to state 44

    number_expression              shift and go to state 40
    variable                       shift and go to state 42

state 11

    (12) instruction -> FORWARD . number_expression
    (49) number_expression -> . number_expression ADD number_expression
    (50) number_expression -> . number_expression SUB number_expression
    (51) number_expression -> . number_expression MUL number_expression
    (52) number_expression -> . number_expression DIV number_expression
    (53) number_expression -> . number_expression POW number_expression
    (54) number_expression -> . OPEN_PAR number_expression CLOSE_PAR
    (55) number_expression -> . variable
    (56) number_expression -> . NUM
    (34) variable -> . COLON ID

    OPEN_PAR        shift and go to state 41
    NUM             shift and go to state 43
    COLON           shift and go to state 44

    number_expression              shift and go to state 45
    variable                       shift and go to state 42

state 12

    (13) instruction -> BK . number_expression
    (49) number_expression -> . number_expression ADD number_expression
    (50) number_expression -> . number_expression SUB number_expression
    (51) number_expression -> . number_expression MUL number_expression
    (52) number_expression -> . number_expression DIV number_expression
    (53) number_expression -> . number_expression POW number_expression
    (54) number_expression -> . OPEN_PAR number_expression CLOSE_PAR
    (55) number_expression -> . variable
    (56) number_expression -> . NUM
    (34) variable -> . COLON ID

    OPEN_PAR        shift and go to state 41
    NUM             shift and go to state 43
    COLON           shift and go to state 44

    number_expression              shift and go to state 46
    variable                       shift and go to state 42

state 13

    (14) instruction -> BACKWARD . number_expression
    (49) number_expression -> . number_expression ADD number_expression
    (50) number_expression -> . number_expression SUB number_expression
    (51) number_expression -> . number_expression MUL number_expression
    (52) number_expression -> . number_expression DIV number_expression
    (53) number_expression -> . number_expression POW number_expression
    (54) number_expression -> . OPEN_PAR number_expression CLOSE_PAR
    (55) number_expression -> . variable
    (56) number_expression -> . NUM
    (34) variable -> . COLON ID

    OPEN_PAR        shift and go to state 41
    NUM             shift and go to state 43
    COLON           shift and go to state 44

    number_expression              shift and go to state 47
    variable                       shift and go to state 42

state 14

    (15) instruction -> RT . number_expression
    (49) number_expression -> . number_expression ADD number_expression
    (50) number_expression -> . number_expression SUB number_expression
    (51) number_expression -> . number_expression MUL number_expression
    (52) number_expression -> . number_expression DIV number_expression
    (53) number_expression -> . number_expression POW number_expression
    (54) number_expression -> . OPEN_PAR number_expression CLOSE_PAR
    (55) number_expression -> . variable
    (56) number_expression -> . NUM
    (34) variable -> . COLON ID

    OPEN_PAR        shift and go to state 41
    NUM             shift and go to state 43
    COLON           shift and go to state 44

    number_expression              shift and go to state 48
    variable                       shift and go to state 42

state 15

    (16) instruction -> RIGHT . expression
    (44) expression -> . OPEN_PAR expression CLOSE_PAR
    (45) expression -> . boolean_expression
    (46) expression -> . number_expression
    (47) expression -> . RANDOM
    (48) expression -> . string
    (57) boolean_expression -> . relational_operation
    (58) boolean_expression -> . boolean_expression OR boolean_expression
    (59) boolean_expression -> . boolean_expression AND boolean_expression
    (60) boolean_expression -> . NOT boolean_expression
    (61) boolean_expression -> . variable
    (62) boolean_expression -> . TRUE
    (63) boolean_expression -> . FALSE
    (49) number_expression -> . number_expression ADD number_expression
    (50) number_expression -> . number_expression SUB number_expression
    (51) number_expression -> . number_expression MUL number_expression
    (52) number_expression -> . number_expression DIV number_expression
    (53) number_expression -> . number_expression POW number_expression
    (54) number_expression -> . OPEN_PAR number_expression CLOSE_PAR
    (55) number_expression -> . variable
    (56) number_expression -> . NUM
    (76) string -> . STRING
    (64) relational_operation -> . expression GT_OP expression
    (65) relational_operation -> . expression LT_OP expression
    (66) relational_operation -> . expression GTE_OP expression
    (67) relational_operation -> . expression LTE_OP expression
    (68) relational_operation -> . expression EQ_OP expression
    (69) relational_operation -> . expression NE_OP expression
    (34) variable -> . COLON ID

    OPEN_PAR        shift and go to state 50
    RANDOM          shift and go to state 53
    NOT             shift and go to state 56
    TRUE            shift and go to state 58
    FALSE           shift and go to state 59
    NUM             shift and go to state 43
    STRING          shift and go to state 60
    COLON           shift and go to state 44

    expression                     shift and go to state 49
    boolean_expression             shift and go to state 51
    number_expression              shift and go to state 52
    string                         shift and go to state 54
    relational_operation           shift and go to state 55
    variable                       shift and go to state 57

state 16

    (17) instruction -> LT . number_expression
    (49) number_expression -> . number_expression ADD number_expression
    (50) number_expression -> . number_expression SUB number_expression
    (51) number_expression -> . number_expression MUL number_expression
    (52) number_expression -> . number_expression DIV number_expression
    (53) number_expression -> . number_expression POW number_expression
    (54) number_expression -> . OPEN_PAR number_expression CLOSE_PAR
    (55) number_expression -> . variable
    (56) number_expression -> . NUM
    (34) variable -> . COLON ID

    OPEN_PAR        shift and go to state 41
    NUM             shift and go to state 43
    COLON           shift and go to state 44

    number_expression              shift and go to state 61
    variable                       shift and go to state 42

state 17

    (18) instruction -> LEFT . number_expression
    (49) number_expression -> . number_expression ADD number_expression
    (50) number_expression -> . number_expression SUB number_expression
    (51) number_expression -> . number_expression MUL number_expression
    (52) number_expression -> . number_expression DIV number_expression
    (53) number_expression -> . number_expression POW number_expression
    (54) number_expression -> . OPEN_PAR number_expression CLOSE_PAR
    (55) number_expression -> . variable
    (56) number_expression -> . NUM
    (34) variable -> . COLON ID

    OPEN_PAR        shift and go to state 41
    NUM             shift and go to state 43
    COLON           shift and go to state 44

    number_expression              shift and go to state 62
    variable                       shift and go to state 42

state 18

    (19) instruction -> PD .

    FO              reduce using rule 19 (instruction -> PD .)
    FORWARD         reduce using rule 19 (instruction -> PD .)
    BK              reduce using rule 19 (instruction -> PD .)
    BACKWARD        reduce using rule 19 (instruction -> PD .)
    RT              reduce using rule 19 (instruction -> PD .)
    RIGHT           reduce using rule 19 (instruction -> PD .)
    LT              reduce using rule 19 (instruction -> PD .)
    LEFT            reduce using rule 19 (instruction -> PD .)
    PD              reduce using rule 19 (instruction -> PD .)
    PENDOWN         reduce using rule 19 (instruction -> PD .)
    PU              reduce using rule 19 (instruction -> PD .)
    PENUP           reduce using rule 19 (instruction -> PD .)
    WC              reduce using rule 19 (instruction -> PD .)
    WIPECLEAN       reduce using rule 19 (instruction -> PD .)
    CS              reduce using rule 19 (instruction -> PD .)
    CLEARSCREEN     reduce using rule 19 (instruction -> PD .)
    HOME            reduce using rule 19 (instruction -> PD .)
    HEADING         reduce using rule 19 (instruction -> PD .)
    TYPEIN          reduce using rule 19 (instruction -> PD .)
    SETXY           reduce using rule 19 (instruction -> PD .)
    XCOR            reduce using rule 19 (instruction -> PD .)
    YCOR            reduce using rule 19 (instruction -> PD .)
    ID              reduce using rule 19 (instruction -> PD .)
    TO              reduce using rule 19 (instruction -> PD .)
    IF              reduce using rule 19 (instruction -> PD .)
    WHILE           reduce using rule 19 (instruction -> PD .)
    WRITE           reduce using rule 19 (instruction -> PD .)
    $end            reduce using rule 19 (instruction -> PD .)
    END             reduce using rule 19 (instruction -> PD .)
    ELSE            reduce using rule 19 (instruction -> PD .)


state 19

    (20) instruction -> PENDOWN .

    FO              reduce using rule 20 (instruction -> PENDOWN .)
    FORWARD         reduce using rule 20 (instruction -> PENDOWN .)
    BK              reduce using rule 20 (instruction -> PENDOWN .)
    BACKWARD        reduce using rule 20 (instruction -> PENDOWN .)
    RT              reduce using rule 20 (instruction -> PENDOWN .)
    RIGHT           reduce using rule 20 (instruction -> PENDOWN .)
    LT              reduce using rule 20 (instruction -> PENDOWN .)
    LEFT            reduce using rule 20 (instruction -> PENDOWN .)
    PD              reduce using rule 20 (instruction -> PENDOWN .)
    PENDOWN         reduce using rule 20 (instruction -> PENDOWN .)
    PU              reduce using rule 20 (instruction -> PENDOWN .)
    PENUP           reduce using rule 20 (instruction -> PENDOWN .)
    WC              reduce using rule 20 (instruction -> PENDOWN .)
    WIPECLEAN       reduce using rule 20 (instruction -> PENDOWN .)
    CS              reduce using rule 20 (instruction -> PENDOWN .)
    CLEARSCREEN     reduce using rule 20 (instruction -> PENDOWN .)
    HOME            reduce using rule 20 (instruction -> PENDOWN .)
    HEADING         reduce using rule 20 (instruction -> PENDOWN .)
    TYPEIN          reduce using rule 20 (instruction -> PENDOWN .)
    SETXY           reduce using rule 20 (instruction -> PENDOWN .)
    XCOR            reduce using rule 20 (instruction -> PENDOWN .)
    YCOR            reduce using rule 20 (instruction -> PENDOWN .)
    ID              reduce using rule 20 (instruction -> PENDOWN .)
    TO              reduce using rule 20 (instruction -> PENDOWN .)
    IF              reduce using rule 20 (instruction -> PENDOWN .)
    WHILE           reduce using rule 20 (instruction -> PENDOWN .)
    WRITE           reduce using rule 20 (instruction -> PENDOWN .)
    $end            reduce using rule 20 (instruction -> PENDOWN .)
    END             reduce using rule 20 (instruction -> PENDOWN .)
    ELSE            reduce using rule 20 (instruction -> PENDOWN .)


state 20

    (21) instruction -> PU .

    FO              reduce using rule 21 (instruction -> PU .)
    FORWARD         reduce using rule 21 (instruction -> PU .)
    BK              reduce using rule 21 (instruction -> PU .)
    BACKWARD        reduce using rule 21 (instruction -> PU .)
    RT              reduce using rule 21 (instruction -> PU .)
    RIGHT           reduce using rule 21 (instruction -> PU .)
    LT              reduce using rule 21 (instruction -> PU .)
    LEFT            reduce using rule 21 (instruction -> PU .)
    PD              reduce using rule 21 (instruction -> PU .)
    PENDOWN         reduce using rule 21 (instruction -> PU .)
    PU              reduce using rule 21 (instruction -> PU .)
    PENUP           reduce using rule 21 (instruction -> PU .)
    WC              reduce using rule 21 (instruction -> PU .)
    WIPECLEAN       reduce using rule 21 (instruction -> PU .)
    CS              reduce using rule 21 (instruction -> PU .)
    CLEARSCREEN     reduce using rule 21 (instruction -> PU .)
    HOME            reduce using rule 21 (instruction -> PU .)
    HEADING         reduce using rule 21 (instruction -> PU .)
    TYPEIN          reduce using rule 21 (instruction -> PU .)
    SETXY           reduce using rule 21 (instruction -> PU .)
    XCOR            reduce using rule 21 (instruction -> PU .)
    YCOR            reduce using rule 21 (instruction -> PU .)
    ID              reduce using rule 21 (instruction -> PU .)
    TO              reduce using rule 21 (instruction -> PU .)
    IF              reduce using rule 21 (instruction -> PU .)
    WHILE           reduce using rule 21 (instruction -> PU .)
    WRITE           reduce using rule 21 (instruction -> PU .)
    $end            reduce using rule 21 (instruction -> PU .)
    END             reduce using rule 21 (instruction -> PU .)
    ELSE            reduce using rule 21 (instruction -> PU .)


state 21

    (22) instruction -> PENUP .

    FO              reduce using rule 22 (instruction -> PENUP .)
    FORWARD         reduce using rule 22 (instruction -> PENUP .)
    BK              reduce using rule 22 (instruction -> PENUP .)
    BACKWARD        reduce using rule 22 (instruction -> PENUP .)
    RT              reduce using rule 22 (instruction -> PENUP .)
    RIGHT           reduce using rule 22 (instruction -> PENUP .)
    LT              reduce using rule 22 (instruction -> PENUP .)
    LEFT            reduce using rule 22 (instruction -> PENUP .)
    PD              reduce using rule 22 (instruction -> PENUP .)
    PENDOWN         reduce using rule 22 (instruction -> PENUP .)
    PU              reduce using rule 22 (instruction -> PENUP .)
    PENUP           reduce using rule 22 (instruction -> PENUP .)
    WC              reduce using rule 22 (instruction -> PENUP .)
    WIPECLEAN       reduce using rule 22 (instruction -> PENUP .)
    CS              reduce using rule 22 (instruction -> PENUP .)
    CLEARSCREEN     reduce using rule 22 (instruction -> PENUP .)
    HOME            reduce using rule 22 (instruction -> PENUP .)
    HEADING         reduce using rule 22 (instruction -> PENUP .)
    TYPEIN          reduce using rule 22 (instruction -> PENUP .)
    SETXY           reduce using rule 22 (instruction -> PENUP .)
    XCOR            reduce using rule 22 (instruction -> PENUP .)
    YCOR            reduce using rule 22 (instruction -> PENUP .)
    ID              reduce using rule 22 (instruction -> PENUP .)
    TO              reduce using rule 22 (instruction -> PENUP .)
    IF              reduce using rule 22 (instruction -> PENUP .)
    WHILE           reduce using rule 22 (instruction -> PENUP .)
    WRITE           reduce using rule 22 (instruction -> PENUP .)
    $end            reduce using rule 22 (instruction -> PENUP .)
    END             reduce using rule 22 (instruction -> PENUP .)
    ELSE            reduce using rule 22 (instruction -> PENUP .)


state 22

    (23) instruction -> WC .

    FO              reduce using rule 23 (instruction -> WC .)
    FORWARD         reduce using rule 23 (instruction -> WC .)
    BK              reduce using rule 23 (instruction -> WC .)
    BACKWARD        reduce using rule 23 (instruction -> WC .)
    RT              reduce using rule 23 (instruction -> WC .)
    RIGHT           reduce using rule 23 (instruction -> WC .)
    LT              reduce using rule 23 (instruction -> WC .)
    LEFT            reduce using rule 23 (instruction -> WC .)
    PD              reduce using rule 23 (instruction -> WC .)
    PENDOWN         reduce using rule 23 (instruction -> WC .)
    PU              reduce using rule 23 (instruction -> WC .)
    PENUP           reduce using rule 23 (instruction -> WC .)
    WC              reduce using rule 23 (instruction -> WC .)
    WIPECLEAN       reduce using rule 23 (instruction -> WC .)
    CS              reduce using rule 23 (instruction -> WC .)
    CLEARSCREEN     reduce using rule 23 (instruction -> WC .)
    HOME            reduce using rule 23 (instruction -> WC .)
    HEADING         reduce using rule 23 (instruction -> WC .)
    TYPEIN          reduce using rule 23 (instruction -> WC .)
    SETXY           reduce using rule 23 (instruction -> WC .)
    XCOR            reduce using rule 23 (instruction -> WC .)
    YCOR            reduce using rule 23 (instruction -> WC .)
    ID              reduce using rule 23 (instruction -> WC .)
    TO              reduce using rule 23 (instruction -> WC .)
    IF              reduce using rule 23 (instruction -> WC .)
    WHILE           reduce using rule 23 (instruction -> WC .)
    WRITE           reduce using rule 23 (instruction -> WC .)
    $end            reduce using rule 23 (instruction -> WC .)
    END             reduce using rule 23 (instruction -> WC .)
    ELSE            reduce using rule 23 (instruction -> WC .)


state 23

    (24) instruction -> WIPECLEAN .

    FO              reduce using rule 24 (instruction -> WIPECLEAN .)
    FORWARD         reduce using rule 24 (instruction -> WIPECLEAN .)
    BK              reduce using rule 24 (instruction -> WIPECLEAN .)
    BACKWARD        reduce using rule 24 (instruction -> WIPECLEAN .)
    RT              reduce using rule 24 (instruction -> WIPECLEAN .)
    RIGHT           reduce using rule 24 (instruction -> WIPECLEAN .)
    LT              reduce using rule 24 (instruction -> WIPECLEAN .)
    LEFT            reduce using rule 24 (instruction -> WIPECLEAN .)
    PD              reduce using rule 24 (instruction -> WIPECLEAN .)
    PENDOWN         reduce using rule 24 (instruction -> WIPECLEAN .)
    PU              reduce using rule 24 (instruction -> WIPECLEAN .)
    PENUP           reduce using rule 24 (instruction -> WIPECLEAN .)
    WC              reduce using rule 24 (instruction -> WIPECLEAN .)
    WIPECLEAN       reduce using rule 24 (instruction -> WIPECLEAN .)
    CS              reduce using rule 24 (instruction -> WIPECLEAN .)
    CLEARSCREEN     reduce using rule 24 (instruction -> WIPECLEAN .)
    HOME            reduce using rule 24 (instruction -> WIPECLEAN .)
    HEADING         reduce using rule 24 (instruction -> WIPECLEAN .)
    TYPEIN          reduce using rule 24 (instruction -> WIPECLEAN .)
    SETXY           reduce using rule 24 (instruction -> WIPECLEAN .)
    XCOR            reduce using rule 24 (instruction -> WIPECLEAN .)
    YCOR            reduce using rule 24 (instruction -> WIPECLEAN .)
    ID              reduce using rule 24 (instruction -> WIPECLEAN .)
    TO              reduce using rule 24 (instruction -> WIPECLEAN .)
    IF              reduce using rule 24 (instruction -> WIPECLEAN .)
    WHILE           reduce using rule 24 (instruction -> WIPECLEAN .)
    WRITE           reduce using rule 24 (instruction -> WIPECLEAN .)
    $end            reduce using rule 24 (instruction -> WIPECLEAN .)
    END             reduce using rule 24 (instruction -> WIPECLEAN .)
    ELSE            reduce using rule 24 (instruction -> WIPECLEAN .)


state 24

    (25) instruction -> CS .

    FO              reduce using rule 25 (instruction -> CS .)
    FORWARD         reduce using rule 25 (instruction -> CS .)
    BK              reduce using rule 25 (instruction -> CS .)
    BACKWARD        reduce using rule 25 (instruction -> CS .)
    RT              reduce using rule 25 (instruction -> CS .)
    RIGHT           reduce using rule 25 (instruction -> CS .)
    LT              reduce using rule 25 (instruction -> CS .)
    LEFT            reduce using rule 25 (instruction -> CS .)
    PD              reduce using rule 25 (instruction -> CS .)
    PENDOWN         reduce using rule 25 (instruction -> CS .)
    PU              reduce using rule 25 (instruction -> CS .)
    PENUP           reduce using rule 25 (instruction -> CS .)
    WC              reduce using rule 25 (instruction -> CS .)
    WIPECLEAN       reduce using rule 25 (instruction -> CS .)
    CS              reduce using rule 25 (instruction -> CS .)
    CLEARSCREEN     reduce using rule 25 (instruction -> CS .)
    HOME            reduce using rule 25 (instruction -> CS .)
    HEADING         reduce using rule 25 (instruction -> CS .)
    TYPEIN          reduce using rule 25 (instruction -> CS .)
    SETXY           reduce using rule 25 (instruction -> CS .)
    XCOR            reduce using rule 25 (instruction -> CS .)
    YCOR            reduce using rule 25 (instruction -> CS .)
    ID              reduce using rule 25 (instruction -> CS .)
    TO              reduce using rule 25 (instruction -> CS .)
    IF              reduce using rule 25 (instruction -> CS .)
    WHILE           reduce using rule 25 (instruction -> CS .)
    WRITE           reduce using rule 25 (instruction -> CS .)
    $end            reduce using rule 25 (instruction -> CS .)
    END             reduce using rule 25 (instruction -> CS .)
    ELSE            reduce using rule 25 (instruction -> CS .)


state 25

    (26) instruction -> CLEARSCREEN .

    FO              reduce using rule 26 (instruction -> CLEARSCREEN .)
    FORWARD         reduce using rule 26 (instruction -> CLEARSCREEN .)
    BK              reduce using rule 26 (instruction -> CLEARSCREEN .)
    BACKWARD        reduce using rule 26 (instruction -> CLEARSCREEN .)
    RT              reduce using rule 26 (instruction -> CLEARSCREEN .)
    RIGHT           reduce using rule 26 (instruction -> CLEARSCREEN .)
    LT              reduce using rule 26 (instruction -> CLEARSCREEN .)
    LEFT            reduce using rule 26 (instruction -> CLEARSCREEN .)
    PD              reduce using rule 26 (instruction -> CLEARSCREEN .)
    PENDOWN         reduce using rule 26 (instruction -> CLEARSCREEN .)
    PU              reduce using rule 26 (instruction -> CLEARSCREEN .)
    PENUP           reduce using rule 26 (instruction -> CLEARSCREEN .)
    WC              reduce using rule 26 (instruction -> CLEARSCREEN .)
    WIPECLEAN       reduce using rule 26 (instruction -> CLEARSCREEN .)
    CS              reduce using rule 26 (instruction -> CLEARSCREEN .)
    CLEARSCREEN     reduce using rule 26 (instruction -> CLEARSCREEN .)
    HOME            reduce using rule 26 (instruction -> CLEARSCREEN .)
    HEADING         reduce using rule 26 (instruction -> CLEARSCREEN .)
    TYPEIN          reduce using rule 26 (instruction -> CLEARSCREEN .)
    SETXY           reduce using rule 26 (instruction -> CLEARSCREEN .)
    XCOR            reduce using rule 26 (instruction -> CLEARSCREEN .)
    YCOR            reduce using rule 26 (instruction -> CLEARSCREEN .)
    ID              reduce using rule 26 (instruction -> CLEARSCREEN .)
    TO              reduce using rule 26 (instruction -> CLEARSCREEN .)
    IF              reduce using rule 26 (instruction -> CLEARSCREEN .)
    WHILE           reduce using rule 26 (instruction -> CLEARSCREEN .)
    WRITE           reduce using rule 26 (instruction -> CLEARSCREEN .)
    $end            reduce using rule 26 (instruction -> CLEARSCREEN .)
    END             reduce using rule 26 (instruction -> CLEARSCREEN .)
    ELSE            reduce using rule 26 (instruction -> CLEARSCREEN .)


state 26

    (27) instruction -> HOME .

    FO              reduce using rule 27 (instruction -> HOME .)
    FORWARD         reduce using rule 27 (instruction -> HOME .)
    BK              reduce using rule 27 (instruction -> HOME .)
    BACKWARD        reduce using rule 27 (instruction -> HOME .)
    RT              reduce using rule 27 (instruction -> HOME .)
    RIGHT           reduce using rule 27 (instruction -> HOME .)
    LT              reduce using rule 27 (instruction -> HOME .)
    LEFT            reduce using rule 27 (instruction -> HOME .)
    PD              reduce using rule 27 (instruction -> HOME .)
    PENDOWN         reduce using rule 27 (instruction -> HOME .)
    PU              reduce using rule 27 (instruction -> HOME .)
    PENUP           reduce using rule 27 (instruction -> HOME .)
    WC              reduce using rule 27 (instruction -> HOME .)
    WIPECLEAN       reduce using rule 27 (instruction -> HOME .)
    CS              reduce using rule 27 (instruction -> HOME .)
    CLEARSCREEN     reduce using rule 27 (instruction -> HOME .)
    HOME            reduce using rule 27 (instruction -> HOME .)
    HEADING         reduce using rule 27 (instruction -> HOME .)
    TYPEIN          reduce using rule 27 (instruction -> HOME .)
    SETXY           reduce using rule 27 (instruction -> HOME .)
    XCOR            reduce using rule 27 (instruction -> HOME .)
    YCOR            reduce using rule 27 (instruction -> HOME .)
    ID              reduce using rule 27 (instruction -> HOME .)
    TO              reduce using rule 27 (instruction -> HOME .)
    IF              reduce using rule 27 (instruction -> HOME .)
    WHILE           reduce using rule 27 (instruction -> HOME .)
    WRITE           reduce using rule 27 (instruction -> HOME .)
    $end            reduce using rule 27 (instruction -> HOME .)
    END             reduce using rule 27 (instruction -> HOME .)
    ELSE            reduce using rule 27 (instruction -> HOME .)


state 27

    (28) instruction -> HEADING .

    FO              reduce using rule 28 (instruction -> HEADING .)
    FORWARD         reduce using rule 28 (instruction -> HEADING .)
    BK              reduce using rule 28 (instruction -> HEADING .)
    BACKWARD        reduce using rule 28 (instruction -> HEADING .)
    RT              reduce using rule 28 (instruction -> HEADING .)
    RIGHT           reduce using rule 28 (instruction -> HEADING .)
    LT              reduce using rule 28 (instruction -> HEADING .)
    LEFT            reduce using rule 28 (instruction -> HEADING .)
    PD              reduce using rule 28 (instruction -> HEADING .)
    PENDOWN         reduce using rule 28 (instruction -> HEADING .)
    PU              reduce using rule 28 (instruction -> HEADING .)
    PENUP           reduce using rule 28 (instruction -> HEADING .)
    WC              reduce using rule 28 (instruction -> HEADING .)
    WIPECLEAN       reduce using rule 28 (instruction -> HEADING .)
    CS              reduce using rule 28 (instruction -> HEADING .)
    CLEARSCREEN     reduce using rule 28 (instruction -> HEADING .)
    HOME            reduce using rule 28 (instruction -> HEADING .)
    HEADING         reduce using rule 28 (instruction -> HEADING .)
    TYPEIN          reduce using rule 28 (instruction -> HEADING .)
    SETXY           reduce using rule 28 (instruction -> HEADING .)
    XCOR            reduce using rule 28 (instruction -> HEADING .)
    YCOR            reduce using rule 28 (instruction -> HEADING .)
    ID              reduce using rule 28 (instruction -> HEADING .)
    TO              reduce using rule 28 (instruction -> HEADING .)
    IF              reduce using rule 28 (instruction -> HEADING .)
    WHILE           reduce using rule 28 (instruction -> HEADING .)
    WRITE           reduce using rule 28 (instruction -> HEADING .)
    $end            reduce using rule 28 (instruction -> HEADING .)
    END             reduce using rule 28 (instruction -> HEADING .)
    ELSE            reduce using rule 28 (instruction -> HEADING .)


state 28

    (29) instruction -> TYPEIN .

    FO              reduce using rule 29 (instruction -> TYPEIN .)
    FORWARD         reduce using rule 29 (instruction -> TYPEIN .)
    BK              reduce using rule 29 (instruction -> TYPEIN .)
    BACKWARD        reduce using rule 29 (instruction -> TYPEIN .)
    RT              reduce using rule 29 (instruction -> TYPEIN .)
    RIGHT           reduce using rule 29 (instruction -> TYPEIN .)
    LT              reduce using rule 29 (instruction -> TYPEIN .)
    LEFT            reduce using rule 29 (instruction -> TYPEIN .)
    PD              reduce using rule 29 (instruction -> TYPEIN .)
    PENDOWN         reduce using rule 29 (instruction -> TYPEIN .)
    PU              reduce using rule 29 (instruction -> TYPEIN .)
    PENUP           reduce using rule 29 (instruction -> TYPEIN .)
    WC              reduce using rule 29 (instruction -> TYPEIN .)
    WIPECLEAN       reduce using rule 29 (instruction -> TYPEIN .)
    CS              reduce using rule 29 (instruction -> TYPEIN .)
    CLEARSCREEN     reduce using rule 29 (instruction -> TYPEIN .)
    HOME            reduce using rule 29 (instruction -> TYPEIN .)
    HEADING         reduce using rule 29 (instruction -> TYPEIN .)
    TYPEIN          reduce using rule 29 (instruction -> TYPEIN .)
    SETXY           reduce using rule 29 (instruction -> TYPEIN .)
    XCOR            reduce using rule 29 (instruction -> TYPEIN .)
    YCOR            reduce using rule 29 (instruction -> TYPEIN .)
    ID              reduce using rule 29 (instruction -> TYPEIN .)
    TO              reduce using rule 29 (instruction -> TYPEIN .)
    IF              reduce using rule 29 (instruction -> TYPEIN .)
    WHILE           reduce using rule 29 (instruction -> TYPEIN .)
    WRITE           reduce using rule 29 (instruction -> TYPEIN .)
    $end            reduce using rule 29 (instruction -> TYPEIN .)
    END             reduce using rule 29 (instruction -> TYPEIN .)
    ELSE            reduce using rule 29 (instruction -> TYPEIN .)


state 29

    (30) instruction -> SETXY . number_expression COMMA number_expression
    (49) number_expression -> . number_expression ADD number_expression
    (50) number_expression -> . number_expression SUB number_expression
    (51) number_expression -> . number_expression MUL number_expression
    (52) number_expression -> . number_expression DIV number_expression
    (53) number_expression -> . number_expression POW number_expression
    (54) number_expression -> . OPEN_PAR number_expression CLOSE_PAR
    (55) number_expression -> . variable
    (56) number_expression -> . NUM
    (34) variable -> . COLON ID

    OPEN_PAR        shift and go to state 41
    NUM             shift and go to state 43
    COLON           shift and go to state 44

    number_expression              shift and go to state 63
    variable                       shift and go to state 42

state 30

    (31) instruction -> XCOR . number_expression
    (49) number_expression -> . number_expression ADD number_expression
    (50) number_expression -> . number_expression SUB number_expression
    (51) number_expression -> . number_expression MUL number_expression
    (52) number_expression -> . number_expression DIV number_expression
    (53) number_expression -> . number_expression POW number_expression
    (54) number_expression -> . OPEN_PAR number_expression CLOSE_PAR
    (55) number_expression -> . variable
    (56) number_expression -> . NUM
    (34) variable -> . COLON ID

    OPEN_PAR        shift and go to state 41
    NUM             shift and go to state 43
    COLON           shift and go to state 44

    number_expression              shift and go to state 64
    variable                       shift and go to state 42

state 31

    (32) instruction -> YCOR . number_expression
    (49) number_expression -> . number_expression ADD number_expression
    (50) number_expression -> . number_expression SUB number_expression
    (51) number_expression -> . number_expression MUL number_expression
    (52) number_expression -> . number_expression DIV number_expression
    (53) number_expression -> . number_expression POW number_expression
    (54) number_expression -> . OPEN_PAR number_expression CLOSE_PAR
    (55) number_expression -> . variable
    (56) number_expression -> . NUM
    (34) variable -> . COLON ID

    OPEN_PAR        shift and go to state 41
    NUM             shift and go to state 43
    COLON           shift and go to state 44

    number_expression              shift and go to state 65
    variable                       shift and go to state 42

state 32

    (33) variable_declaration -> ID . ASSIGN expression
    (43) procedure_call -> ID . expression_list
    (40) expression_list -> . expression_list COMMA expression
    (41) expression_list -> . expression
    (42) expression_list -> . empty
    (44) expression -> . OPEN_PAR expression CLOSE_PAR
    (45) expression -> . boolean_expression
    (46) expression -> . number_expression
    (47) expression -> . RANDOM
    (48) expression -> . string
    (75) empty -> .
    (57) boolean_expression -> . relational_operation
    (58) boolean_expression -> . boolean_expression OR boolean_expression
    (59) boolean_expression -> . boolean_expression AND boolean_expression
    (60) boolean_expression -> . NOT boolean_expression
    (61) boolean_expression -> . variable
    (62) boolean_expression -> . TRUE
    (63) boolean_expression -> . FALSE
    (49) number_expression -> . number_expression ADD number_expression
    (50) number_expression -> . number_expression SUB number_expression
    (51) number_expression -> . number_expression MUL number_expression
    (52) number_expression -> . number_expression DIV number_expression
    (53) number_expression -> . number_expression POW number_expression
    (54) number_expression -> . OPEN_PAR number_expression CLOSE_PAR
    (55) number_expression -> . variable
    (56) number_expression -> . NUM
    (76) string -> . STRING
    (64) relational_operation -> . expression GT_OP expression
    (65) relational_operation -> . expression LT_OP expression
    (66) relational_operation -> . expression GTE_OP expression
    (67) relational_operation -> . expression LTE_OP expression
    (68) relational_operation -> . expression EQ_OP expression
    (69) relational_operation -> . expression NE_OP expression
    (34) variable -> . COLON ID

    ASSIGN          shift and go to state 66
    OPEN_PAR        shift and go to state 50
    RANDOM          shift and go to state 53
    COMMA           reduce using rule 75 (empty -> .)
    FO              reduce using rule 75 (empty -> .)
    FORWARD         reduce using rule 75 (empty -> .)
    BK              reduce using rule 75 (empty -> .)
    BACKWARD        reduce using rule 75 (empty -> .)
    RT              reduce using rule 75 (empty -> .)
    RIGHT           reduce using rule 75 (empty -> .)
    LT              reduce using rule 75 (empty -> .)
    LEFT            reduce using rule 75 (empty -> .)
    PD              reduce using rule 75 (empty -> .)
    PENDOWN         reduce using rule 75 (empty -> .)
    PU              reduce using rule 75 (empty -> .)
    PENUP           reduce using rule 75 (empty -> .)
    WC              reduce using rule 75 (empty -> .)
    WIPECLEAN       reduce using rule 75 (empty -> .)
    CS              reduce using rule 75 (empty -> .)
    CLEARSCREEN     reduce using rule 75 (empty -> .)
    HOME            reduce using rule 75 (empty -> .)
    HEADING         reduce using rule 75 (empty -> .)
    TYPEIN          reduce using rule 75 (empty -> .)
    SETXY           reduce using rule 75 (empty -> .)
    XCOR            reduce using rule 75 (empty -> .)
    YCOR            reduce using rule 75 (empty -> .)
    ID              reduce using rule 75 (empty -> .)
    TO              reduce using rule 75 (empty -> .)
    IF              reduce using rule 75 (empty -> .)
    WHILE           reduce using rule 75 (empty -> .)
    WRITE           reduce using rule 75 (empty -> .)
    $end            reduce using rule 75 (empty -> .)
    END             reduce using rule 75 (empty -> .)
    ELSE            reduce using rule 75 (empty -> .)
    NOT             shift and go to state 56
    TRUE            shift and go to state 58
    FALSE           shift and go to state 59
    NUM             shift and go to state 43
    STRING          shift and go to state 60
    COLON           shift and go to state 44

    expression                     shift and go to state 67
    expression_list                shift and go to state 68
    empty                          shift and go to state 69
    boolean_expression             shift and go to state 51
    number_expression              shift and go to state 52
    string                         shift and go to state 54
    relational_operation           shift and go to state 55
    variable                       shift and go to state 57

state 33

    (39) procedure_declaration -> TO . ID argument_list other_statement END

    ID              shift and go to state 70


state 34

    (70) if_then_else -> IF . OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement END
    (71) if_then_else -> IF . OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement ELSE other_statement END

    OPEN_PAR        shift and go to state 71


state 35

    (72) while_loop -> WHILE . OPEN_PAR boolean_expression CLOSE_PAR other_statement END

    OPEN_PAR        shift and go to state 72


state 36

    (73) write -> WRITE . expression
    (74) write -> WRITE . string
    (44) expression -> . OPEN_PAR expression CLOSE_PAR
    (45) expression -> . boolean_expression
    (46) expression -> . number_expression
    (47) expression -> . RANDOM
    (48) expression -> . string
    (76) string -> . STRING
    (57) boolean_expression -> . relational_operation
    (58) boolean_expression -> . boolean_expression OR boolean_expression
    (59) boolean_expression -> . boolean_expression AND boolean_expression
    (60) boolean_expression -> . NOT boolean_expression
    (61) boolean_expression -> . variable
    (62) boolean_expression -> . TRUE
    (63) boolean_expression -> . FALSE
    (49) number_expression -> . number_expression ADD number_expression
    (50) number_expression -> . number_expression SUB number_expression
    (51) number_expression -> . number_expression MUL number_expression
    (52) number_expression -> . number_expression DIV number_expression
    (53) number_expression -> . number_expression POW number_expression
    (54) number_expression -> . OPEN_PAR number_expression CLOSE_PAR
    (55) number_expression -> . variable
    (56) number_expression -> . NUM
    (64) relational_operation -> . expression GT_OP expression
    (65) relational_operation -> . expression LT_OP expression
    (66) relational_operation -> . expression GTE_OP expression
    (67) relational_operation -> . expression LTE_OP expression
    (68) relational_operation -> . expression EQ_OP expression
    (69) relational_operation -> . expression NE_OP expression
    (34) variable -> . COLON ID

    OPEN_PAR        shift and go to state 50
    RANDOM          shift and go to state 53
    STRING          shift and go to state 60
    NOT             shift and go to state 56
    TRUE            shift and go to state 58
    FALSE           shift and go to state 59
    NUM             shift and go to state 43
    COLON           shift and go to state 44

    expression                     shift and go to state 73
    string                         shift and go to state 74
    boolean_expression             shift and go to state 51
    number_expression              shift and go to state 52
    relational_operation           shift and go to state 55
    variable                       shift and go to state 57

state 37

    (2) other_statement -> statement . other_statement
    (2) other_statement -> . statement other_statement
    (3) other_statement -> . empty
    (4) statement -> . instruction
    (5) statement -> . variable_declaration
    (6) statement -> . procedure_declaration
    (7) statement -> . procedure_call
    (8) statement -> . if_then_else
    (9) statement -> . while_loop
    (10) statement -> . write
    (75) empty -> .
    (11) instruction -> . FO number_expression
    (12) instruction -> . FORWARD number_expression
    (13) instruction -> . BK number_expression
    (14) instruction -> . BACKWARD number_expression
    (15) instruction -> . RT number_expression
    (16) instruction -> . RIGHT expression
    (17) instruction -> . LT number_expression
    (18) instruction -> . LEFT number_expression
    (19) instruction -> . PD
    (20) instruction -> . PENDOWN
    (21) instruction -> . PU
    (22) instruction -> . PENUP
    (23) instruction -> . WC
    (24) instruction -> . WIPECLEAN
    (25) instruction -> . CS
    (26) instruction -> . CLEARSCREEN
    (27) instruction -> . HOME
    (28) instruction -> . HEADING
    (29) instruction -> . TYPEIN
    (30) instruction -> . SETXY number_expression COMMA number_expression
    (31) instruction -> . XCOR number_expression
    (32) instruction -> . YCOR number_expression
    (33) variable_declaration -> . ID ASSIGN expression
    (39) procedure_declaration -> . TO ID argument_list other_statement END
    (43) procedure_call -> . ID expression_list
    (70) if_then_else -> . IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement END
    (71) if_then_else -> . IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement ELSE other_statement END
    (72) while_loop -> . WHILE OPEN_PAR boolean_expression CLOSE_PAR other_statement END
    (73) write -> . WRITE expression
    (74) write -> . WRITE string

    $end            reduce using rule 75 (empty -> .)
    END             reduce using rule 75 (empty -> .)
    ELSE            reduce using rule 75 (empty -> .)
    FO              shift and go to state 10
    FORWARD         shift and go to state 11
    BK              shift and go to state 12
    BACKWARD        shift and go to state 13
    RT              shift and go to state 14
    RIGHT           shift and go to state 15
    LT              shift and go to state 16
    LEFT            shift and go to state 17
    PD              shift and go to state 18
    PENDOWN         shift and go to state 19
    PU              shift and go to state 20
    PENUP           shift and go to state 21
    WC              shift and go to state 22
    WIPECLEAN       shift and go to state 23
    CS              shift and go to state 24
    CLEARSCREEN     shift and go to state 25
    HOME            shift and go to state 26
    HEADING         shift and go to state 27
    TYPEIN          shift and go to state 28
    SETXY           shift and go to state 29
    XCOR            shift and go to state 30
    YCOR            shift and go to state 31
    ID              shift and go to state 32
    TO              shift and go to state 33
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    WRITE           shift and go to state 36

    statement                      shift and go to state 37
    other_statement                shift and go to state 75
    empty                          shift and go to state 39
    instruction                    shift and go to state 3
    variable_declaration           shift and go to state 4
    procedure_declaration          shift and go to state 5
    procedure_call                 shift and go to state 6
    if_then_else                   shift and go to state 7
    while_loop                     shift and go to state 8
    write                          shift and go to state 9

state 38

    (1) program -> statement other_statement .

    $end            reduce using rule 1 (program -> statement other_statement .)


state 39

    (3) other_statement -> empty .

    $end            reduce using rule 3 (other_statement -> empty .)
    END             reduce using rule 3 (other_statement -> empty .)
    ELSE            reduce using rule 3 (other_statement -> empty .)


state 40

    (11) instruction -> FO number_expression .
    (49) number_expression -> number_expression . ADD number_expression
    (50) number_expression -> number_expression . SUB number_expression
    (51) number_expression -> number_expression . MUL number_expression
    (52) number_expression -> number_expression . DIV number_expression
    (53) number_expression -> number_expression . POW number_expression

    FO              reduce using rule 11 (instruction -> FO number_expression .)
    FORWARD         reduce using rule 11 (instruction -> FO number_expression .)
    BK              reduce using rule 11 (instruction -> FO number_expression .)
    BACKWARD        reduce using rule 11 (instruction -> FO number_expression .)
    RT              reduce using rule 11 (instruction -> FO number_expression .)
    RIGHT           reduce using rule 11 (instruction -> FO number_expression .)
    LT              reduce using rule 11 (instruction -> FO number_expression .)
    LEFT            reduce using rule 11 (instruction -> FO number_expression .)
    PD              reduce using rule 11 (instruction -> FO number_expression .)
    PENDOWN         reduce using rule 11 (instruction -> FO number_expression .)
    PU              reduce using rule 11 (instruction -> FO number_expression .)
    PENUP           reduce using rule 11 (instruction -> FO number_expression .)
    WC              reduce using rule 11 (instruction -> FO number_expression .)
    WIPECLEAN       reduce using rule 11 (instruction -> FO number_expression .)
    CS              reduce using rule 11 (instruction -> FO number_expression .)
    CLEARSCREEN     reduce using rule 11 (instruction -> FO number_expression .)
    HOME            reduce using rule 11 (instruction -> FO number_expression .)
    HEADING         reduce using rule 11 (instruction -> FO number_expression .)
    TYPEIN          reduce using rule 11 (instruction -> FO number_expression .)
    SETXY           reduce using rule 11 (instruction -> FO number_expression .)
    XCOR            reduce using rule 11 (instruction -> FO number_expression .)
    YCOR            reduce using rule 11 (instruction -> FO number_expression .)
    ID              reduce using rule 11 (instruction -> FO number_expression .)
    TO              reduce using rule 11 (instruction -> FO number_expression .)
    IF              reduce using rule 11 (instruction -> FO number_expression .)
    WHILE           reduce using rule 11 (instruction -> FO number_expression .)
    WRITE           reduce using rule 11 (instruction -> FO number_expression .)
    $end            reduce using rule 11 (instruction -> FO number_expression .)
    END             reduce using rule 11 (instruction -> FO number_expression .)
    ELSE            reduce using rule 11 (instruction -> FO number_expression .)
    ADD             shift and go to state 76
    SUB             shift and go to state 77
    MUL             shift and go to state 78
    DIV             shift and go to state 79
    POW             shift and go to state 80


state 41

    (54) number_expression -> OPEN_PAR . number_expression CLOSE_PAR
    (49) number_expression -> . number_expression ADD number_expression
    (50) number_expression -> . number_expression SUB number_expression
    (51) number_expression -> . number_expression MUL number_expression
    (52) number_expression -> . number_expression DIV number_expression
    (53) number_expression -> . number_expression POW number_expression
    (54) number_expression -> . OPEN_PAR number_expression CLOSE_PAR
    (55) number_expression -> . variable
    (56) number_expression -> . NUM
    (34) variable -> . COLON ID

    OPEN_PAR        shift and go to state 41
    NUM             shift and go to state 43
    COLON           shift and go to state 44

    number_expression              shift and go to state 81
    variable                       shift and go to state 42

state 42

    (55) number_expression -> variable .

    ADD             reduce using rule 55 (number_expression -> variable .)
    SUB             reduce using rule 55 (number_expression -> variable .)
    MUL             reduce using rule 55 (number_expression -> variable .)
    DIV             reduce using rule 55 (number_expression -> variable .)
    POW             reduce using rule 55 (number_expression -> variable .)
    FO              reduce using rule 55 (number_expression -> variable .)
    FORWARD         reduce using rule 55 (number_expression -> variable .)
    BK              reduce using rule 55 (number_expression -> variable .)
    BACKWARD        reduce using rule 55 (number_expression -> variable .)
    RT              reduce using rule 55 (number_expression -> variable .)
    RIGHT           reduce using rule 55 (number_expression -> variable .)
    LT              reduce using rule 55 (number_expression -> variable .)
    LEFT            reduce using rule 55 (number_expression -> variable .)
    PD              reduce using rule 55 (number_expression -> variable .)
    PENDOWN         reduce using rule 55 (number_expression -> variable .)
    PU              reduce using rule 55 (number_expression -> variable .)
    PENUP           reduce using rule 55 (number_expression -> variable .)
    WC              reduce using rule 55 (number_expression -> variable .)
    WIPECLEAN       reduce using rule 55 (number_expression -> variable .)
    CS              reduce using rule 55 (number_expression -> variable .)
    CLEARSCREEN     reduce using rule 55 (number_expression -> variable .)
    HOME            reduce using rule 55 (number_expression -> variable .)
    HEADING         reduce using rule 55 (number_expression -> variable .)
    TYPEIN          reduce using rule 55 (number_expression -> variable .)
    SETXY           reduce using rule 55 (number_expression -> variable .)
    XCOR            reduce using rule 55 (number_expression -> variable .)
    YCOR            reduce using rule 55 (number_expression -> variable .)
    ID              reduce using rule 55 (number_expression -> variable .)
    TO              reduce using rule 55 (number_expression -> variable .)
    IF              reduce using rule 55 (number_expression -> variable .)
    WHILE           reduce using rule 55 (number_expression -> variable .)
    WRITE           reduce using rule 55 (number_expression -> variable .)
    $end            reduce using rule 55 (number_expression -> variable .)
    END             reduce using rule 55 (number_expression -> variable .)
    ELSE            reduce using rule 55 (number_expression -> variable .)
    COMMA           reduce using rule 55 (number_expression -> variable .)
    CLOSE_PAR       reduce using rule 55 (number_expression -> variable .)
    GT_OP           reduce using rule 55 (number_expression -> variable .)
    LT_OP           reduce using rule 55 (number_expression -> variable .)
    GTE_OP          reduce using rule 55 (number_expression -> variable .)
    LTE_OP          reduce using rule 55 (number_expression -> variable .)
    EQ_OP           reduce using rule 55 (number_expression -> variable .)
    NE_OP           reduce using rule 55 (number_expression -> variable .)
    OR              reduce using rule 55 (number_expression -> variable .)
    AND             reduce using rule 55 (number_expression -> variable .)


state 43

    (56) number_expression -> NUM .

    ADD             reduce using rule 56 (number_expression -> NUM .)
    SUB             reduce using rule 56 (number_expression -> NUM .)
    MUL             reduce using rule 56 (number_expression -> NUM .)
    DIV             reduce using rule 56 (number_expression -> NUM .)
    POW             reduce using rule 56 (number_expression -> NUM .)
    FO              reduce using rule 56 (number_expression -> NUM .)
    FORWARD         reduce using rule 56 (number_expression -> NUM .)
    BK              reduce using rule 56 (number_expression -> NUM .)
    BACKWARD        reduce using rule 56 (number_expression -> NUM .)
    RT              reduce using rule 56 (number_expression -> NUM .)
    RIGHT           reduce using rule 56 (number_expression -> NUM .)
    LT              reduce using rule 56 (number_expression -> NUM .)
    LEFT            reduce using rule 56 (number_expression -> NUM .)
    PD              reduce using rule 56 (number_expression -> NUM .)
    PENDOWN         reduce using rule 56 (number_expression -> NUM .)
    PU              reduce using rule 56 (number_expression -> NUM .)
    PENUP           reduce using rule 56 (number_expression -> NUM .)
    WC              reduce using rule 56 (number_expression -> NUM .)
    WIPECLEAN       reduce using rule 56 (number_expression -> NUM .)
    CS              reduce using rule 56 (number_expression -> NUM .)
    CLEARSCREEN     reduce using rule 56 (number_expression -> NUM .)
    HOME            reduce using rule 56 (number_expression -> NUM .)
    HEADING         reduce using rule 56 (number_expression -> NUM .)
    TYPEIN          reduce using rule 56 (number_expression -> NUM .)
    SETXY           reduce using rule 56 (number_expression -> NUM .)
    XCOR            reduce using rule 56 (number_expression -> NUM .)
    YCOR            reduce using rule 56 (number_expression -> NUM .)
    ID              reduce using rule 56 (number_expression -> NUM .)
    TO              reduce using rule 56 (number_expression -> NUM .)
    IF              reduce using rule 56 (number_expression -> NUM .)
    WHILE           reduce using rule 56 (number_expression -> NUM .)
    WRITE           reduce using rule 56 (number_expression -> NUM .)
    $end            reduce using rule 56 (number_expression -> NUM .)
    END             reduce using rule 56 (number_expression -> NUM .)
    ELSE            reduce using rule 56 (number_expression -> NUM .)
    GT_OP           reduce using rule 56 (number_expression -> NUM .)
    LT_OP           reduce using rule 56 (number_expression -> NUM .)
    GTE_OP          reduce using rule 56 (number_expression -> NUM .)
    LTE_OP          reduce using rule 56 (number_expression -> NUM .)
    EQ_OP           reduce using rule 56 (number_expression -> NUM .)
    NE_OP           reduce using rule 56 (number_expression -> NUM .)
    COMMA           reduce using rule 56 (number_expression -> NUM .)
    CLOSE_PAR       reduce using rule 56 (number_expression -> NUM .)
    OR              reduce using rule 56 (number_expression -> NUM .)
    AND             reduce using rule 56 (number_expression -> NUM .)


state 44

    (34) variable -> COLON . ID

    ID              shift and go to state 82


state 45

    (12) instruction -> FORWARD number_expression .
    (49) number_expression -> number_expression . ADD number_expression
    (50) number_expression -> number_expression . SUB number_expression
    (51) number_expression -> number_expression . MUL number_expression
    (52) number_expression -> number_expression . DIV number_expression
    (53) number_expression -> number_expression . POW number_expression

    FO              reduce using rule 12 (instruction -> FORWARD number_expression .)
    FORWARD         reduce using rule 12 (instruction -> FORWARD number_expression .)
    BK              reduce using rule 12 (instruction -> FORWARD number_expression .)
    BACKWARD        reduce using rule 12 (instruction -> FORWARD number_expression .)
    RT              reduce using rule 12 (instruction -> FORWARD number_expression .)
    RIGHT           reduce using rule 12 (instruction -> FORWARD number_expression .)
    LT              reduce using rule 12 (instruction -> FORWARD number_expression .)
    LEFT            reduce using rule 12 (instruction -> FORWARD number_expression .)
    PD              reduce using rule 12 (instruction -> FORWARD number_expression .)
    PENDOWN         reduce using rule 12 (instruction -> FORWARD number_expression .)
    PU              reduce using rule 12 (instruction -> FORWARD number_expression .)
    PENUP           reduce using rule 12 (instruction -> FORWARD number_expression .)
    WC              reduce using rule 12 (instruction -> FORWARD number_expression .)
    WIPECLEAN       reduce using rule 12 (instruction -> FORWARD number_expression .)
    CS              reduce using rule 12 (instruction -> FORWARD number_expression .)
    CLEARSCREEN     reduce using rule 12 (instruction -> FORWARD number_expression .)
    HOME            reduce using rule 12 (instruction -> FORWARD number_expression .)
    HEADING         reduce using rule 12 (instruction -> FORWARD number_expression .)
    TYPEIN          reduce using rule 12 (instruction -> FORWARD number_expression .)
    SETXY           reduce using rule 12 (instruction -> FORWARD number_expression .)
    XCOR            reduce using rule 12 (instruction -> FORWARD number_expression .)
    YCOR            reduce using rule 12 (instruction -> FORWARD number_expression .)
    ID              reduce using rule 12 (instruction -> FORWARD number_expression .)
    TO              reduce using rule 12 (instruction -> FORWARD number_expression .)
    IF              reduce using rule 12 (instruction -> FORWARD number_expression .)
    WHILE           reduce using rule 12 (instruction -> FORWARD number_expression .)
    WRITE           reduce using rule 12 (instruction -> FORWARD number_expression .)
    $end            reduce using rule 12 (instruction -> FORWARD number_expression .)
    END             reduce using rule 12 (instruction -> FORWARD number_expression .)
    ELSE            reduce using rule 12 (instruction -> FORWARD number_expression .)
    ADD             shift and go to state 76
    SUB             shift and go to state 77
    MUL             shift and go to state 78
    DIV             shift and go to state 79
    POW             shift and go to state 80


state 46

    (13) instruction -> BK number_expression .
    (49) number_expression -> number_expression . ADD number_expression
    (50) number_expression -> number_expression . SUB number_expression
    (51) number_expression -> number_expression . MUL number_expression
    (52) number_expression -> number_expression . DIV number_expression
    (53) number_expression -> number_expression . POW number_expression

    FO              reduce using rule 13 (instruction -> BK number_expression .)
    FORWARD         reduce using rule 13 (instruction -> BK number_expression .)
    BK              reduce using rule 13 (instruction -> BK number_expression .)
    BACKWARD        reduce using rule 13 (instruction -> BK number_expression .)
    RT              reduce using rule 13 (instruction -> BK number_expression .)
    RIGHT           reduce using rule 13 (instruction -> BK number_expression .)
    LT              reduce using rule 13 (instruction -> BK number_expression .)
    LEFT            reduce using rule 13 (instruction -> BK number_expression .)
    PD              reduce using rule 13 (instruction -> BK number_expression .)
    PENDOWN         reduce using rule 13 (instruction -> BK number_expression .)
    PU              reduce using rule 13 (instruction -> BK number_expression .)
    PENUP           reduce using rule 13 (instruction -> BK number_expression .)
    WC              reduce using rule 13 (instruction -> BK number_expression .)
    WIPECLEAN       reduce using rule 13 (instruction -> BK number_expression .)
    CS              reduce using rule 13 (instruction -> BK number_expression .)
    CLEARSCREEN     reduce using rule 13 (instruction -> BK number_expression .)
    HOME            reduce using rule 13 (instruction -> BK number_expression .)
    HEADING         reduce using rule 13 (instruction -> BK number_expression .)
    TYPEIN          reduce using rule 13 (instruction -> BK number_expression .)
    SETXY           reduce using rule 13 (instruction -> BK number_expression .)
    XCOR            reduce using rule 13 (instruction -> BK number_expression .)
    YCOR            reduce using rule 13 (instruction -> BK number_expression .)
    ID              reduce using rule 13 (instruction -> BK number_expression .)
    TO              reduce using rule 13 (instruction -> BK number_expression .)
    IF              reduce using rule 13 (instruction -> BK number_expression .)
    WHILE           reduce using rule 13 (instruction -> BK number_expression .)
    WRITE           reduce using rule 13 (instruction -> BK number_expression .)
    $end            reduce using rule 13 (instruction -> BK number_expression .)
    END             reduce using rule 13 (instruction -> BK number_expression .)
    ELSE            reduce using rule 13 (instruction -> BK number_expression .)
    ADD             shift and go to state 76
    SUB             shift and go to state 77
    MUL             shift and go to state 78
    DIV             shift and go to state 79
    POW             shift and go to state 80


state 47

    (14) instruction -> BACKWARD number_expression .
    (49) number_expression -> number_expression . ADD number_expression
    (50) number_expression -> number_expression . SUB number_expression
    (51) number_expression -> number_expression . MUL number_expression
    (52) number_expression -> number_expression . DIV number_expression
    (53) number_expression -> number_expression . POW number_expression

    FO              reduce using rule 14 (instruction -> BACKWARD number_expression .)
    FORWARD         reduce using rule 14 (instruction -> BACKWARD number_expression .)
    BK              reduce using rule 14 (instruction -> BACKWARD number_expression .)
    BACKWARD        reduce using rule 14 (instruction -> BACKWARD number_expression .)
    RT              reduce using rule 14 (instruction -> BACKWARD number_expression .)
    RIGHT           reduce using rule 14 (instruction -> BACKWARD number_expression .)
    LT              reduce using rule 14 (instruction -> BACKWARD number_expression .)
    LEFT            reduce using rule 14 (instruction -> BACKWARD number_expression .)
    PD              reduce using rule 14 (instruction -> BACKWARD number_expression .)
    PENDOWN         reduce using rule 14 (instruction -> BACKWARD number_expression .)
    PU              reduce using rule 14 (instruction -> BACKWARD number_expression .)
    PENUP           reduce using rule 14 (instruction -> BACKWARD number_expression .)
    WC              reduce using rule 14 (instruction -> BACKWARD number_expression .)
    WIPECLEAN       reduce using rule 14 (instruction -> BACKWARD number_expression .)
    CS              reduce using rule 14 (instruction -> BACKWARD number_expression .)
    CLEARSCREEN     reduce using rule 14 (instruction -> BACKWARD number_expression .)
    HOME            reduce using rule 14 (instruction -> BACKWARD number_expression .)
    HEADING         reduce using rule 14 (instruction -> BACKWARD number_expression .)
    TYPEIN          reduce using rule 14 (instruction -> BACKWARD number_expression .)
    SETXY           reduce using rule 14 (instruction -> BACKWARD number_expression .)
    XCOR            reduce using rule 14 (instruction -> BACKWARD number_expression .)
    YCOR            reduce using rule 14 (instruction -> BACKWARD number_expression .)
    ID              reduce using rule 14 (instruction -> BACKWARD number_expression .)
    TO              reduce using rule 14 (instruction -> BACKWARD number_expression .)
    IF              reduce using rule 14 (instruction -> BACKWARD number_expression .)
    WHILE           reduce using rule 14 (instruction -> BACKWARD number_expression .)
    WRITE           reduce using rule 14 (instruction -> BACKWARD number_expression .)
    $end            reduce using rule 14 (instruction -> BACKWARD number_expression .)
    END             reduce using rule 14 (instruction -> BACKWARD number_expression .)
    ELSE            reduce using rule 14 (instruction -> BACKWARD number_expression .)
    ADD             shift and go to state 76
    SUB             shift and go to state 77
    MUL             shift and go to state 78
    DIV             shift and go to state 79
    POW             shift and go to state 80


state 48

    (15) instruction -> RT number_expression .
    (49) number_expression -> number_expression . ADD number_expression
    (50) number_expression -> number_expression . SUB number_expression
    (51) number_expression -> number_expression . MUL number_expression
    (52) number_expression -> number_expression . DIV number_expression
    (53) number_expression -> number_expression . POW number_expression

    FO              reduce using rule 15 (instruction -> RT number_expression .)
    FORWARD         reduce using rule 15 (instruction -> RT number_expression .)
    BK              reduce using rule 15 (instruction -> RT number_expression .)
    BACKWARD        reduce using rule 15 (instruction -> RT number_expression .)
    RT              reduce using rule 15 (instruction -> RT number_expression .)
    RIGHT           reduce using rule 15 (instruction -> RT number_expression .)
    LT              reduce using rule 15 (instruction -> RT number_expression .)
    LEFT            reduce using rule 15 (instruction -> RT number_expression .)
    PD              reduce using rule 15 (instruction -> RT number_expression .)
    PENDOWN         reduce using rule 15 (instruction -> RT number_expression .)
    PU              reduce using rule 15 (instruction -> RT number_expression .)
    PENUP           reduce using rule 15 (instruction -> RT number_expression .)
    WC              reduce using rule 15 (instruction -> RT number_expression .)
    WIPECLEAN       reduce using rule 15 (instruction -> RT number_expression .)
    CS              reduce using rule 15 (instruction -> RT number_expression .)
    CLEARSCREEN     reduce using rule 15 (instruction -> RT number_expression .)
    HOME            reduce using rule 15 (instruction -> RT number_expression .)
    HEADING         reduce using rule 15 (instruction -> RT number_expression .)
    TYPEIN          reduce using rule 15 (instruction -> RT number_expression .)
    SETXY           reduce using rule 15 (instruction -> RT number_expression .)
    XCOR            reduce using rule 15 (instruction -> RT number_expression .)
    YCOR            reduce using rule 15 (instruction -> RT number_expression .)
    ID              reduce using rule 15 (instruction -> RT number_expression .)
    TO              reduce using rule 15 (instruction -> RT number_expression .)
    IF              reduce using rule 15 (instruction -> RT number_expression .)
    WHILE           reduce using rule 15 (instruction -> RT number_expression .)
    WRITE           reduce using rule 15 (instruction -> RT number_expression .)
    $end            reduce using rule 15 (instruction -> RT number_expression .)
    END             reduce using rule 15 (instruction -> RT number_expression .)
    ELSE            reduce using rule 15 (instruction -> RT number_expression .)
    ADD             shift and go to state 76
    SUB             shift and go to state 77
    MUL             shift and go to state 78
    DIV             shift and go to state 79
    POW             shift and go to state 80


state 49

    (16) instruction -> RIGHT expression .
    (64) relational_operation -> expression . GT_OP expression
    (65) relational_operation -> expression . LT_OP expression
    (66) relational_operation -> expression . GTE_OP expression
    (67) relational_operation -> expression . LTE_OP expression
    (68) relational_operation -> expression . EQ_OP expression
    (69) relational_operation -> expression . NE_OP expression

    FO              reduce using rule 16 (instruction -> RIGHT expression .)
    FORWARD         reduce using rule 16 (instruction -> RIGHT expression .)
    BK              reduce using rule 16 (instruction -> RIGHT expression .)
    BACKWARD        reduce using rule 16 (instruction -> RIGHT expression .)
    RT              reduce using rule 16 (instruction -> RIGHT expression .)
    RIGHT           reduce using rule 16 (instruction -> RIGHT expression .)
    LT              reduce using rule 16 (instruction -> RIGHT expression .)
    LEFT            reduce using rule 16 (instruction -> RIGHT expression .)
    PD              reduce using rule 16 (instruction -> RIGHT expression .)
    PENDOWN         reduce using rule 16 (instruction -> RIGHT expression .)
    PU              reduce using rule 16 (instruction -> RIGHT expression .)
    PENUP           reduce using rule 16 (instruction -> RIGHT expression .)
    WC              reduce using rule 16 (instruction -> RIGHT expression .)
    WIPECLEAN       reduce using rule 16 (instruction -> RIGHT expression .)
    CS              reduce using rule 16 (instruction -> RIGHT expression .)
    CLEARSCREEN     reduce using rule 16 (instruction -> RIGHT expression .)
    HOME            reduce using rule 16 (instruction -> RIGHT expression .)
    HEADING         reduce using rule 16 (instruction -> RIGHT expression .)
    TYPEIN          reduce using rule 16 (instruction -> RIGHT expression .)
    SETXY           reduce using rule 16 (instruction -> RIGHT expression .)
    XCOR            reduce using rule 16 (instruction -> RIGHT expression .)
    YCOR            reduce using rule 16 (instruction -> RIGHT expression .)
    ID              reduce using rule 16 (instruction -> RIGHT expression .)
    TO              reduce using rule 16 (instruction -> RIGHT expression .)
    IF              reduce using rule 16 (instruction -> RIGHT expression .)
    WHILE           reduce using rule 16 (instruction -> RIGHT expression .)
    WRITE           reduce using rule 16 (instruction -> RIGHT expression .)
    $end            reduce using rule 16 (instruction -> RIGHT expression .)
    END             reduce using rule 16 (instruction -> RIGHT expression .)
    ELSE            reduce using rule 16 (instruction -> RIGHT expression .)
    GT_OP           shift and go to state 83
    LT_OP           shift and go to state 84
    GTE_OP          shift and go to state 85
    LTE_OP          shift and go to state 86
    EQ_OP           shift and go to state 87
    NE_OP           shift and go to state 88


state 50

    (44) expression -> OPEN_PAR . expression CLOSE_PAR
    (54) number_expression -> OPEN_PAR . number_expression CLOSE_PAR
    (44) expression -> . OPEN_PAR expression CLOSE_PAR
    (45) expression -> . boolean_expression
    (46) expression -> . number_expression
    (47) expression -> . RANDOM
    (48) expression -> . string
    (49) number_expression -> . number_expression ADD number_expression
    (50) number_expression -> . number_expression SUB number_expression
    (51) number_expression -> . number_expression MUL number_expression
    (52) number_expression -> . number_expression DIV number_expression
    (53) number_expression -> . number_expression POW number_expression
    (54) number_expression -> . OPEN_PAR number_expression CLOSE_PAR
    (55) number_expression -> . variable
    (56) number_expression -> . NUM
    (57) boolean_expression -> . relational_operation
    (58) boolean_expression -> . boolean_expression OR boolean_expression
    (59) boolean_expression -> . boolean_expression AND boolean_expression
    (60) boolean_expression -> . NOT boolean_expression
    (61) boolean_expression -> . variable
    (62) boolean_expression -> . TRUE
    (63) boolean_expression -> . FALSE
    (76) string -> . STRING
    (34) variable -> . COLON ID
    (64) relational_operation -> . expression GT_OP expression
    (65) relational_operation -> . expression LT_OP expression
    (66) relational_operation -> . expression GTE_OP expression
    (67) relational_operation -> . expression LTE_OP expression
    (68) relational_operation -> . expression EQ_OP expression
    (69) relational_operation -> . expression NE_OP expression

    OPEN_PAR        shift and go to state 50
    RANDOM          shift and go to state 53
    NUM             shift and go to state 43
    NOT             shift and go to state 56
    TRUE            shift and go to state 58
    FALSE           shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 44

    expression                     shift and go to state 89
    number_expression              shift and go to state 90
    boolean_expression             shift and go to state 51
    string                         shift and go to state 54
    variable                       shift and go to state 91
    relational_operation           shift and go to state 55

state 51

    (45) expression -> boolean_expression .
    (58) boolean_expression -> boolean_expression . OR boolean_expression
    (59) boolean_expression -> boolean_expression . AND boolean_expression

  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    GT_OP           reduce using rule 45 (expression -> boolean_expression .)
    LT_OP           reduce using rule 45 (expression -> boolean_expression .)
    GTE_OP          reduce using rule 45 (expression -> boolean_expression .)
    LTE_OP          reduce using rule 45 (expression -> boolean_expression .)
    EQ_OP           reduce using rule 45 (expression -> boolean_expression .)
    NE_OP           reduce using rule 45 (expression -> boolean_expression .)
    FO              reduce using rule 45 (expression -> boolean_expression .)
    FORWARD         reduce using rule 45 (expression -> boolean_expression .)
    BK              reduce using rule 45 (expression -> boolean_expression .)
    BACKWARD        reduce using rule 45 (expression -> boolean_expression .)
    RT              reduce using rule 45 (expression -> boolean_expression .)
    RIGHT           reduce using rule 45 (expression -> boolean_expression .)
    LT              reduce using rule 45 (expression -> boolean_expression .)
    LEFT            reduce using rule 45 (expression -> boolean_expression .)
    PD              reduce using rule 45 (expression -> boolean_expression .)
    PENDOWN         reduce using rule 45 (expression -> boolean_expression .)
    PU              reduce using rule 45 (expression -> boolean_expression .)
    PENUP           reduce using rule 45 (expression -> boolean_expression .)
    WC              reduce using rule 45 (expression -> boolean_expression .)
    WIPECLEAN       reduce using rule 45 (expression -> boolean_expression .)
    CS              reduce using rule 45 (expression -> boolean_expression .)
    CLEARSCREEN     reduce using rule 45 (expression -> boolean_expression .)
    HOME            reduce using rule 45 (expression -> boolean_expression .)
    HEADING         reduce using rule 45 (expression -> boolean_expression .)
    TYPEIN          reduce using rule 45 (expression -> boolean_expression .)
    SETXY           reduce using rule 45 (expression -> boolean_expression .)
    XCOR            reduce using rule 45 (expression -> boolean_expression .)
    YCOR            reduce using rule 45 (expression -> boolean_expression .)
    ID              reduce using rule 45 (expression -> boolean_expression .)
    TO              reduce using rule 45 (expression -> boolean_expression .)
    IF              reduce using rule 45 (expression -> boolean_expression .)
    WHILE           reduce using rule 45 (expression -> boolean_expression .)
    WRITE           reduce using rule 45 (expression -> boolean_expression .)
    $end            reduce using rule 45 (expression -> boolean_expression .)
    END             reduce using rule 45 (expression -> boolean_expression .)
    ELSE            reduce using rule 45 (expression -> boolean_expression .)
    COMMA           reduce using rule 45 (expression -> boolean_expression .)
    CLOSE_PAR       reduce using rule 45 (expression -> boolean_expression .)
    OR              shift and go to state 92
    AND             shift and go to state 93

  ! OR              [ reduce using rule 45 (expression -> boolean_expression .) ]
  ! AND             [ reduce using rule 45 (expression -> boolean_expression .) ]


state 52

    (46) expression -> number_expression .
    (49) number_expression -> number_expression . ADD number_expression
    (50) number_expression -> number_expression . SUB number_expression
    (51) number_expression -> number_expression . MUL number_expression
    (52) number_expression -> number_expression . DIV number_expression
    (53) number_expression -> number_expression . POW number_expression

    GT_OP           reduce using rule 46 (expression -> number_expression .)
    LT_OP           reduce using rule 46 (expression -> number_expression .)
    GTE_OP          reduce using rule 46 (expression -> number_expression .)
    LTE_OP          reduce using rule 46 (expression -> number_expression .)
    EQ_OP           reduce using rule 46 (expression -> number_expression .)
    NE_OP           reduce using rule 46 (expression -> number_expression .)
    FO              reduce using rule 46 (expression -> number_expression .)
    FORWARD         reduce using rule 46 (expression -> number_expression .)
    BK              reduce using rule 46 (expression -> number_expression .)
    BACKWARD        reduce using rule 46 (expression -> number_expression .)
    RT              reduce using rule 46 (expression -> number_expression .)
    RIGHT           reduce using rule 46 (expression -> number_expression .)
    LT              reduce using rule 46 (expression -> number_expression .)
    LEFT            reduce using rule 46 (expression -> number_expression .)
    PD              reduce using rule 46 (expression -> number_expression .)
    PENDOWN         reduce using rule 46 (expression -> number_expression .)
    PU              reduce using rule 46 (expression -> number_expression .)
    PENUP           reduce using rule 46 (expression -> number_expression .)
    WC              reduce using rule 46 (expression -> number_expression .)
    WIPECLEAN       reduce using rule 46 (expression -> number_expression .)
    CS              reduce using rule 46 (expression -> number_expression .)
    CLEARSCREEN     reduce using rule 46 (expression -> number_expression .)
    HOME            reduce using rule 46 (expression -> number_expression .)
    HEADING         reduce using rule 46 (expression -> number_expression .)
    TYPEIN          reduce using rule 46 (expression -> number_expression .)
    SETXY           reduce using rule 46 (expression -> number_expression .)
    XCOR            reduce using rule 46 (expression -> number_expression .)
    YCOR            reduce using rule 46 (expression -> number_expression .)
    ID              reduce using rule 46 (expression -> number_expression .)
    TO              reduce using rule 46 (expression -> number_expression .)
    IF              reduce using rule 46 (expression -> number_expression .)
    WHILE           reduce using rule 46 (expression -> number_expression .)
    WRITE           reduce using rule 46 (expression -> number_expression .)
    $end            reduce using rule 46 (expression -> number_expression .)
    END             reduce using rule 46 (expression -> number_expression .)
    ELSE            reduce using rule 46 (expression -> number_expression .)
    COMMA           reduce using rule 46 (expression -> number_expression .)
    OR              reduce using rule 46 (expression -> number_expression .)
    AND             reduce using rule 46 (expression -> number_expression .)
    CLOSE_PAR       reduce using rule 46 (expression -> number_expression .)
    ADD             shift and go to state 76
    SUB             shift and go to state 77
    MUL             shift and go to state 78
    DIV             shift and go to state 79
    POW             shift and go to state 80


state 53

    (47) expression -> RANDOM .

    GT_OP           reduce using rule 47 (expression -> RANDOM .)
    LT_OP           reduce using rule 47 (expression -> RANDOM .)
    GTE_OP          reduce using rule 47 (expression -> RANDOM .)
    LTE_OP          reduce using rule 47 (expression -> RANDOM .)
    EQ_OP           reduce using rule 47 (expression -> RANDOM .)
    NE_OP           reduce using rule 47 (expression -> RANDOM .)
    FO              reduce using rule 47 (expression -> RANDOM .)
    FORWARD         reduce using rule 47 (expression -> RANDOM .)
    BK              reduce using rule 47 (expression -> RANDOM .)
    BACKWARD        reduce using rule 47 (expression -> RANDOM .)
    RT              reduce using rule 47 (expression -> RANDOM .)
    RIGHT           reduce using rule 47 (expression -> RANDOM .)
    LT              reduce using rule 47 (expression -> RANDOM .)
    LEFT            reduce using rule 47 (expression -> RANDOM .)
    PD              reduce using rule 47 (expression -> RANDOM .)
    PENDOWN         reduce using rule 47 (expression -> RANDOM .)
    PU              reduce using rule 47 (expression -> RANDOM .)
    PENUP           reduce using rule 47 (expression -> RANDOM .)
    WC              reduce using rule 47 (expression -> RANDOM .)
    WIPECLEAN       reduce using rule 47 (expression -> RANDOM .)
    CS              reduce using rule 47 (expression -> RANDOM .)
    CLEARSCREEN     reduce using rule 47 (expression -> RANDOM .)
    HOME            reduce using rule 47 (expression -> RANDOM .)
    HEADING         reduce using rule 47 (expression -> RANDOM .)
    TYPEIN          reduce using rule 47 (expression -> RANDOM .)
    SETXY           reduce using rule 47 (expression -> RANDOM .)
    XCOR            reduce using rule 47 (expression -> RANDOM .)
    YCOR            reduce using rule 47 (expression -> RANDOM .)
    ID              reduce using rule 47 (expression -> RANDOM .)
    TO              reduce using rule 47 (expression -> RANDOM .)
    IF              reduce using rule 47 (expression -> RANDOM .)
    WHILE           reduce using rule 47 (expression -> RANDOM .)
    WRITE           reduce using rule 47 (expression -> RANDOM .)
    $end            reduce using rule 47 (expression -> RANDOM .)
    END             reduce using rule 47 (expression -> RANDOM .)
    ELSE            reduce using rule 47 (expression -> RANDOM .)
    COMMA           reduce using rule 47 (expression -> RANDOM .)
    CLOSE_PAR       reduce using rule 47 (expression -> RANDOM .)
    OR              reduce using rule 47 (expression -> RANDOM .)
    AND             reduce using rule 47 (expression -> RANDOM .)


state 54

    (48) expression -> string .

    GT_OP           reduce using rule 48 (expression -> string .)
    LT_OP           reduce using rule 48 (expression -> string .)
    GTE_OP          reduce using rule 48 (expression -> string .)
    LTE_OP          reduce using rule 48 (expression -> string .)
    EQ_OP           reduce using rule 48 (expression -> string .)
    NE_OP           reduce using rule 48 (expression -> string .)
    FO              reduce using rule 48 (expression -> string .)
    FORWARD         reduce using rule 48 (expression -> string .)
    BK              reduce using rule 48 (expression -> string .)
    BACKWARD        reduce using rule 48 (expression -> string .)
    RT              reduce using rule 48 (expression -> string .)
    RIGHT           reduce using rule 48 (expression -> string .)
    LT              reduce using rule 48 (expression -> string .)
    LEFT            reduce using rule 48 (expression -> string .)
    PD              reduce using rule 48 (expression -> string .)
    PENDOWN         reduce using rule 48 (expression -> string .)
    PU              reduce using rule 48 (expression -> string .)
    PENUP           reduce using rule 48 (expression -> string .)
    WC              reduce using rule 48 (expression -> string .)
    WIPECLEAN       reduce using rule 48 (expression -> string .)
    CS              reduce using rule 48 (expression -> string .)
    CLEARSCREEN     reduce using rule 48 (expression -> string .)
    HOME            reduce using rule 48 (expression -> string .)
    HEADING         reduce using rule 48 (expression -> string .)
    TYPEIN          reduce using rule 48 (expression -> string .)
    SETXY           reduce using rule 48 (expression -> string .)
    XCOR            reduce using rule 48 (expression -> string .)
    YCOR            reduce using rule 48 (expression -> string .)
    ID              reduce using rule 48 (expression -> string .)
    TO              reduce using rule 48 (expression -> string .)
    IF              reduce using rule 48 (expression -> string .)
    WHILE           reduce using rule 48 (expression -> string .)
    WRITE           reduce using rule 48 (expression -> string .)
    $end            reduce using rule 48 (expression -> string .)
    END             reduce using rule 48 (expression -> string .)
    ELSE            reduce using rule 48 (expression -> string .)
    COMMA           reduce using rule 48 (expression -> string .)
    CLOSE_PAR       reduce using rule 48 (expression -> string .)
    OR              reduce using rule 48 (expression -> string .)
    AND             reduce using rule 48 (expression -> string .)


state 55

    (57) boolean_expression -> relational_operation .

    OR              reduce using rule 57 (boolean_expression -> relational_operation .)
    AND             reduce using rule 57 (boolean_expression -> relational_operation .)
    GT_OP           reduce using rule 57 (boolean_expression -> relational_operation .)
    LT_OP           reduce using rule 57 (boolean_expression -> relational_operation .)
    GTE_OP          reduce using rule 57 (boolean_expression -> relational_operation .)
    LTE_OP          reduce using rule 57 (boolean_expression -> relational_operation .)
    EQ_OP           reduce using rule 57 (boolean_expression -> relational_operation .)
    NE_OP           reduce using rule 57 (boolean_expression -> relational_operation .)
    FO              reduce using rule 57 (boolean_expression -> relational_operation .)
    FORWARD         reduce using rule 57 (boolean_expression -> relational_operation .)
    BK              reduce using rule 57 (boolean_expression -> relational_operation .)
    BACKWARD        reduce using rule 57 (boolean_expression -> relational_operation .)
    RT              reduce using rule 57 (boolean_expression -> relational_operation .)
    RIGHT           reduce using rule 57 (boolean_expression -> relational_operation .)
    LT              reduce using rule 57 (boolean_expression -> relational_operation .)
    LEFT            reduce using rule 57 (boolean_expression -> relational_operation .)
    PD              reduce using rule 57 (boolean_expression -> relational_operation .)
    PENDOWN         reduce using rule 57 (boolean_expression -> relational_operation .)
    PU              reduce using rule 57 (boolean_expression -> relational_operation .)
    PENUP           reduce using rule 57 (boolean_expression -> relational_operation .)
    WC              reduce using rule 57 (boolean_expression -> relational_operation .)
    WIPECLEAN       reduce using rule 57 (boolean_expression -> relational_operation .)
    CS              reduce using rule 57 (boolean_expression -> relational_operation .)
    CLEARSCREEN     reduce using rule 57 (boolean_expression -> relational_operation .)
    HOME            reduce using rule 57 (boolean_expression -> relational_operation .)
    HEADING         reduce using rule 57 (boolean_expression -> relational_operation .)
    TYPEIN          reduce using rule 57 (boolean_expression -> relational_operation .)
    SETXY           reduce using rule 57 (boolean_expression -> relational_operation .)
    XCOR            reduce using rule 57 (boolean_expression -> relational_operation .)
    YCOR            reduce using rule 57 (boolean_expression -> relational_operation .)
    ID              reduce using rule 57 (boolean_expression -> relational_operation .)
    TO              reduce using rule 57 (boolean_expression -> relational_operation .)
    IF              reduce using rule 57 (boolean_expression -> relational_operation .)
    WHILE           reduce using rule 57 (boolean_expression -> relational_operation .)
    WRITE           reduce using rule 57 (boolean_expression -> relational_operation .)
    $end            reduce using rule 57 (boolean_expression -> relational_operation .)
    END             reduce using rule 57 (boolean_expression -> relational_operation .)
    ELSE            reduce using rule 57 (boolean_expression -> relational_operation .)
    COMMA           reduce using rule 57 (boolean_expression -> relational_operation .)
    CLOSE_PAR       reduce using rule 57 (boolean_expression -> relational_operation .)


state 56

    (60) boolean_expression -> NOT . boolean_expression
    (57) boolean_expression -> . relational_operation
    (58) boolean_expression -> . boolean_expression OR boolean_expression
    (59) boolean_expression -> . boolean_expression AND boolean_expression
    (60) boolean_expression -> . NOT boolean_expression
    (61) boolean_expression -> . variable
    (62) boolean_expression -> . TRUE
    (63) boolean_expression -> . FALSE
    (64) relational_operation -> . expression GT_OP expression
    (65) relational_operation -> . expression LT_OP expression
    (66) relational_operation -> . expression GTE_OP expression
    (67) relational_operation -> . expression LTE_OP expression
    (68) relational_operation -> . expression EQ_OP expression
    (69) relational_operation -> . expression NE_OP expression
    (34) variable -> . COLON ID
    (44) expression -> . OPEN_PAR expression CLOSE_PAR
    (45) expression -> . boolean_expression
    (46) expression -> . number_expression
    (47) expression -> . RANDOM
    (48) expression -> . string
    (49) number_expression -> . number_expression ADD number_expression
    (50) number_expression -> . number_expression SUB number_expression
    (51) number_expression -> . number_expression MUL number_expression
    (52) number_expression -> . number_expression DIV number_expression
    (53) number_expression -> . number_expression POW number_expression
    (54) number_expression -> . OPEN_PAR number_expression CLOSE_PAR
    (55) number_expression -> . variable
    (56) number_expression -> . NUM
    (76) string -> . STRING

    NOT             shift and go to state 56
    TRUE            shift and go to state 58
    FALSE           shift and go to state 59
    COLON           shift and go to state 44
    OPEN_PAR        shift and go to state 50
    RANDOM          shift and go to state 53
    NUM             shift and go to state 43
    STRING          shift and go to state 60

    boolean_expression             shift and go to state 94
    relational_operation           shift and go to state 55
    variable                       shift and go to state 57
    expression                     shift and go to state 95
    number_expression              shift and go to state 52
    string                         shift and go to state 54

state 57

    (61) boolean_expression -> variable .
    (55) number_expression -> variable .

  ! reduce/reduce conflict for GT_OP resolved using rule 55 (number_expression -> variable .)
  ! reduce/reduce conflict for LT_OP resolved using rule 55 (number_expression -> variable .)
  ! reduce/reduce conflict for GTE_OP resolved using rule 55 (number_expression -> variable .)
  ! reduce/reduce conflict for LTE_OP resolved using rule 55 (number_expression -> variable .)
  ! reduce/reduce conflict for EQ_OP resolved using rule 55 (number_expression -> variable .)
  ! reduce/reduce conflict for NE_OP resolved using rule 55 (number_expression -> variable .)
  ! reduce/reduce conflict for FO resolved using rule 55 (number_expression -> variable .)
  ! reduce/reduce conflict for FORWARD resolved using rule 55 (number_expression -> variable .)
  ! reduce/reduce conflict for BK resolved using rule 55 (number_expression -> variable .)
  ! reduce/reduce conflict for BACKWARD resolved using rule 55 (number_expression -> variable .)
  ! reduce/reduce conflict for RT resolved using rule 55 (number_expression -> variable .)
  ! reduce/reduce conflict for RIGHT resolved using rule 55 (number_expression -> variable .)
  ! reduce/reduce conflict for LT resolved using rule 55 (number_expression -> variable .)
  ! reduce/reduce conflict for LEFT resolved using rule 55 (number_expression -> variable .)
  ! reduce/reduce conflict for PD resolved using rule 55 (number_expression -> variable .)
  ! reduce/reduce conflict for PENDOWN resolved using rule 55 (number_expression -> variable .)
  ! reduce/reduce conflict for PU resolved using rule 55 (number_expression -> variable .)
  ! reduce/reduce conflict for PENUP resolved using rule 55 (number_expression -> variable .)
  ! reduce/reduce conflict for WC resolved using rule 55 (number_expression -> variable .)
  ! reduce/reduce conflict for WIPECLEAN resolved using rule 55 (number_expression -> variable .)
  ! reduce/reduce conflict for CS resolved using rule 55 (number_expression -> variable .)
  ! reduce/reduce conflict for CLEARSCREEN resolved using rule 55 (number_expression -> variable .)
  ! reduce/reduce conflict for HOME resolved using rule 55 (number_expression -> variable .)
  ! reduce/reduce conflict for HEADING resolved using rule 55 (number_expression -> variable .)
  ! reduce/reduce conflict for TYPEIN resolved using rule 55 (number_expression -> variable .)
  ! reduce/reduce conflict for SETXY resolved using rule 55 (number_expression -> variable .)
  ! reduce/reduce conflict for XCOR resolved using rule 55 (number_expression -> variable .)
  ! reduce/reduce conflict for YCOR resolved using rule 55 (number_expression -> variable .)
  ! reduce/reduce conflict for ID resolved using rule 55 (number_expression -> variable .)
  ! reduce/reduce conflict for TO resolved using rule 55 (number_expression -> variable .)
  ! reduce/reduce conflict for IF resolved using rule 55 (number_expression -> variable .)
  ! reduce/reduce conflict for WHILE resolved using rule 55 (number_expression -> variable .)
  ! reduce/reduce conflict for WRITE resolved using rule 55 (number_expression -> variable .)
  ! reduce/reduce conflict for $end resolved using rule 55 (number_expression -> variable .)
  ! reduce/reduce conflict for END resolved using rule 55 (number_expression -> variable .)
  ! reduce/reduce conflict for ELSE resolved using rule 55 (number_expression -> variable .)
  ! reduce/reduce conflict for COMMA resolved using rule 55 (number_expression -> variable .)
  ! reduce/reduce conflict for OR resolved using rule 55 (number_expression -> variable .)
  ! reduce/reduce conflict for AND resolved using rule 55 (number_expression -> variable .)
  ! reduce/reduce conflict for CLOSE_PAR resolved using rule 55 (number_expression -> variable .)
    ADD             reduce using rule 55 (number_expression -> variable .)
    SUB             reduce using rule 55 (number_expression -> variable .)
    MUL             reduce using rule 55 (number_expression -> variable .)
    DIV             reduce using rule 55 (number_expression -> variable .)
    POW             reduce using rule 55 (number_expression -> variable .)
    GT_OP           reduce using rule 55 (number_expression -> variable .)
    LT_OP           reduce using rule 55 (number_expression -> variable .)
    GTE_OP          reduce using rule 55 (number_expression -> variable .)
    LTE_OP          reduce using rule 55 (number_expression -> variable .)
    EQ_OP           reduce using rule 55 (number_expression -> variable .)
    NE_OP           reduce using rule 55 (number_expression -> variable .)
    FO              reduce using rule 55 (number_expression -> variable .)
    FORWARD         reduce using rule 55 (number_expression -> variable .)
    BK              reduce using rule 55 (number_expression -> variable .)
    BACKWARD        reduce using rule 55 (number_expression -> variable .)
    RT              reduce using rule 55 (number_expression -> variable .)
    RIGHT           reduce using rule 55 (number_expression -> variable .)
    LT              reduce using rule 55 (number_expression -> variable .)
    LEFT            reduce using rule 55 (number_expression -> variable .)
    PD              reduce using rule 55 (number_expression -> variable .)
    PENDOWN         reduce using rule 55 (number_expression -> variable .)
    PU              reduce using rule 55 (number_expression -> variable .)
    PENUP           reduce using rule 55 (number_expression -> variable .)
    WC              reduce using rule 55 (number_expression -> variable .)
    WIPECLEAN       reduce using rule 55 (number_expression -> variable .)
    CS              reduce using rule 55 (number_expression -> variable .)
    CLEARSCREEN     reduce using rule 55 (number_expression -> variable .)
    HOME            reduce using rule 55 (number_expression -> variable .)
    HEADING         reduce using rule 55 (number_expression -> variable .)
    TYPEIN          reduce using rule 55 (number_expression -> variable .)
    SETXY           reduce using rule 55 (number_expression -> variable .)
    XCOR            reduce using rule 55 (number_expression -> variable .)
    YCOR            reduce using rule 55 (number_expression -> variable .)
    ID              reduce using rule 55 (number_expression -> variable .)
    TO              reduce using rule 55 (number_expression -> variable .)
    IF              reduce using rule 55 (number_expression -> variable .)
    WHILE           reduce using rule 55 (number_expression -> variable .)
    WRITE           reduce using rule 55 (number_expression -> variable .)
    $end            reduce using rule 55 (number_expression -> variable .)
    END             reduce using rule 55 (number_expression -> variable .)
    ELSE            reduce using rule 55 (number_expression -> variable .)
    COMMA           reduce using rule 55 (number_expression -> variable .)
    OR              reduce using rule 55 (number_expression -> variable .)
    AND             reduce using rule 55 (number_expression -> variable .)
    CLOSE_PAR       reduce using rule 55 (number_expression -> variable .)

  ! OR              [ reduce using rule 61 (boolean_expression -> variable .) ]
  ! AND             [ reduce using rule 61 (boolean_expression -> variable .) ]
  ! GT_OP           [ reduce using rule 61 (boolean_expression -> variable .) ]
  ! LT_OP           [ reduce using rule 61 (boolean_expression -> variable .) ]
  ! GTE_OP          [ reduce using rule 61 (boolean_expression -> variable .) ]
  ! LTE_OP          [ reduce using rule 61 (boolean_expression -> variable .) ]
  ! EQ_OP           [ reduce using rule 61 (boolean_expression -> variable .) ]
  ! NE_OP           [ reduce using rule 61 (boolean_expression -> variable .) ]
  ! FO              [ reduce using rule 61 (boolean_expression -> variable .) ]
  ! FORWARD         [ reduce using rule 61 (boolean_expression -> variable .) ]
  ! BK              [ reduce using rule 61 (boolean_expression -> variable .) ]
  ! BACKWARD        [ reduce using rule 61 (boolean_expression -> variable .) ]
  ! RT              [ reduce using rule 61 (boolean_expression -> variable .) ]
  ! RIGHT           [ reduce using rule 61 (boolean_expression -> variable .) ]
  ! LT              [ reduce using rule 61 (boolean_expression -> variable .) ]
  ! LEFT            [ reduce using rule 61 (boolean_expression -> variable .) ]
  ! PD              [ reduce using rule 61 (boolean_expression -> variable .) ]
  ! PENDOWN         [ reduce using rule 61 (boolean_expression -> variable .) ]
  ! PU              [ reduce using rule 61 (boolean_expression -> variable .) ]
  ! PENUP           [ reduce using rule 61 (boolean_expression -> variable .) ]
  ! WC              [ reduce using rule 61 (boolean_expression -> variable .) ]
  ! WIPECLEAN       [ reduce using rule 61 (boolean_expression -> variable .) ]
  ! CS              [ reduce using rule 61 (boolean_expression -> variable .) ]
  ! CLEARSCREEN     [ reduce using rule 61 (boolean_expression -> variable .) ]
  ! HOME            [ reduce using rule 61 (boolean_expression -> variable .) ]
  ! HEADING         [ reduce using rule 61 (boolean_expression -> variable .) ]
  ! TYPEIN          [ reduce using rule 61 (boolean_expression -> variable .) ]
  ! SETXY           [ reduce using rule 61 (boolean_expression -> variable .) ]
  ! XCOR            [ reduce using rule 61 (boolean_expression -> variable .) ]
  ! YCOR            [ reduce using rule 61 (boolean_expression -> variable .) ]
  ! ID              [ reduce using rule 61 (boolean_expression -> variable .) ]
  ! TO              [ reduce using rule 61 (boolean_expression -> variable .) ]
  ! IF              [ reduce using rule 61 (boolean_expression -> variable .) ]
  ! WHILE           [ reduce using rule 61 (boolean_expression -> variable .) ]
  ! WRITE           [ reduce using rule 61 (boolean_expression -> variable .) ]
  ! $end            [ reduce using rule 61 (boolean_expression -> variable .) ]
  ! END             [ reduce using rule 61 (boolean_expression -> variable .) ]
  ! ELSE            [ reduce using rule 61 (boolean_expression -> variable .) ]
  ! COMMA           [ reduce using rule 61 (boolean_expression -> variable .) ]
  ! CLOSE_PAR       [ reduce using rule 61 (boolean_expression -> variable .) ]


state 58

    (62) boolean_expression -> TRUE .

    OR              reduce using rule 62 (boolean_expression -> TRUE .)
    AND             reduce using rule 62 (boolean_expression -> TRUE .)
    GT_OP           reduce using rule 62 (boolean_expression -> TRUE .)
    LT_OP           reduce using rule 62 (boolean_expression -> TRUE .)
    GTE_OP          reduce using rule 62 (boolean_expression -> TRUE .)
    LTE_OP          reduce using rule 62 (boolean_expression -> TRUE .)
    EQ_OP           reduce using rule 62 (boolean_expression -> TRUE .)
    NE_OP           reduce using rule 62 (boolean_expression -> TRUE .)
    FO              reduce using rule 62 (boolean_expression -> TRUE .)
    FORWARD         reduce using rule 62 (boolean_expression -> TRUE .)
    BK              reduce using rule 62 (boolean_expression -> TRUE .)
    BACKWARD        reduce using rule 62 (boolean_expression -> TRUE .)
    RT              reduce using rule 62 (boolean_expression -> TRUE .)
    RIGHT           reduce using rule 62 (boolean_expression -> TRUE .)
    LT              reduce using rule 62 (boolean_expression -> TRUE .)
    LEFT            reduce using rule 62 (boolean_expression -> TRUE .)
    PD              reduce using rule 62 (boolean_expression -> TRUE .)
    PENDOWN         reduce using rule 62 (boolean_expression -> TRUE .)
    PU              reduce using rule 62 (boolean_expression -> TRUE .)
    PENUP           reduce using rule 62 (boolean_expression -> TRUE .)
    WC              reduce using rule 62 (boolean_expression -> TRUE .)
    WIPECLEAN       reduce using rule 62 (boolean_expression -> TRUE .)
    CS              reduce using rule 62 (boolean_expression -> TRUE .)
    CLEARSCREEN     reduce using rule 62 (boolean_expression -> TRUE .)
    HOME            reduce using rule 62 (boolean_expression -> TRUE .)
    HEADING         reduce using rule 62 (boolean_expression -> TRUE .)
    TYPEIN          reduce using rule 62 (boolean_expression -> TRUE .)
    SETXY           reduce using rule 62 (boolean_expression -> TRUE .)
    XCOR            reduce using rule 62 (boolean_expression -> TRUE .)
    YCOR            reduce using rule 62 (boolean_expression -> TRUE .)
    ID              reduce using rule 62 (boolean_expression -> TRUE .)
    TO              reduce using rule 62 (boolean_expression -> TRUE .)
    IF              reduce using rule 62 (boolean_expression -> TRUE .)
    WHILE           reduce using rule 62 (boolean_expression -> TRUE .)
    WRITE           reduce using rule 62 (boolean_expression -> TRUE .)
    $end            reduce using rule 62 (boolean_expression -> TRUE .)
    END             reduce using rule 62 (boolean_expression -> TRUE .)
    ELSE            reduce using rule 62 (boolean_expression -> TRUE .)
    COMMA           reduce using rule 62 (boolean_expression -> TRUE .)
    CLOSE_PAR       reduce using rule 62 (boolean_expression -> TRUE .)


state 59

    (63) boolean_expression -> FALSE .

    OR              reduce using rule 63 (boolean_expression -> FALSE .)
    AND             reduce using rule 63 (boolean_expression -> FALSE .)
    GT_OP           reduce using rule 63 (boolean_expression -> FALSE .)
    LT_OP           reduce using rule 63 (boolean_expression -> FALSE .)
    GTE_OP          reduce using rule 63 (boolean_expression -> FALSE .)
    LTE_OP          reduce using rule 63 (boolean_expression -> FALSE .)
    EQ_OP           reduce using rule 63 (boolean_expression -> FALSE .)
    NE_OP           reduce using rule 63 (boolean_expression -> FALSE .)
    FO              reduce using rule 63 (boolean_expression -> FALSE .)
    FORWARD         reduce using rule 63 (boolean_expression -> FALSE .)
    BK              reduce using rule 63 (boolean_expression -> FALSE .)
    BACKWARD        reduce using rule 63 (boolean_expression -> FALSE .)
    RT              reduce using rule 63 (boolean_expression -> FALSE .)
    RIGHT           reduce using rule 63 (boolean_expression -> FALSE .)
    LT              reduce using rule 63 (boolean_expression -> FALSE .)
    LEFT            reduce using rule 63 (boolean_expression -> FALSE .)
    PD              reduce using rule 63 (boolean_expression -> FALSE .)
    PENDOWN         reduce using rule 63 (boolean_expression -> FALSE .)
    PU              reduce using rule 63 (boolean_expression -> FALSE .)
    PENUP           reduce using rule 63 (boolean_expression -> FALSE .)
    WC              reduce using rule 63 (boolean_expression -> FALSE .)
    WIPECLEAN       reduce using rule 63 (boolean_expression -> FALSE .)
    CS              reduce using rule 63 (boolean_expression -> FALSE .)
    CLEARSCREEN     reduce using rule 63 (boolean_expression -> FALSE .)
    HOME            reduce using rule 63 (boolean_expression -> FALSE .)
    HEADING         reduce using rule 63 (boolean_expression -> FALSE .)
    TYPEIN          reduce using rule 63 (boolean_expression -> FALSE .)
    SETXY           reduce using rule 63 (boolean_expression -> FALSE .)
    XCOR            reduce using rule 63 (boolean_expression -> FALSE .)
    YCOR            reduce using rule 63 (boolean_expression -> FALSE .)
    ID              reduce using rule 63 (boolean_expression -> FALSE .)
    TO              reduce using rule 63 (boolean_expression -> FALSE .)
    IF              reduce using rule 63 (boolean_expression -> FALSE .)
    WHILE           reduce using rule 63 (boolean_expression -> FALSE .)
    WRITE           reduce using rule 63 (boolean_expression -> FALSE .)
    $end            reduce using rule 63 (boolean_expression -> FALSE .)
    END             reduce using rule 63 (boolean_expression -> FALSE .)
    ELSE            reduce using rule 63 (boolean_expression -> FALSE .)
    COMMA           reduce using rule 63 (boolean_expression -> FALSE .)
    CLOSE_PAR       reduce using rule 63 (boolean_expression -> FALSE .)


state 60

    (76) string -> STRING .

    GT_OP           reduce using rule 76 (string -> STRING .)
    LT_OP           reduce using rule 76 (string -> STRING .)
    GTE_OP          reduce using rule 76 (string -> STRING .)
    LTE_OP          reduce using rule 76 (string -> STRING .)
    EQ_OP           reduce using rule 76 (string -> STRING .)
    NE_OP           reduce using rule 76 (string -> STRING .)
    FO              reduce using rule 76 (string -> STRING .)
    FORWARD         reduce using rule 76 (string -> STRING .)
    BK              reduce using rule 76 (string -> STRING .)
    BACKWARD        reduce using rule 76 (string -> STRING .)
    RT              reduce using rule 76 (string -> STRING .)
    RIGHT           reduce using rule 76 (string -> STRING .)
    LT              reduce using rule 76 (string -> STRING .)
    LEFT            reduce using rule 76 (string -> STRING .)
    PD              reduce using rule 76 (string -> STRING .)
    PENDOWN         reduce using rule 76 (string -> STRING .)
    PU              reduce using rule 76 (string -> STRING .)
    PENUP           reduce using rule 76 (string -> STRING .)
    WC              reduce using rule 76 (string -> STRING .)
    WIPECLEAN       reduce using rule 76 (string -> STRING .)
    CS              reduce using rule 76 (string -> STRING .)
    CLEARSCREEN     reduce using rule 76 (string -> STRING .)
    HOME            reduce using rule 76 (string -> STRING .)
    HEADING         reduce using rule 76 (string -> STRING .)
    TYPEIN          reduce using rule 76 (string -> STRING .)
    SETXY           reduce using rule 76 (string -> STRING .)
    XCOR            reduce using rule 76 (string -> STRING .)
    YCOR            reduce using rule 76 (string -> STRING .)
    ID              reduce using rule 76 (string -> STRING .)
    TO              reduce using rule 76 (string -> STRING .)
    IF              reduce using rule 76 (string -> STRING .)
    WHILE           reduce using rule 76 (string -> STRING .)
    WRITE           reduce using rule 76 (string -> STRING .)
    $end            reduce using rule 76 (string -> STRING .)
    END             reduce using rule 76 (string -> STRING .)
    ELSE            reduce using rule 76 (string -> STRING .)
    COMMA           reduce using rule 76 (string -> STRING .)
    CLOSE_PAR       reduce using rule 76 (string -> STRING .)
    OR              reduce using rule 76 (string -> STRING .)
    AND             reduce using rule 76 (string -> STRING .)


state 61

    (17) instruction -> LT number_expression .
    (49) number_expression -> number_expression . ADD number_expression
    (50) number_expression -> number_expression . SUB number_expression
    (51) number_expression -> number_expression . MUL number_expression
    (52) number_expression -> number_expression . DIV number_expression
    (53) number_expression -> number_expression . POW number_expression

    FO              reduce using rule 17 (instruction -> LT number_expression .)
    FORWARD         reduce using rule 17 (instruction -> LT number_expression .)
    BK              reduce using rule 17 (instruction -> LT number_expression .)
    BACKWARD        reduce using rule 17 (instruction -> LT number_expression .)
    RT              reduce using rule 17 (instruction -> LT number_expression .)
    RIGHT           reduce using rule 17 (instruction -> LT number_expression .)
    LT              reduce using rule 17 (instruction -> LT number_expression .)
    LEFT            reduce using rule 17 (instruction -> LT number_expression .)
    PD              reduce using rule 17 (instruction -> LT number_expression .)
    PENDOWN         reduce using rule 17 (instruction -> LT number_expression .)
    PU              reduce using rule 17 (instruction -> LT number_expression .)
    PENUP           reduce using rule 17 (instruction -> LT number_expression .)
    WC              reduce using rule 17 (instruction -> LT number_expression .)
    WIPECLEAN       reduce using rule 17 (instruction -> LT number_expression .)
    CS              reduce using rule 17 (instruction -> LT number_expression .)
    CLEARSCREEN     reduce using rule 17 (instruction -> LT number_expression .)
    HOME            reduce using rule 17 (instruction -> LT number_expression .)
    HEADING         reduce using rule 17 (instruction -> LT number_expression .)
    TYPEIN          reduce using rule 17 (instruction -> LT number_expression .)
    SETXY           reduce using rule 17 (instruction -> LT number_expression .)
    XCOR            reduce using rule 17 (instruction -> LT number_expression .)
    YCOR            reduce using rule 17 (instruction -> LT number_expression .)
    ID              reduce using rule 17 (instruction -> LT number_expression .)
    TO              reduce using rule 17 (instruction -> LT number_expression .)
    IF              reduce using rule 17 (instruction -> LT number_expression .)
    WHILE           reduce using rule 17 (instruction -> LT number_expression .)
    WRITE           reduce using rule 17 (instruction -> LT number_expression .)
    $end            reduce using rule 17 (instruction -> LT number_expression .)
    END             reduce using rule 17 (instruction -> LT number_expression .)
    ELSE            reduce using rule 17 (instruction -> LT number_expression .)
    ADD             shift and go to state 76
    SUB             shift and go to state 77
    MUL             shift and go to state 78
    DIV             shift and go to state 79
    POW             shift and go to state 80


state 62

    (18) instruction -> LEFT number_expression .
    (49) number_expression -> number_expression . ADD number_expression
    (50) number_expression -> number_expression . SUB number_expression
    (51) number_expression -> number_expression . MUL number_expression
    (52) number_expression -> number_expression . DIV number_expression
    (53) number_expression -> number_expression . POW number_expression

    FO              reduce using rule 18 (instruction -> LEFT number_expression .)
    FORWARD         reduce using rule 18 (instruction -> LEFT number_expression .)
    BK              reduce using rule 18 (instruction -> LEFT number_expression .)
    BACKWARD        reduce using rule 18 (instruction -> LEFT number_expression .)
    RT              reduce using rule 18 (instruction -> LEFT number_expression .)
    RIGHT           reduce using rule 18 (instruction -> LEFT number_expression .)
    LT              reduce using rule 18 (instruction -> LEFT number_expression .)
    LEFT            reduce using rule 18 (instruction -> LEFT number_expression .)
    PD              reduce using rule 18 (instruction -> LEFT number_expression .)
    PENDOWN         reduce using rule 18 (instruction -> LEFT number_expression .)
    PU              reduce using rule 18 (instruction -> LEFT number_expression .)
    PENUP           reduce using rule 18 (instruction -> LEFT number_expression .)
    WC              reduce using rule 18 (instruction -> LEFT number_expression .)
    WIPECLEAN       reduce using rule 18 (instruction -> LEFT number_expression .)
    CS              reduce using rule 18 (instruction -> LEFT number_expression .)
    CLEARSCREEN     reduce using rule 18 (instruction -> LEFT number_expression .)
    HOME            reduce using rule 18 (instruction -> LEFT number_expression .)
    HEADING         reduce using rule 18 (instruction -> LEFT number_expression .)
    TYPEIN          reduce using rule 18 (instruction -> LEFT number_expression .)
    SETXY           reduce using rule 18 (instruction -> LEFT number_expression .)
    XCOR            reduce using rule 18 (instruction -> LEFT number_expression .)
    YCOR            reduce using rule 18 (instruction -> LEFT number_expression .)
    ID              reduce using rule 18 (instruction -> LEFT number_expression .)
    TO              reduce using rule 18 (instruction -> LEFT number_expression .)
    IF              reduce using rule 18 (instruction -> LEFT number_expression .)
    WHILE           reduce using rule 18 (instruction -> LEFT number_expression .)
    WRITE           reduce using rule 18 (instruction -> LEFT number_expression .)
    $end            reduce using rule 18 (instruction -> LEFT number_expression .)
    END             reduce using rule 18 (instruction -> LEFT number_expression .)
    ELSE            reduce using rule 18 (instruction -> LEFT number_expression .)
    ADD             shift and go to state 76
    SUB             shift and go to state 77
    MUL             shift and go to state 78
    DIV             shift and go to state 79
    POW             shift and go to state 80


state 63

    (30) instruction -> SETXY number_expression . COMMA number_expression
    (49) number_expression -> number_expression . ADD number_expression
    (50) number_expression -> number_expression . SUB number_expression
    (51) number_expression -> number_expression . MUL number_expression
    (52) number_expression -> number_expression . DIV number_expression
    (53) number_expression -> number_expression . POW number_expression

    COMMA           shift and go to state 96
    ADD             shift and go to state 76
    SUB             shift and go to state 77
    MUL             shift and go to state 78
    DIV             shift and go to state 79
    POW             shift and go to state 80


state 64

    (31) instruction -> XCOR number_expression .
    (49) number_expression -> number_expression . ADD number_expression
    (50) number_expression -> number_expression . SUB number_expression
    (51) number_expression -> number_expression . MUL number_expression
    (52) number_expression -> number_expression . DIV number_expression
    (53) number_expression -> number_expression . POW number_expression

    FO              reduce using rule 31 (instruction -> XCOR number_expression .)
    FORWARD         reduce using rule 31 (instruction -> XCOR number_expression .)
    BK              reduce using rule 31 (instruction -> XCOR number_expression .)
    BACKWARD        reduce using rule 31 (instruction -> XCOR number_expression .)
    RT              reduce using rule 31 (instruction -> XCOR number_expression .)
    RIGHT           reduce using rule 31 (instruction -> XCOR number_expression .)
    LT              reduce using rule 31 (instruction -> XCOR number_expression .)
    LEFT            reduce using rule 31 (instruction -> XCOR number_expression .)
    PD              reduce using rule 31 (instruction -> XCOR number_expression .)
    PENDOWN         reduce using rule 31 (instruction -> XCOR number_expression .)
    PU              reduce using rule 31 (instruction -> XCOR number_expression .)
    PENUP           reduce using rule 31 (instruction -> XCOR number_expression .)
    WC              reduce using rule 31 (instruction -> XCOR number_expression .)
    WIPECLEAN       reduce using rule 31 (instruction -> XCOR number_expression .)
    CS              reduce using rule 31 (instruction -> XCOR number_expression .)
    CLEARSCREEN     reduce using rule 31 (instruction -> XCOR number_expression .)
    HOME            reduce using rule 31 (instruction -> XCOR number_expression .)
    HEADING         reduce using rule 31 (instruction -> XCOR number_expression .)
    TYPEIN          reduce using rule 31 (instruction -> XCOR number_expression .)
    SETXY           reduce using rule 31 (instruction -> XCOR number_expression .)
    XCOR            reduce using rule 31 (instruction -> XCOR number_expression .)
    YCOR            reduce using rule 31 (instruction -> XCOR number_expression .)
    ID              reduce using rule 31 (instruction -> XCOR number_expression .)
    TO              reduce using rule 31 (instruction -> XCOR number_expression .)
    IF              reduce using rule 31 (instruction -> XCOR number_expression .)
    WHILE           reduce using rule 31 (instruction -> XCOR number_expression .)
    WRITE           reduce using rule 31 (instruction -> XCOR number_expression .)
    $end            reduce using rule 31 (instruction -> XCOR number_expression .)
    END             reduce using rule 31 (instruction -> XCOR number_expression .)
    ELSE            reduce using rule 31 (instruction -> XCOR number_expression .)
    ADD             shift and go to state 76
    SUB             shift and go to state 77
    MUL             shift and go to state 78
    DIV             shift and go to state 79
    POW             shift and go to state 80


state 65

    (32) instruction -> YCOR number_expression .
    (49) number_expression -> number_expression . ADD number_expression
    (50) number_expression -> number_expression . SUB number_expression
    (51) number_expression -> number_expression . MUL number_expression
    (52) number_expression -> number_expression . DIV number_expression
    (53) number_expression -> number_expression . POW number_expression

    FO              reduce using rule 32 (instruction -> YCOR number_expression .)
    FORWARD         reduce using rule 32 (instruction -> YCOR number_expression .)
    BK              reduce using rule 32 (instruction -> YCOR number_expression .)
    BACKWARD        reduce using rule 32 (instruction -> YCOR number_expression .)
    RT              reduce using rule 32 (instruction -> YCOR number_expression .)
    RIGHT           reduce using rule 32 (instruction -> YCOR number_expression .)
    LT              reduce using rule 32 (instruction -> YCOR number_expression .)
    LEFT            reduce using rule 32 (instruction -> YCOR number_expression .)
    PD              reduce using rule 32 (instruction -> YCOR number_expression .)
    PENDOWN         reduce using rule 32 (instruction -> YCOR number_expression .)
    PU              reduce using rule 32 (instruction -> YCOR number_expression .)
    PENUP           reduce using rule 32 (instruction -> YCOR number_expression .)
    WC              reduce using rule 32 (instruction -> YCOR number_expression .)
    WIPECLEAN       reduce using rule 32 (instruction -> YCOR number_expression .)
    CS              reduce using rule 32 (instruction -> YCOR number_expression .)
    CLEARSCREEN     reduce using rule 32 (instruction -> YCOR number_expression .)
    HOME            reduce using rule 32 (instruction -> YCOR number_expression .)
    HEADING         reduce using rule 32 (instruction -> YCOR number_expression .)
    TYPEIN          reduce using rule 32 (instruction -> YCOR number_expression .)
    SETXY           reduce using rule 32 (instruction -> YCOR number_expression .)
    XCOR            reduce using rule 32 (instruction -> YCOR number_expression .)
    YCOR            reduce using rule 32 (instruction -> YCOR number_expression .)
    ID              reduce using rule 32 (instruction -> YCOR number_expression .)
    TO              reduce using rule 32 (instruction -> YCOR number_expression .)
    IF              reduce using rule 32 (instruction -> YCOR number_expression .)
    WHILE           reduce using rule 32 (instruction -> YCOR number_expression .)
    WRITE           reduce using rule 32 (instruction -> YCOR number_expression .)
    $end            reduce using rule 32 (instruction -> YCOR number_expression .)
    END             reduce using rule 32 (instruction -> YCOR number_expression .)
    ELSE            reduce using rule 32 (instruction -> YCOR number_expression .)
    ADD             shift and go to state 76
    SUB             shift and go to state 77
    MUL             shift and go to state 78
    DIV             shift and go to state 79
    POW             shift and go to state 80


state 66

    (33) variable_declaration -> ID ASSIGN . expression
    (44) expression -> . OPEN_PAR expression CLOSE_PAR
    (45) expression -> . boolean_expression
    (46) expression -> . number_expression
    (47) expression -> . RANDOM
    (48) expression -> . string
    (57) boolean_expression -> . relational_operation
    (58) boolean_expression -> . boolean_expression OR boolean_expression
    (59) boolean_expression -> . boolean_expression AND boolean_expression
    (60) boolean_expression -> . NOT boolean_expression
    (61) boolean_expression -> . variable
    (62) boolean_expression -> . TRUE
    (63) boolean_expression -> . FALSE
    (49) number_expression -> . number_expression ADD number_expression
    (50) number_expression -> . number_expression SUB number_expression
    (51) number_expression -> . number_expression MUL number_expression
    (52) number_expression -> . number_expression DIV number_expression
    (53) number_expression -> . number_expression POW number_expression
    (54) number_expression -> . OPEN_PAR number_expression CLOSE_PAR
    (55) number_expression -> . variable
    (56) number_expression -> . NUM
    (76) string -> . STRING
    (64) relational_operation -> . expression GT_OP expression
    (65) relational_operation -> . expression LT_OP expression
    (66) relational_operation -> . expression GTE_OP expression
    (67) relational_operation -> . expression LTE_OP expression
    (68) relational_operation -> . expression EQ_OP expression
    (69) relational_operation -> . expression NE_OP expression
    (34) variable -> . COLON ID

    OPEN_PAR        shift and go to state 50
    RANDOM          shift and go to state 53
    NOT             shift and go to state 56
    TRUE            shift and go to state 58
    FALSE           shift and go to state 59
    NUM             shift and go to state 43
    STRING          shift and go to state 60
    COLON           shift and go to state 44

    expression                     shift and go to state 97
    boolean_expression             shift and go to state 51
    number_expression              shift and go to state 52
    string                         shift and go to state 54
    relational_operation           shift and go to state 55
    variable                       shift and go to state 57

state 67

    (41) expression_list -> expression .
    (64) relational_operation -> expression . GT_OP expression
    (65) relational_operation -> expression . LT_OP expression
    (66) relational_operation -> expression . GTE_OP expression
    (67) relational_operation -> expression . LTE_OP expression
    (68) relational_operation -> expression . EQ_OP expression
    (69) relational_operation -> expression . NE_OP expression

    COMMA           reduce using rule 41 (expression_list -> expression .)
    FO              reduce using rule 41 (expression_list -> expression .)
    FORWARD         reduce using rule 41 (expression_list -> expression .)
    BK              reduce using rule 41 (expression_list -> expression .)
    BACKWARD        reduce using rule 41 (expression_list -> expression .)
    RT              reduce using rule 41 (expression_list -> expression .)
    RIGHT           reduce using rule 41 (expression_list -> expression .)
    LT              reduce using rule 41 (expression_list -> expression .)
    LEFT            reduce using rule 41 (expression_list -> expression .)
    PD              reduce using rule 41 (expression_list -> expression .)
    PENDOWN         reduce using rule 41 (expression_list -> expression .)
    PU              reduce using rule 41 (expression_list -> expression .)
    PENUP           reduce using rule 41 (expression_list -> expression .)
    WC              reduce using rule 41 (expression_list -> expression .)
    WIPECLEAN       reduce using rule 41 (expression_list -> expression .)
    CS              reduce using rule 41 (expression_list -> expression .)
    CLEARSCREEN     reduce using rule 41 (expression_list -> expression .)
    HOME            reduce using rule 41 (expression_list -> expression .)
    HEADING         reduce using rule 41 (expression_list -> expression .)
    TYPEIN          reduce using rule 41 (expression_list -> expression .)
    SETXY           reduce using rule 41 (expression_list -> expression .)
    XCOR            reduce using rule 41 (expression_list -> expression .)
    YCOR            reduce using rule 41 (expression_list -> expression .)
    ID              reduce using rule 41 (expression_list -> expression .)
    TO              reduce using rule 41 (expression_list -> expression .)
    IF              reduce using rule 41 (expression_list -> expression .)
    WHILE           reduce using rule 41 (expression_list -> expression .)
    WRITE           reduce using rule 41 (expression_list -> expression .)
    $end            reduce using rule 41 (expression_list -> expression .)
    END             reduce using rule 41 (expression_list -> expression .)
    ELSE            reduce using rule 41 (expression_list -> expression .)
    GT_OP           shift and go to state 83
    LT_OP           shift and go to state 84
    GTE_OP          shift and go to state 85
    LTE_OP          shift and go to state 86
    EQ_OP           shift and go to state 87
    NE_OP           shift and go to state 88


state 68

    (43) procedure_call -> ID expression_list .
    (40) expression_list -> expression_list . COMMA expression

    FO              reduce using rule 43 (procedure_call -> ID expression_list .)
    FORWARD         reduce using rule 43 (procedure_call -> ID expression_list .)
    BK              reduce using rule 43 (procedure_call -> ID expression_list .)
    BACKWARD        reduce using rule 43 (procedure_call -> ID expression_list .)
    RT              reduce using rule 43 (procedure_call -> ID expression_list .)
    RIGHT           reduce using rule 43 (procedure_call -> ID expression_list .)
    LT              reduce using rule 43 (procedure_call -> ID expression_list .)
    LEFT            reduce using rule 43 (procedure_call -> ID expression_list .)
    PD              reduce using rule 43 (procedure_call -> ID expression_list .)
    PENDOWN         reduce using rule 43 (procedure_call -> ID expression_list .)
    PU              reduce using rule 43 (procedure_call -> ID expression_list .)
    PENUP           reduce using rule 43 (procedure_call -> ID expression_list .)
    WC              reduce using rule 43 (procedure_call -> ID expression_list .)
    WIPECLEAN       reduce using rule 43 (procedure_call -> ID expression_list .)
    CS              reduce using rule 43 (procedure_call -> ID expression_list .)
    CLEARSCREEN     reduce using rule 43 (procedure_call -> ID expression_list .)
    HOME            reduce using rule 43 (procedure_call -> ID expression_list .)
    HEADING         reduce using rule 43 (procedure_call -> ID expression_list .)
    TYPEIN          reduce using rule 43 (procedure_call -> ID expression_list .)
    SETXY           reduce using rule 43 (procedure_call -> ID expression_list .)
    XCOR            reduce using rule 43 (procedure_call -> ID expression_list .)
    YCOR            reduce using rule 43 (procedure_call -> ID expression_list .)
    ID              reduce using rule 43 (procedure_call -> ID expression_list .)
    TO              reduce using rule 43 (procedure_call -> ID expression_list .)
    IF              reduce using rule 43 (procedure_call -> ID expression_list .)
    WHILE           reduce using rule 43 (procedure_call -> ID expression_list .)
    WRITE           reduce using rule 43 (procedure_call -> ID expression_list .)
    $end            reduce using rule 43 (procedure_call -> ID expression_list .)
    END             reduce using rule 43 (procedure_call -> ID expression_list .)
    ELSE            reduce using rule 43 (procedure_call -> ID expression_list .)
    COMMA           shift and go to state 98


state 69

    (42) expression_list -> empty .

    COMMA           reduce using rule 42 (expression_list -> empty .)
    FO              reduce using rule 42 (expression_list -> empty .)
    FORWARD         reduce using rule 42 (expression_list -> empty .)
    BK              reduce using rule 42 (expression_list -> empty .)
    BACKWARD        reduce using rule 42 (expression_list -> empty .)
    RT              reduce using rule 42 (expression_list -> empty .)
    RIGHT           reduce using rule 42 (expression_list -> empty .)
    LT              reduce using rule 42 (expression_list -> empty .)
    LEFT            reduce using rule 42 (expression_list -> empty .)
    PD              reduce using rule 42 (expression_list -> empty .)
    PENDOWN         reduce using rule 42 (expression_list -> empty .)
    PU              reduce using rule 42 (expression_list -> empty .)
    PENUP           reduce using rule 42 (expression_list -> empty .)
    WC              reduce using rule 42 (expression_list -> empty .)
    WIPECLEAN       reduce using rule 42 (expression_list -> empty .)
    CS              reduce using rule 42 (expression_list -> empty .)
    CLEARSCREEN     reduce using rule 42 (expression_list -> empty .)
    HOME            reduce using rule 42 (expression_list -> empty .)
    HEADING         reduce using rule 42 (expression_list -> empty .)
    TYPEIN          reduce using rule 42 (expression_list -> empty .)
    SETXY           reduce using rule 42 (expression_list -> empty .)
    XCOR            reduce using rule 42 (expression_list -> empty .)
    YCOR            reduce using rule 42 (expression_list -> empty .)
    ID              reduce using rule 42 (expression_list -> empty .)
    TO              reduce using rule 42 (expression_list -> empty .)
    IF              reduce using rule 42 (expression_list -> empty .)
    WHILE           reduce using rule 42 (expression_list -> empty .)
    WRITE           reduce using rule 42 (expression_list -> empty .)
    $end            reduce using rule 42 (expression_list -> empty .)
    END             reduce using rule 42 (expression_list -> empty .)
    ELSE            reduce using rule 42 (expression_list -> empty .)


state 70

    (39) procedure_declaration -> TO ID . argument_list other_statement END
    (35) argument_list -> . argument_list COMMA argument
    (36) argument_list -> . argument
    (37) argument -> . expression
    (38) argument -> . empty
    (44) expression -> . OPEN_PAR expression CLOSE_PAR
    (45) expression -> . boolean_expression
    (46) expression -> . number_expression
    (47) expression -> . RANDOM
    (48) expression -> . string
    (75) empty -> .
    (57) boolean_expression -> . relational_operation
    (58) boolean_expression -> . boolean_expression OR boolean_expression
    (59) boolean_expression -> . boolean_expression AND boolean_expression
    (60) boolean_expression -> . NOT boolean_expression
    (61) boolean_expression -> . variable
    (62) boolean_expression -> . TRUE
    (63) boolean_expression -> . FALSE
    (49) number_expression -> . number_expression ADD number_expression
    (50) number_expression -> . number_expression SUB number_expression
    (51) number_expression -> . number_expression MUL number_expression
    (52) number_expression -> . number_expression DIV number_expression
    (53) number_expression -> . number_expression POW number_expression
    (54) number_expression -> . OPEN_PAR number_expression CLOSE_PAR
    (55) number_expression -> . variable
    (56) number_expression -> . NUM
    (76) string -> . STRING
    (64) relational_operation -> . expression GT_OP expression
    (65) relational_operation -> . expression LT_OP expression
    (66) relational_operation -> . expression GTE_OP expression
    (67) relational_operation -> . expression LTE_OP expression
    (68) relational_operation -> . expression EQ_OP expression
    (69) relational_operation -> . expression NE_OP expression
    (34) variable -> . COLON ID

    OPEN_PAR        shift and go to state 50
    RANDOM          shift and go to state 53
    COMMA           reduce using rule 75 (empty -> .)
    FO              reduce using rule 75 (empty -> .)
    FORWARD         reduce using rule 75 (empty -> .)
    BK              reduce using rule 75 (empty -> .)
    BACKWARD        reduce using rule 75 (empty -> .)
    RT              reduce using rule 75 (empty -> .)
    RIGHT           reduce using rule 75 (empty -> .)
    LT              reduce using rule 75 (empty -> .)
    LEFT            reduce using rule 75 (empty -> .)
    PD              reduce using rule 75 (empty -> .)
    PENDOWN         reduce using rule 75 (empty -> .)
    PU              reduce using rule 75 (empty -> .)
    PENUP           reduce using rule 75 (empty -> .)
    WC              reduce using rule 75 (empty -> .)
    WIPECLEAN       reduce using rule 75 (empty -> .)
    CS              reduce using rule 75 (empty -> .)
    CLEARSCREEN     reduce using rule 75 (empty -> .)
    HOME            reduce using rule 75 (empty -> .)
    HEADING         reduce using rule 75 (empty -> .)
    TYPEIN          reduce using rule 75 (empty -> .)
    SETXY           reduce using rule 75 (empty -> .)
    XCOR            reduce using rule 75 (empty -> .)
    YCOR            reduce using rule 75 (empty -> .)
    ID              reduce using rule 75 (empty -> .)
    TO              reduce using rule 75 (empty -> .)
    IF              reduce using rule 75 (empty -> .)
    WHILE           reduce using rule 75 (empty -> .)
    WRITE           reduce using rule 75 (empty -> .)
    END             reduce using rule 75 (empty -> .)
    NOT             shift and go to state 56
    TRUE            shift and go to state 58
    FALSE           shift and go to state 59
    NUM             shift and go to state 43
    STRING          shift and go to state 60
    COLON           shift and go to state 44

    argument_list                  shift and go to state 99
    argument                       shift and go to state 100
    expression                     shift and go to state 101
    empty                          shift and go to state 102
    boolean_expression             shift and go to state 51
    number_expression              shift and go to state 52
    string                         shift and go to state 54
    relational_operation           shift and go to state 55
    variable                       shift and go to state 57

state 71

    (70) if_then_else -> IF OPEN_PAR . boolean_expression CLOSE_PAR THEN other_statement END
    (71) if_then_else -> IF OPEN_PAR . boolean_expression CLOSE_PAR THEN other_statement ELSE other_statement END
    (57) boolean_expression -> . relational_operation
    (58) boolean_expression -> . boolean_expression OR boolean_expression
    (59) boolean_expression -> . boolean_expression AND boolean_expression
    (60) boolean_expression -> . NOT boolean_expression
    (61) boolean_expression -> . variable
    (62) boolean_expression -> . TRUE
    (63) boolean_expression -> . FALSE
    (64) relational_operation -> . expression GT_OP expression
    (65) relational_operation -> . expression LT_OP expression
    (66) relational_operation -> . expression GTE_OP expression
    (67) relational_operation -> . expression LTE_OP expression
    (68) relational_operation -> . expression EQ_OP expression
    (69) relational_operation -> . expression NE_OP expression
    (34) variable -> . COLON ID
    (44) expression -> . OPEN_PAR expression CLOSE_PAR
    (45) expression -> . boolean_expression
    (46) expression -> . number_expression
    (47) expression -> . RANDOM
    (48) expression -> . string
    (49) number_expression -> . number_expression ADD number_expression
    (50) number_expression -> . number_expression SUB number_expression
    (51) number_expression -> . number_expression MUL number_expression
    (52) number_expression -> . number_expression DIV number_expression
    (53) number_expression -> . number_expression POW number_expression
    (54) number_expression -> . OPEN_PAR number_expression CLOSE_PAR
    (55) number_expression -> . variable
    (56) number_expression -> . NUM
    (76) string -> . STRING

    NOT             shift and go to state 56
    TRUE            shift and go to state 58
    FALSE           shift and go to state 59
    COLON           shift and go to state 44
    OPEN_PAR        shift and go to state 50
    RANDOM          shift and go to state 53
    NUM             shift and go to state 43
    STRING          shift and go to state 60

    boolean_expression             shift and go to state 103
    relational_operation           shift and go to state 55
    variable                       shift and go to state 57
    expression                     shift and go to state 95
    number_expression              shift and go to state 52
    string                         shift and go to state 54

state 72

    (72) while_loop -> WHILE OPEN_PAR . boolean_expression CLOSE_PAR other_statement END
    (57) boolean_expression -> . relational_operation
    (58) boolean_expression -> . boolean_expression OR boolean_expression
    (59) boolean_expression -> . boolean_expression AND boolean_expression
    (60) boolean_expression -> . NOT boolean_expression
    (61) boolean_expression -> . variable
    (62) boolean_expression -> . TRUE
    (63) boolean_expression -> . FALSE
    (64) relational_operation -> . expression GT_OP expression
    (65) relational_operation -> . expression LT_OP expression
    (66) relational_operation -> . expression GTE_OP expression
    (67) relational_operation -> . expression LTE_OP expression
    (68) relational_operation -> . expression EQ_OP expression
    (69) relational_operation -> . expression NE_OP expression
    (34) variable -> . COLON ID
    (44) expression -> . OPEN_PAR expression CLOSE_PAR
    (45) expression -> . boolean_expression
    (46) expression -> . number_expression
    (47) expression -> . RANDOM
    (48) expression -> . string
    (49) number_expression -> . number_expression ADD number_expression
    (50) number_expression -> . number_expression SUB number_expression
    (51) number_expression -> . number_expression MUL number_expression
    (52) number_expression -> . number_expression DIV number_expression
    (53) number_expression -> . number_expression POW number_expression
    (54) number_expression -> . OPEN_PAR number_expression CLOSE_PAR
    (55) number_expression -> . variable
    (56) number_expression -> . NUM
    (76) string -> . STRING

    NOT             shift and go to state 56
    TRUE            shift and go to state 58
    FALSE           shift and go to state 59
    COLON           shift and go to state 44
    OPEN_PAR        shift and go to state 50
    RANDOM          shift and go to state 53
    NUM             shift and go to state 43
    STRING          shift and go to state 60

    boolean_expression             shift and go to state 104
    relational_operation           shift and go to state 55
    variable                       shift and go to state 57
    expression                     shift and go to state 95
    number_expression              shift and go to state 52
    string                         shift and go to state 54

state 73

    (73) write -> WRITE expression .
    (64) relational_operation -> expression . GT_OP expression
    (65) relational_operation -> expression . LT_OP expression
    (66) relational_operation -> expression . GTE_OP expression
    (67) relational_operation -> expression . LTE_OP expression
    (68) relational_operation -> expression . EQ_OP expression
    (69) relational_operation -> expression . NE_OP expression

    FO              reduce using rule 73 (write -> WRITE expression .)
    FORWARD         reduce using rule 73 (write -> WRITE expression .)
    BK              reduce using rule 73 (write -> WRITE expression .)
    BACKWARD        reduce using rule 73 (write -> WRITE expression .)
    RT              reduce using rule 73 (write -> WRITE expression .)
    RIGHT           reduce using rule 73 (write -> WRITE expression .)
    LT              reduce using rule 73 (write -> WRITE expression .)
    LEFT            reduce using rule 73 (write -> WRITE expression .)
    PD              reduce using rule 73 (write -> WRITE expression .)
    PENDOWN         reduce using rule 73 (write -> WRITE expression .)
    PU              reduce using rule 73 (write -> WRITE expression .)
    PENUP           reduce using rule 73 (write -> WRITE expression .)
    WC              reduce using rule 73 (write -> WRITE expression .)
    WIPECLEAN       reduce using rule 73 (write -> WRITE expression .)
    CS              reduce using rule 73 (write -> WRITE expression .)
    CLEARSCREEN     reduce using rule 73 (write -> WRITE expression .)
    HOME            reduce using rule 73 (write -> WRITE expression .)
    HEADING         reduce using rule 73 (write -> WRITE expression .)
    TYPEIN          reduce using rule 73 (write -> WRITE expression .)
    SETXY           reduce using rule 73 (write -> WRITE expression .)
    XCOR            reduce using rule 73 (write -> WRITE expression .)
    YCOR            reduce using rule 73 (write -> WRITE expression .)
    ID              reduce using rule 73 (write -> WRITE expression .)
    TO              reduce using rule 73 (write -> WRITE expression .)
    IF              reduce using rule 73 (write -> WRITE expression .)
    WHILE           reduce using rule 73 (write -> WRITE expression .)
    WRITE           reduce using rule 73 (write -> WRITE expression .)
    $end            reduce using rule 73 (write -> WRITE expression .)
    END             reduce using rule 73 (write -> WRITE expression .)
    ELSE            reduce using rule 73 (write -> WRITE expression .)
    GT_OP           shift and go to state 83
    LT_OP           shift and go to state 84
    GTE_OP          shift and go to state 85
    LTE_OP          shift and go to state 86
    EQ_OP           shift and go to state 87
    NE_OP           shift and go to state 88


state 74

    (74) write -> WRITE string .
    (48) expression -> string .

  ! reduce/reduce conflict for FO resolved using rule 48 (expression -> string .)
  ! reduce/reduce conflict for FORWARD resolved using rule 48 (expression -> string .)
  ! reduce/reduce conflict for BK resolved using rule 48 (expression -> string .)
  ! reduce/reduce conflict for BACKWARD resolved using rule 48 (expression -> string .)
  ! reduce/reduce conflict for RT resolved using rule 48 (expression -> string .)
  ! reduce/reduce conflict for RIGHT resolved using rule 48 (expression -> string .)
  ! reduce/reduce conflict for LT resolved using rule 48 (expression -> string .)
  ! reduce/reduce conflict for LEFT resolved using rule 48 (expression -> string .)
  ! reduce/reduce conflict for PD resolved using rule 48 (expression -> string .)
  ! reduce/reduce conflict for PENDOWN resolved using rule 48 (expression -> string .)
  ! reduce/reduce conflict for PU resolved using rule 48 (expression -> string .)
  ! reduce/reduce conflict for PENUP resolved using rule 48 (expression -> string .)
  ! reduce/reduce conflict for WC resolved using rule 48 (expression -> string .)
  ! reduce/reduce conflict for WIPECLEAN resolved using rule 48 (expression -> string .)
  ! reduce/reduce conflict for CS resolved using rule 48 (expression -> string .)
  ! reduce/reduce conflict for CLEARSCREEN resolved using rule 48 (expression -> string .)
  ! reduce/reduce conflict for HOME resolved using rule 48 (expression -> string .)
  ! reduce/reduce conflict for HEADING resolved using rule 48 (expression -> string .)
  ! reduce/reduce conflict for TYPEIN resolved using rule 48 (expression -> string .)
  ! reduce/reduce conflict for SETXY resolved using rule 48 (expression -> string .)
  ! reduce/reduce conflict for XCOR resolved using rule 48 (expression -> string .)
  ! reduce/reduce conflict for YCOR resolved using rule 48 (expression -> string .)
  ! reduce/reduce conflict for ID resolved using rule 48 (expression -> string .)
  ! reduce/reduce conflict for TO resolved using rule 48 (expression -> string .)
  ! reduce/reduce conflict for IF resolved using rule 48 (expression -> string .)
  ! reduce/reduce conflict for WHILE resolved using rule 48 (expression -> string .)
  ! reduce/reduce conflict for WRITE resolved using rule 48 (expression -> string .)
  ! reduce/reduce conflict for $end resolved using rule 48 (expression -> string .)
  ! reduce/reduce conflict for END resolved using rule 48 (expression -> string .)
  ! reduce/reduce conflict for ELSE resolved using rule 48 (expression -> string .)
    GT_OP           reduce using rule 48 (expression -> string .)
    LT_OP           reduce using rule 48 (expression -> string .)
    GTE_OP          reduce using rule 48 (expression -> string .)
    LTE_OP          reduce using rule 48 (expression -> string .)
    EQ_OP           reduce using rule 48 (expression -> string .)
    NE_OP           reduce using rule 48 (expression -> string .)
    FO              reduce using rule 48 (expression -> string .)
    FORWARD         reduce using rule 48 (expression -> string .)
    BK              reduce using rule 48 (expression -> string .)
    BACKWARD        reduce using rule 48 (expression -> string .)
    RT              reduce using rule 48 (expression -> string .)
    RIGHT           reduce using rule 48 (expression -> string .)
    LT              reduce using rule 48 (expression -> string .)
    LEFT            reduce using rule 48 (expression -> string .)
    PD              reduce using rule 48 (expression -> string .)
    PENDOWN         reduce using rule 48 (expression -> string .)
    PU              reduce using rule 48 (expression -> string .)
    PENUP           reduce using rule 48 (expression -> string .)
    WC              reduce using rule 48 (expression -> string .)
    WIPECLEAN       reduce using rule 48 (expression -> string .)
    CS              reduce using rule 48 (expression -> string .)
    CLEARSCREEN     reduce using rule 48 (expression -> string .)
    HOME            reduce using rule 48 (expression -> string .)
    HEADING         reduce using rule 48 (expression -> string .)
    TYPEIN          reduce using rule 48 (expression -> string .)
    SETXY           reduce using rule 48 (expression -> string .)
    XCOR            reduce using rule 48 (expression -> string .)
    YCOR            reduce using rule 48 (expression -> string .)
    ID              reduce using rule 48 (expression -> string .)
    TO              reduce using rule 48 (expression -> string .)
    IF              reduce using rule 48 (expression -> string .)
    WHILE           reduce using rule 48 (expression -> string .)
    WRITE           reduce using rule 48 (expression -> string .)
    $end            reduce using rule 48 (expression -> string .)
    END             reduce using rule 48 (expression -> string .)
    ELSE            reduce using rule 48 (expression -> string .)

  ! FO              [ reduce using rule 74 (write -> WRITE string .) ]
  ! FORWARD         [ reduce using rule 74 (write -> WRITE string .) ]
  ! BK              [ reduce using rule 74 (write -> WRITE string .) ]
  ! BACKWARD        [ reduce using rule 74 (write -> WRITE string .) ]
  ! RT              [ reduce using rule 74 (write -> WRITE string .) ]
  ! RIGHT           [ reduce using rule 74 (write -> WRITE string .) ]
  ! LT              [ reduce using rule 74 (write -> WRITE string .) ]
  ! LEFT            [ reduce using rule 74 (write -> WRITE string .) ]
  ! PD              [ reduce using rule 74 (write -> WRITE string .) ]
  ! PENDOWN         [ reduce using rule 74 (write -> WRITE string .) ]
  ! PU              [ reduce using rule 74 (write -> WRITE string .) ]
  ! PENUP           [ reduce using rule 74 (write -> WRITE string .) ]
  ! WC              [ reduce using rule 74 (write -> WRITE string .) ]
  ! WIPECLEAN       [ reduce using rule 74 (write -> WRITE string .) ]
  ! CS              [ reduce using rule 74 (write -> WRITE string .) ]
  ! CLEARSCREEN     [ reduce using rule 74 (write -> WRITE string .) ]
  ! HOME            [ reduce using rule 74 (write -> WRITE string .) ]
  ! HEADING         [ reduce using rule 74 (write -> WRITE string .) ]
  ! TYPEIN          [ reduce using rule 74 (write -> WRITE string .) ]
  ! SETXY           [ reduce using rule 74 (write -> WRITE string .) ]
  ! XCOR            [ reduce using rule 74 (write -> WRITE string .) ]
  ! YCOR            [ reduce using rule 74 (write -> WRITE string .) ]
  ! ID              [ reduce using rule 74 (write -> WRITE string .) ]
  ! TO              [ reduce using rule 74 (write -> WRITE string .) ]
  ! IF              [ reduce using rule 74 (write -> WRITE string .) ]
  ! WHILE           [ reduce using rule 74 (write -> WRITE string .) ]
  ! WRITE           [ reduce using rule 74 (write -> WRITE string .) ]
  ! $end            [ reduce using rule 74 (write -> WRITE string .) ]
  ! END             [ reduce using rule 74 (write -> WRITE string .) ]
  ! ELSE            [ reduce using rule 74 (write -> WRITE string .) ]


state 75

    (2) other_statement -> statement other_statement .

    $end            reduce using rule 2 (other_statement -> statement other_statement .)
    END             reduce using rule 2 (other_statement -> statement other_statement .)
    ELSE            reduce using rule 2 (other_statement -> statement other_statement .)


state 76

    (49) number_expression -> number_expression ADD . number_expression
    (49) number_expression -> . number_expression ADD number_expression
    (50) number_expression -> . number_expression SUB number_expression
    (51) number_expression -> . number_expression MUL number_expression
    (52) number_expression -> . number_expression DIV number_expression
    (53) number_expression -> . number_expression POW number_expression
    (54) number_expression -> . OPEN_PAR number_expression CLOSE_PAR
    (55) number_expression -> . variable
    (56) number_expression -> . NUM
    (34) variable -> . COLON ID

    OPEN_PAR        shift and go to state 41
    NUM             shift and go to state 43
    COLON           shift and go to state 44

    number_expression              shift and go to state 105
    variable                       shift and go to state 42

state 77

    (50) number_expression -> number_expression SUB . number_expression
    (49) number_expression -> . number_expression ADD number_expression
    (50) number_expression -> . number_expression SUB number_expression
    (51) number_expression -> . number_expression MUL number_expression
    (52) number_expression -> . number_expression DIV number_expression
    (53) number_expression -> . number_expression POW number_expression
    (54) number_expression -> . OPEN_PAR number_expression CLOSE_PAR
    (55) number_expression -> . variable
    (56) number_expression -> . NUM
    (34) variable -> . COLON ID

    OPEN_PAR        shift and go to state 41
    NUM             shift and go to state 43
    COLON           shift and go to state 44

    number_expression              shift and go to state 106
    variable                       shift and go to state 42

state 78

    (51) number_expression -> number_expression MUL . number_expression
    (49) number_expression -> . number_expression ADD number_expression
    (50) number_expression -> . number_expression SUB number_expression
    (51) number_expression -> . number_expression MUL number_expression
    (52) number_expression -> . number_expression DIV number_expression
    (53) number_expression -> . number_expression POW number_expression
    (54) number_expression -> . OPEN_PAR number_expression CLOSE_PAR
    (55) number_expression -> . variable
    (56) number_expression -> . NUM
    (34) variable -> . COLON ID

    OPEN_PAR        shift and go to state 41
    NUM             shift and go to state 43
    COLON           shift and go to state 44

    number_expression              shift and go to state 107
    variable                       shift and go to state 42

state 79

    (52) number_expression -> number_expression DIV . number_expression
    (49) number_expression -> . number_expression ADD number_expression
    (50) number_expression -> . number_expression SUB number_expression
    (51) number_expression -> . number_expression MUL number_expression
    (52) number_expression -> . number_expression DIV number_expression
    (53) number_expression -> . number_expression POW number_expression
    (54) number_expression -> . OPEN_PAR number_expression CLOSE_PAR
    (55) number_expression -> . variable
    (56) number_expression -> . NUM
    (34) variable -> . COLON ID

    OPEN_PAR        shift and go to state 41
    NUM             shift and go to state 43
    COLON           shift and go to state 44

    number_expression              shift and go to state 108
    variable                       shift and go to state 42

state 80

    (53) number_expression -> number_expression POW . number_expression
    (49) number_expression -> . number_expression ADD number_expression
    (50) number_expression -> . number_expression SUB number_expression
    (51) number_expression -> . number_expression MUL number_expression
    (52) number_expression -> . number_expression DIV number_expression
    (53) number_expression -> . number_expression POW number_expression
    (54) number_expression -> . OPEN_PAR number_expression CLOSE_PAR
    (55) number_expression -> . variable
    (56) number_expression -> . NUM
    (34) variable -> . COLON ID

    OPEN_PAR        shift and go to state 41
    NUM             shift and go to state 43
    COLON           shift and go to state 44

    number_expression              shift and go to state 109
    variable                       shift and go to state 42

state 81

    (54) number_expression -> OPEN_PAR number_expression . CLOSE_PAR
    (49) number_expression -> number_expression . ADD number_expression
    (50) number_expression -> number_expression . SUB number_expression
    (51) number_expression -> number_expression . MUL number_expression
    (52) number_expression -> number_expression . DIV number_expression
    (53) number_expression -> number_expression . POW number_expression

    CLOSE_PAR       shift and go to state 110
    ADD             shift and go to state 76
    SUB             shift and go to state 77
    MUL             shift and go to state 78
    DIV             shift and go to state 79
    POW             shift and go to state 80


state 82

    (34) variable -> COLON ID .

    ADD             reduce using rule 34 (variable -> COLON ID .)
    SUB             reduce using rule 34 (variable -> COLON ID .)
    MUL             reduce using rule 34 (variable -> COLON ID .)
    DIV             reduce using rule 34 (variable -> COLON ID .)
    POW             reduce using rule 34 (variable -> COLON ID .)
    FO              reduce using rule 34 (variable -> COLON ID .)
    FORWARD         reduce using rule 34 (variable -> COLON ID .)
    BK              reduce using rule 34 (variable -> COLON ID .)
    BACKWARD        reduce using rule 34 (variable -> COLON ID .)
    RT              reduce using rule 34 (variable -> COLON ID .)
    RIGHT           reduce using rule 34 (variable -> COLON ID .)
    LT              reduce using rule 34 (variable -> COLON ID .)
    LEFT            reduce using rule 34 (variable -> COLON ID .)
    PD              reduce using rule 34 (variable -> COLON ID .)
    PENDOWN         reduce using rule 34 (variable -> COLON ID .)
    PU              reduce using rule 34 (variable -> COLON ID .)
    PENUP           reduce using rule 34 (variable -> COLON ID .)
    WC              reduce using rule 34 (variable -> COLON ID .)
    WIPECLEAN       reduce using rule 34 (variable -> COLON ID .)
    CS              reduce using rule 34 (variable -> COLON ID .)
    CLEARSCREEN     reduce using rule 34 (variable -> COLON ID .)
    HOME            reduce using rule 34 (variable -> COLON ID .)
    HEADING         reduce using rule 34 (variable -> COLON ID .)
    TYPEIN          reduce using rule 34 (variable -> COLON ID .)
    SETXY           reduce using rule 34 (variable -> COLON ID .)
    XCOR            reduce using rule 34 (variable -> COLON ID .)
    YCOR            reduce using rule 34 (variable -> COLON ID .)
    ID              reduce using rule 34 (variable -> COLON ID .)
    TO              reduce using rule 34 (variable -> COLON ID .)
    IF              reduce using rule 34 (variable -> COLON ID .)
    WHILE           reduce using rule 34 (variable -> COLON ID .)
    WRITE           reduce using rule 34 (variable -> COLON ID .)
    $end            reduce using rule 34 (variable -> COLON ID .)
    END             reduce using rule 34 (variable -> COLON ID .)
    ELSE            reduce using rule 34 (variable -> COLON ID .)
    OR              reduce using rule 34 (variable -> COLON ID .)
    AND             reduce using rule 34 (variable -> COLON ID .)
    GT_OP           reduce using rule 34 (variable -> COLON ID .)
    LT_OP           reduce using rule 34 (variable -> COLON ID .)
    GTE_OP          reduce using rule 34 (variable -> COLON ID .)
    LTE_OP          reduce using rule 34 (variable -> COLON ID .)
    EQ_OP           reduce using rule 34 (variable -> COLON ID .)
    NE_OP           reduce using rule 34 (variable -> COLON ID .)
    COMMA           reduce using rule 34 (variable -> COLON ID .)
    CLOSE_PAR       reduce using rule 34 (variable -> COLON ID .)


state 83

    (64) relational_operation -> expression GT_OP . expression
    (44) expression -> . OPEN_PAR expression CLOSE_PAR
    (45) expression -> . boolean_expression
    (46) expression -> . number_expression
    (47) expression -> . RANDOM
    (48) expression -> . string
    (57) boolean_expression -> . relational_operation
    (58) boolean_expression -> . boolean_expression OR boolean_expression
    (59) boolean_expression -> . boolean_expression AND boolean_expression
    (60) boolean_expression -> . NOT boolean_expression
    (61) boolean_expression -> . variable
    (62) boolean_expression -> . TRUE
    (63) boolean_expression -> . FALSE
    (49) number_expression -> . number_expression ADD number_expression
    (50) number_expression -> . number_expression SUB number_expression
    (51) number_expression -> . number_expression MUL number_expression
    (52) number_expression -> . number_expression DIV number_expression
    (53) number_expression -> . number_expression POW number_expression
    (54) number_expression -> . OPEN_PAR number_expression CLOSE_PAR
    (55) number_expression -> . variable
    (56) number_expression -> . NUM
    (76) string -> . STRING
    (64) relational_operation -> . expression GT_OP expression
    (65) relational_operation -> . expression LT_OP expression
    (66) relational_operation -> . expression GTE_OP expression
    (67) relational_operation -> . expression LTE_OP expression
    (68) relational_operation -> . expression EQ_OP expression
    (69) relational_operation -> . expression NE_OP expression
    (34) variable -> . COLON ID

    OPEN_PAR        shift and go to state 50
    RANDOM          shift and go to state 53
    NOT             shift and go to state 56
    TRUE            shift and go to state 58
    FALSE           shift and go to state 59
    NUM             shift and go to state 43
    STRING          shift and go to state 60
    COLON           shift and go to state 44

    expression                     shift and go to state 111
    boolean_expression             shift and go to state 51
    number_expression              shift and go to state 52
    string                         shift and go to state 54
    relational_operation           shift and go to state 55
    variable                       shift and go to state 57

state 84

    (65) relational_operation -> expression LT_OP . expression
    (44) expression -> . OPEN_PAR expression CLOSE_PAR
    (45) expression -> . boolean_expression
    (46) expression -> . number_expression
    (47) expression -> . RANDOM
    (48) expression -> . string
    (57) boolean_expression -> . relational_operation
    (58) boolean_expression -> . boolean_expression OR boolean_expression
    (59) boolean_expression -> . boolean_expression AND boolean_expression
    (60) boolean_expression -> . NOT boolean_expression
    (61) boolean_expression -> . variable
    (62) boolean_expression -> . TRUE
    (63) boolean_expression -> . FALSE
    (49) number_expression -> . number_expression ADD number_expression
    (50) number_expression -> . number_expression SUB number_expression
    (51) number_expression -> . number_expression MUL number_expression
    (52) number_expression -> . number_expression DIV number_expression
    (53) number_expression -> . number_expression POW number_expression
    (54) number_expression -> . OPEN_PAR number_expression CLOSE_PAR
    (55) number_expression -> . variable
    (56) number_expression -> . NUM
    (76) string -> . STRING
    (64) relational_operation -> . expression GT_OP expression
    (65) relational_operation -> . expression LT_OP expression
    (66) relational_operation -> . expression GTE_OP expression
    (67) relational_operation -> . expression LTE_OP expression
    (68) relational_operation -> . expression EQ_OP expression
    (69) relational_operation -> . expression NE_OP expression
    (34) variable -> . COLON ID

    OPEN_PAR        shift and go to state 50
    RANDOM          shift and go to state 53
    NOT             shift and go to state 56
    TRUE            shift and go to state 58
    FALSE           shift and go to state 59
    NUM             shift and go to state 43
    STRING          shift and go to state 60
    COLON           shift and go to state 44

    expression                     shift and go to state 112
    boolean_expression             shift and go to state 51
    number_expression              shift and go to state 52
    string                         shift and go to state 54
    relational_operation           shift and go to state 55
    variable                       shift and go to state 57

state 85

    (66) relational_operation -> expression GTE_OP . expression
    (44) expression -> . OPEN_PAR expression CLOSE_PAR
    (45) expression -> . boolean_expression
    (46) expression -> . number_expression
    (47) expression -> . RANDOM
    (48) expression -> . string
    (57) boolean_expression -> . relational_operation
    (58) boolean_expression -> . boolean_expression OR boolean_expression
    (59) boolean_expression -> . boolean_expression AND boolean_expression
    (60) boolean_expression -> . NOT boolean_expression
    (61) boolean_expression -> . variable
    (62) boolean_expression -> . TRUE
    (63) boolean_expression -> . FALSE
    (49) number_expression -> . number_expression ADD number_expression
    (50) number_expression -> . number_expression SUB number_expression
    (51) number_expression -> . number_expression MUL number_expression
    (52) number_expression -> . number_expression DIV number_expression
    (53) number_expression -> . number_expression POW number_expression
    (54) number_expression -> . OPEN_PAR number_expression CLOSE_PAR
    (55) number_expression -> . variable
    (56) number_expression -> . NUM
    (76) string -> . STRING
    (64) relational_operation -> . expression GT_OP expression
    (65) relational_operation -> . expression LT_OP expression
    (66) relational_operation -> . expression GTE_OP expression
    (67) relational_operation -> . expression LTE_OP expression
    (68) relational_operation -> . expression EQ_OP expression
    (69) relational_operation -> . expression NE_OP expression
    (34) variable -> . COLON ID

    OPEN_PAR        shift and go to state 50
    RANDOM          shift and go to state 53
    NOT             shift and go to state 56
    TRUE            shift and go to state 58
    FALSE           shift and go to state 59
    NUM             shift and go to state 43
    STRING          shift and go to state 60
    COLON           shift and go to state 44

    expression                     shift and go to state 113
    boolean_expression             shift and go to state 51
    number_expression              shift and go to state 52
    string                         shift and go to state 54
    relational_operation           shift and go to state 55
    variable                       shift and go to state 57

state 86

    (67) relational_operation -> expression LTE_OP . expression
    (44) expression -> . OPEN_PAR expression CLOSE_PAR
    (45) expression -> . boolean_expression
    (46) expression -> . number_expression
    (47) expression -> . RANDOM
    (48) expression -> . string
    (57) boolean_expression -> . relational_operation
    (58) boolean_expression -> . boolean_expression OR boolean_expression
    (59) boolean_expression -> . boolean_expression AND boolean_expression
    (60) boolean_expression -> . NOT boolean_expression
    (61) boolean_expression -> . variable
    (62) boolean_expression -> . TRUE
    (63) boolean_expression -> . FALSE
    (49) number_expression -> . number_expression ADD number_expression
    (50) number_expression -> . number_expression SUB number_expression
    (51) number_expression -> . number_expression MUL number_expression
    (52) number_expression -> . number_expression DIV number_expression
    (53) number_expression -> . number_expression POW number_expression
    (54) number_expression -> . OPEN_PAR number_expression CLOSE_PAR
    (55) number_expression -> . variable
    (56) number_expression -> . NUM
    (76) string -> . STRING
    (64) relational_operation -> . expression GT_OP expression
    (65) relational_operation -> . expression LT_OP expression
    (66) relational_operation -> . expression GTE_OP expression
    (67) relational_operation -> . expression LTE_OP expression
    (68) relational_operation -> . expression EQ_OP expression
    (69) relational_operation -> . expression NE_OP expression
    (34) variable -> . COLON ID

    OPEN_PAR        shift and go to state 50
    RANDOM          shift and go to state 53
    NOT             shift and go to state 56
    TRUE            shift and go to state 58
    FALSE           shift and go to state 59
    NUM             shift and go to state 43
    STRING          shift and go to state 60
    COLON           shift and go to state 44

    expression                     shift and go to state 114
    boolean_expression             shift and go to state 51
    number_expression              shift and go to state 52
    string                         shift and go to state 54
    relational_operation           shift and go to state 55
    variable                       shift and go to state 57

state 87

    (68) relational_operation -> expression EQ_OP . expression
    (44) expression -> . OPEN_PAR expression CLOSE_PAR
    (45) expression -> . boolean_expression
    (46) expression -> . number_expression
    (47) expression -> . RANDOM
    (48) expression -> . string
    (57) boolean_expression -> . relational_operation
    (58) boolean_expression -> . boolean_expression OR boolean_expression
    (59) boolean_expression -> . boolean_expression AND boolean_expression
    (60) boolean_expression -> . NOT boolean_expression
    (61) boolean_expression -> . variable
    (62) boolean_expression -> . TRUE
    (63) boolean_expression -> . FALSE
    (49) number_expression -> . number_expression ADD number_expression
    (50) number_expression -> . number_expression SUB number_expression
    (51) number_expression -> . number_expression MUL number_expression
    (52) number_expression -> . number_expression DIV number_expression
    (53) number_expression -> . number_expression POW number_expression
    (54) number_expression -> . OPEN_PAR number_expression CLOSE_PAR
    (55) number_expression -> . variable
    (56) number_expression -> . NUM
    (76) string -> . STRING
    (64) relational_operation -> . expression GT_OP expression
    (65) relational_operation -> . expression LT_OP expression
    (66) relational_operation -> . expression GTE_OP expression
    (67) relational_operation -> . expression LTE_OP expression
    (68) relational_operation -> . expression EQ_OP expression
    (69) relational_operation -> . expression NE_OP expression
    (34) variable -> . COLON ID

    OPEN_PAR        shift and go to state 50
    RANDOM          shift and go to state 53
    NOT             shift and go to state 56
    TRUE            shift and go to state 58
    FALSE           shift and go to state 59
    NUM             shift and go to state 43
    STRING          shift and go to state 60
    COLON           shift and go to state 44

    expression                     shift and go to state 115
    boolean_expression             shift and go to state 51
    number_expression              shift and go to state 52
    string                         shift and go to state 54
    relational_operation           shift and go to state 55
    variable                       shift and go to state 57

state 88

    (69) relational_operation -> expression NE_OP . expression
    (44) expression -> . OPEN_PAR expression CLOSE_PAR
    (45) expression -> . boolean_expression
    (46) expression -> . number_expression
    (47) expression -> . RANDOM
    (48) expression -> . string
    (57) boolean_expression -> . relational_operation
    (58) boolean_expression -> . boolean_expression OR boolean_expression
    (59) boolean_expression -> . boolean_expression AND boolean_expression
    (60) boolean_expression -> . NOT boolean_expression
    (61) boolean_expression -> . variable
    (62) boolean_expression -> . TRUE
    (63) boolean_expression -> . FALSE
    (49) number_expression -> . number_expression ADD number_expression
    (50) number_expression -> . number_expression SUB number_expression
    (51) number_expression -> . number_expression MUL number_expression
    (52) number_expression -> . number_expression DIV number_expression
    (53) number_expression -> . number_expression POW number_expression
    (54) number_expression -> . OPEN_PAR number_expression CLOSE_PAR
    (55) number_expression -> . variable
    (56) number_expression -> . NUM
    (76) string -> . STRING
    (64) relational_operation -> . expression GT_OP expression
    (65) relational_operation -> . expression LT_OP expression
    (66) relational_operation -> . expression GTE_OP expression
    (67) relational_operation -> . expression LTE_OP expression
    (68) relational_operation -> . expression EQ_OP expression
    (69) relational_operation -> . expression NE_OP expression
    (34) variable -> . COLON ID

    OPEN_PAR        shift and go to state 50
    RANDOM          shift and go to state 53
    NOT             shift and go to state 56
    TRUE            shift and go to state 58
    FALSE           shift and go to state 59
    NUM             shift and go to state 43
    STRING          shift and go to state 60
    COLON           shift and go to state 44

    expression                     shift and go to state 116
    boolean_expression             shift and go to state 51
    number_expression              shift and go to state 52
    string                         shift and go to state 54
    relational_operation           shift and go to state 55
    variable                       shift and go to state 57

state 89

    (44) expression -> OPEN_PAR expression . CLOSE_PAR
    (64) relational_operation -> expression . GT_OP expression
    (65) relational_operation -> expression . LT_OP expression
    (66) relational_operation -> expression . GTE_OP expression
    (67) relational_operation -> expression . LTE_OP expression
    (68) relational_operation -> expression . EQ_OP expression
    (69) relational_operation -> expression . NE_OP expression

    CLOSE_PAR       shift and go to state 117
    GT_OP           shift and go to state 83
    LT_OP           shift and go to state 84
    GTE_OP          shift and go to state 85
    LTE_OP          shift and go to state 86
    EQ_OP           shift and go to state 87
    NE_OP           shift and go to state 88


state 90

    (54) number_expression -> OPEN_PAR number_expression . CLOSE_PAR
    (46) expression -> number_expression .
    (49) number_expression -> number_expression . ADD number_expression
    (50) number_expression -> number_expression . SUB number_expression
    (51) number_expression -> number_expression . MUL number_expression
    (52) number_expression -> number_expression . DIV number_expression
    (53) number_expression -> number_expression . POW number_expression

  ! shift/reduce conflict for CLOSE_PAR resolved as shift
    CLOSE_PAR       shift and go to state 110
    GT_OP           reduce using rule 46 (expression -> number_expression .)
    LT_OP           reduce using rule 46 (expression -> number_expression .)
    GTE_OP          reduce using rule 46 (expression -> number_expression .)
    LTE_OP          reduce using rule 46 (expression -> number_expression .)
    EQ_OP           reduce using rule 46 (expression -> number_expression .)
    NE_OP           reduce using rule 46 (expression -> number_expression .)
    ADD             shift and go to state 76
    SUB             shift and go to state 77
    MUL             shift and go to state 78
    DIV             shift and go to state 79
    POW             shift and go to state 80

  ! CLOSE_PAR       [ reduce using rule 46 (expression -> number_expression .) ]


state 91

    (55) number_expression -> variable .
    (61) boolean_expression -> variable .

  ! reduce/reduce conflict for CLOSE_PAR resolved using rule 55 (number_expression -> variable .)
  ! reduce/reduce conflict for GT_OP resolved using rule 55 (number_expression -> variable .)
  ! reduce/reduce conflict for LT_OP resolved using rule 55 (number_expression -> variable .)
  ! reduce/reduce conflict for GTE_OP resolved using rule 55 (number_expression -> variable .)
  ! reduce/reduce conflict for LTE_OP resolved using rule 55 (number_expression -> variable .)
  ! reduce/reduce conflict for EQ_OP resolved using rule 55 (number_expression -> variable .)
  ! reduce/reduce conflict for NE_OP resolved using rule 55 (number_expression -> variable .)
    CLOSE_PAR       reduce using rule 55 (number_expression -> variable .)
    ADD             reduce using rule 55 (number_expression -> variable .)
    SUB             reduce using rule 55 (number_expression -> variable .)
    MUL             reduce using rule 55 (number_expression -> variable .)
    DIV             reduce using rule 55 (number_expression -> variable .)
    POW             reduce using rule 55 (number_expression -> variable .)
    GT_OP           reduce using rule 55 (number_expression -> variable .)
    LT_OP           reduce using rule 55 (number_expression -> variable .)
    GTE_OP          reduce using rule 55 (number_expression -> variable .)
    LTE_OP          reduce using rule 55 (number_expression -> variable .)
    EQ_OP           reduce using rule 55 (number_expression -> variable .)
    NE_OP           reduce using rule 55 (number_expression -> variable .)
    OR              reduce using rule 61 (boolean_expression -> variable .)
    AND             reduce using rule 61 (boolean_expression -> variable .)

  ! CLOSE_PAR       [ reduce using rule 61 (boolean_expression -> variable .) ]
  ! GT_OP           [ reduce using rule 61 (boolean_expression -> variable .) ]
  ! LT_OP           [ reduce using rule 61 (boolean_expression -> variable .) ]
  ! GTE_OP          [ reduce using rule 61 (boolean_expression -> variable .) ]
  ! LTE_OP          [ reduce using rule 61 (boolean_expression -> variable .) ]
  ! EQ_OP           [ reduce using rule 61 (boolean_expression -> variable .) ]
  ! NE_OP           [ reduce using rule 61 (boolean_expression -> variable .) ]


state 92

    (58) boolean_expression -> boolean_expression OR . boolean_expression
    (57) boolean_expression -> . relational_operation
    (58) boolean_expression -> . boolean_expression OR boolean_expression
    (59) boolean_expression -> . boolean_expression AND boolean_expression
    (60) boolean_expression -> . NOT boolean_expression
    (61) boolean_expression -> . variable
    (62) boolean_expression -> . TRUE
    (63) boolean_expression -> . FALSE
    (64) relational_operation -> . expression GT_OP expression
    (65) relational_operation -> . expression LT_OP expression
    (66) relational_operation -> . expression GTE_OP expression
    (67) relational_operation -> . expression LTE_OP expression
    (68) relational_operation -> . expression EQ_OP expression
    (69) relational_operation -> . expression NE_OP expression
    (34) variable -> . COLON ID
    (44) expression -> . OPEN_PAR expression CLOSE_PAR
    (45) expression -> . boolean_expression
    (46) expression -> . number_expression
    (47) expression -> . RANDOM
    (48) expression -> . string
    (49) number_expression -> . number_expression ADD number_expression
    (50) number_expression -> . number_expression SUB number_expression
    (51) number_expression -> . number_expression MUL number_expression
    (52) number_expression -> . number_expression DIV number_expression
    (53) number_expression -> . number_expression POW number_expression
    (54) number_expression -> . OPEN_PAR number_expression CLOSE_PAR
    (55) number_expression -> . variable
    (56) number_expression -> . NUM
    (76) string -> . STRING

    NOT             shift and go to state 56
    TRUE            shift and go to state 58
    FALSE           shift and go to state 59
    COLON           shift and go to state 44
    OPEN_PAR        shift and go to state 50
    RANDOM          shift and go to state 53
    NUM             shift and go to state 43
    STRING          shift and go to state 60

    boolean_expression             shift and go to state 118
    relational_operation           shift and go to state 55
    variable                       shift and go to state 57
    expression                     shift and go to state 95
    number_expression              shift and go to state 52
    string                         shift and go to state 54

state 93

    (59) boolean_expression -> boolean_expression AND . boolean_expression
    (57) boolean_expression -> . relational_operation
    (58) boolean_expression -> . boolean_expression OR boolean_expression
    (59) boolean_expression -> . boolean_expression AND boolean_expression
    (60) boolean_expression -> . NOT boolean_expression
    (61) boolean_expression -> . variable
    (62) boolean_expression -> . TRUE
    (63) boolean_expression -> . FALSE
    (64) relational_operation -> . expression GT_OP expression
    (65) relational_operation -> . expression LT_OP expression
    (66) relational_operation -> . expression GTE_OP expression
    (67) relational_operation -> . expression LTE_OP expression
    (68) relational_operation -> . expression EQ_OP expression
    (69) relational_operation -> . expression NE_OP expression
    (34) variable -> . COLON ID
    (44) expression -> . OPEN_PAR expression CLOSE_PAR
    (45) expression -> . boolean_expression
    (46) expression -> . number_expression
    (47) expression -> . RANDOM
    (48) expression -> . string
    (49) number_expression -> . number_expression ADD number_expression
    (50) number_expression -> . number_expression SUB number_expression
    (51) number_expression -> . number_expression MUL number_expression
    (52) number_expression -> . number_expression DIV number_expression
    (53) number_expression -> . number_expression POW number_expression
    (54) number_expression -> . OPEN_PAR number_expression CLOSE_PAR
    (55) number_expression -> . variable
    (56) number_expression -> . NUM
    (76) string -> . STRING

    NOT             shift and go to state 56
    TRUE            shift and go to state 58
    FALSE           shift and go to state 59
    COLON           shift and go to state 44
    OPEN_PAR        shift and go to state 50
    RANDOM          shift and go to state 53
    NUM             shift and go to state 43
    STRING          shift and go to state 60

    boolean_expression             shift and go to state 119
    relational_operation           shift and go to state 55
    variable                       shift and go to state 57
    expression                     shift and go to state 95
    number_expression              shift and go to state 52
    string                         shift and go to state 54

state 94

    (60) boolean_expression -> NOT boolean_expression .
    (58) boolean_expression -> boolean_expression . OR boolean_expression
    (59) boolean_expression -> boolean_expression . AND boolean_expression
    (45) expression -> boolean_expression .

  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! reduce/reduce conflict for GT_OP resolved using rule 45 (expression -> boolean_expression .)
  ! reduce/reduce conflict for LT_OP resolved using rule 45 (expression -> boolean_expression .)
  ! reduce/reduce conflict for GTE_OP resolved using rule 45 (expression -> boolean_expression .)
  ! reduce/reduce conflict for LTE_OP resolved using rule 45 (expression -> boolean_expression .)
  ! reduce/reduce conflict for EQ_OP resolved using rule 45 (expression -> boolean_expression .)
  ! reduce/reduce conflict for NE_OP resolved using rule 45 (expression -> boolean_expression .)
    FO              reduce using rule 60 (boolean_expression -> NOT boolean_expression .)
    FORWARD         reduce using rule 60 (boolean_expression -> NOT boolean_expression .)
    BK              reduce using rule 60 (boolean_expression -> NOT boolean_expression .)
    BACKWARD        reduce using rule 60 (boolean_expression -> NOT boolean_expression .)
    RT              reduce using rule 60 (boolean_expression -> NOT boolean_expression .)
    RIGHT           reduce using rule 60 (boolean_expression -> NOT boolean_expression .)
    LT              reduce using rule 60 (boolean_expression -> NOT boolean_expression .)
    LEFT            reduce using rule 60 (boolean_expression -> NOT boolean_expression .)
    PD              reduce using rule 60 (boolean_expression -> NOT boolean_expression .)
    PENDOWN         reduce using rule 60 (boolean_expression -> NOT boolean_expression .)
    PU              reduce using rule 60 (boolean_expression -> NOT boolean_expression .)
    PENUP           reduce using rule 60 (boolean_expression -> NOT boolean_expression .)
    WC              reduce using rule 60 (boolean_expression -> NOT boolean_expression .)
    WIPECLEAN       reduce using rule 60 (boolean_expression -> NOT boolean_expression .)
    CS              reduce using rule 60 (boolean_expression -> NOT boolean_expression .)
    CLEARSCREEN     reduce using rule 60 (boolean_expression -> NOT boolean_expression .)
    HOME            reduce using rule 60 (boolean_expression -> NOT boolean_expression .)
    HEADING         reduce using rule 60 (boolean_expression -> NOT boolean_expression .)
    TYPEIN          reduce using rule 60 (boolean_expression -> NOT boolean_expression .)
    SETXY           reduce using rule 60 (boolean_expression -> NOT boolean_expression .)
    XCOR            reduce using rule 60 (boolean_expression -> NOT boolean_expression .)
    YCOR            reduce using rule 60 (boolean_expression -> NOT boolean_expression .)
    ID              reduce using rule 60 (boolean_expression -> NOT boolean_expression .)
    TO              reduce using rule 60 (boolean_expression -> NOT boolean_expression .)
    IF              reduce using rule 60 (boolean_expression -> NOT boolean_expression .)
    WHILE           reduce using rule 60 (boolean_expression -> NOT boolean_expression .)
    WRITE           reduce using rule 60 (boolean_expression -> NOT boolean_expression .)
    $end            reduce using rule 60 (boolean_expression -> NOT boolean_expression .)
    END             reduce using rule 60 (boolean_expression -> NOT boolean_expression .)
    ELSE            reduce using rule 60 (boolean_expression -> NOT boolean_expression .)
    COMMA           reduce using rule 60 (boolean_expression -> NOT boolean_expression .)
    CLOSE_PAR       reduce using rule 60 (boolean_expression -> NOT boolean_expression .)
    OR              shift and go to state 92
    AND             shift and go to state 93
    GT_OP           reduce using rule 45 (expression -> boolean_expression .)
    LT_OP           reduce using rule 45 (expression -> boolean_expression .)
    GTE_OP          reduce using rule 45 (expression -> boolean_expression .)
    LTE_OP          reduce using rule 45 (expression -> boolean_expression .)
    EQ_OP           reduce using rule 45 (expression -> boolean_expression .)
    NE_OP           reduce using rule 45 (expression -> boolean_expression .)

  ! OR              [ reduce using rule 60 (boolean_expression -> NOT boolean_expression .) ]
  ! AND             [ reduce using rule 60 (boolean_expression -> NOT boolean_expression .) ]
  ! GT_OP           [ reduce using rule 60 (boolean_expression -> NOT boolean_expression .) ]
  ! LT_OP           [ reduce using rule 60 (boolean_expression -> NOT boolean_expression .) ]
  ! GTE_OP          [ reduce using rule 60 (boolean_expression -> NOT boolean_expression .) ]
  ! LTE_OP          [ reduce using rule 60 (boolean_expression -> NOT boolean_expression .) ]
  ! EQ_OP           [ reduce using rule 60 (boolean_expression -> NOT boolean_expression .) ]
  ! NE_OP           [ reduce using rule 60 (boolean_expression -> NOT boolean_expression .) ]


state 95

    (64) relational_operation -> expression . GT_OP expression
    (65) relational_operation -> expression . LT_OP expression
    (66) relational_operation -> expression . GTE_OP expression
    (67) relational_operation -> expression . LTE_OP expression
    (68) relational_operation -> expression . EQ_OP expression
    (69) relational_operation -> expression . NE_OP expression

    GT_OP           shift and go to state 83
    LT_OP           shift and go to state 84
    GTE_OP          shift and go to state 85
    LTE_OP          shift and go to state 86
    EQ_OP           shift and go to state 87
    NE_OP           shift and go to state 88


state 96

    (30) instruction -> SETXY number_expression COMMA . number_expression
    (49) number_expression -> . number_expression ADD number_expression
    (50) number_expression -> . number_expression SUB number_expression
    (51) number_expression -> . number_expression MUL number_expression
    (52) number_expression -> . number_expression DIV number_expression
    (53) number_expression -> . number_expression POW number_expression
    (54) number_expression -> . OPEN_PAR number_expression CLOSE_PAR
    (55) number_expression -> . variable
    (56) number_expression -> . NUM
    (34) variable -> . COLON ID

    OPEN_PAR        shift and go to state 41
    NUM             shift and go to state 43
    COLON           shift and go to state 44

    number_expression              shift and go to state 120
    variable                       shift and go to state 42

state 97

    (33) variable_declaration -> ID ASSIGN expression .
    (64) relational_operation -> expression . GT_OP expression
    (65) relational_operation -> expression . LT_OP expression
    (66) relational_operation -> expression . GTE_OP expression
    (67) relational_operation -> expression . LTE_OP expression
    (68) relational_operation -> expression . EQ_OP expression
    (69) relational_operation -> expression . NE_OP expression

    FO              reduce using rule 33 (variable_declaration -> ID ASSIGN expression .)
    FORWARD         reduce using rule 33 (variable_declaration -> ID ASSIGN expression .)
    BK              reduce using rule 33 (variable_declaration -> ID ASSIGN expression .)
    BACKWARD        reduce using rule 33 (variable_declaration -> ID ASSIGN expression .)
    RT              reduce using rule 33 (variable_declaration -> ID ASSIGN expression .)
    RIGHT           reduce using rule 33 (variable_declaration -> ID ASSIGN expression .)
    LT              reduce using rule 33 (variable_declaration -> ID ASSIGN expression .)
    LEFT            reduce using rule 33 (variable_declaration -> ID ASSIGN expression .)
    PD              reduce using rule 33 (variable_declaration -> ID ASSIGN expression .)
    PENDOWN         reduce using rule 33 (variable_declaration -> ID ASSIGN expression .)
    PU              reduce using rule 33 (variable_declaration -> ID ASSIGN expression .)
    PENUP           reduce using rule 33 (variable_declaration -> ID ASSIGN expression .)
    WC              reduce using rule 33 (variable_declaration -> ID ASSIGN expression .)
    WIPECLEAN       reduce using rule 33 (variable_declaration -> ID ASSIGN expression .)
    CS              reduce using rule 33 (variable_declaration -> ID ASSIGN expression .)
    CLEARSCREEN     reduce using rule 33 (variable_declaration -> ID ASSIGN expression .)
    HOME            reduce using rule 33 (variable_declaration -> ID ASSIGN expression .)
    HEADING         reduce using rule 33 (variable_declaration -> ID ASSIGN expression .)
    TYPEIN          reduce using rule 33 (variable_declaration -> ID ASSIGN expression .)
    SETXY           reduce using rule 33 (variable_declaration -> ID ASSIGN expression .)
    XCOR            reduce using rule 33 (variable_declaration -> ID ASSIGN expression .)
    YCOR            reduce using rule 33 (variable_declaration -> ID ASSIGN expression .)
    ID              reduce using rule 33 (variable_declaration -> ID ASSIGN expression .)
    TO              reduce using rule 33 (variable_declaration -> ID ASSIGN expression .)
    IF              reduce using rule 33 (variable_declaration -> ID ASSIGN expression .)
    WHILE           reduce using rule 33 (variable_declaration -> ID ASSIGN expression .)
    WRITE           reduce using rule 33 (variable_declaration -> ID ASSIGN expression .)
    $end            reduce using rule 33 (variable_declaration -> ID ASSIGN expression .)
    END             reduce using rule 33 (variable_declaration -> ID ASSIGN expression .)
    ELSE            reduce using rule 33 (variable_declaration -> ID ASSIGN expression .)
    GT_OP           shift and go to state 83
    LT_OP           shift and go to state 84
    GTE_OP          shift and go to state 85
    LTE_OP          shift and go to state 86
    EQ_OP           shift and go to state 87
    NE_OP           shift and go to state 88


state 98

    (40) expression_list -> expression_list COMMA . expression
    (44) expression -> . OPEN_PAR expression CLOSE_PAR
    (45) expression -> . boolean_expression
    (46) expression -> . number_expression
    (47) expression -> . RANDOM
    (48) expression -> . string
    (57) boolean_expression -> . relational_operation
    (58) boolean_expression -> . boolean_expression OR boolean_expression
    (59) boolean_expression -> . boolean_expression AND boolean_expression
    (60) boolean_expression -> . NOT boolean_expression
    (61) boolean_expression -> . variable
    (62) boolean_expression -> . TRUE
    (63) boolean_expression -> . FALSE
    (49) number_expression -> . number_expression ADD number_expression
    (50) number_expression -> . number_expression SUB number_expression
    (51) number_expression -> . number_expression MUL number_expression
    (52) number_expression -> . number_expression DIV number_expression
    (53) number_expression -> . number_expression POW number_expression
    (54) number_expression -> . OPEN_PAR number_expression CLOSE_PAR
    (55) number_expression -> . variable
    (56) number_expression -> . NUM
    (76) string -> . STRING
    (64) relational_operation -> . expression GT_OP expression
    (65) relational_operation -> . expression LT_OP expression
    (66) relational_operation -> . expression GTE_OP expression
    (67) relational_operation -> . expression LTE_OP expression
    (68) relational_operation -> . expression EQ_OP expression
    (69) relational_operation -> . expression NE_OP expression
    (34) variable -> . COLON ID

    OPEN_PAR        shift and go to state 50
    RANDOM          shift and go to state 53
    NOT             shift and go to state 56
    TRUE            shift and go to state 58
    FALSE           shift and go to state 59
    NUM             shift and go to state 43
    STRING          shift and go to state 60
    COLON           shift and go to state 44

    expression                     shift and go to state 121
    boolean_expression             shift and go to state 51
    number_expression              shift and go to state 52
    string                         shift and go to state 54
    relational_operation           shift and go to state 55
    variable                       shift and go to state 57

state 99

    (39) procedure_declaration -> TO ID argument_list . other_statement END
    (35) argument_list -> argument_list . COMMA argument
    (2) other_statement -> . statement other_statement
    (3) other_statement -> . empty
    (4) statement -> . instruction
    (5) statement -> . variable_declaration
    (6) statement -> . procedure_declaration
    (7) statement -> . procedure_call
    (8) statement -> . if_then_else
    (9) statement -> . while_loop
    (10) statement -> . write
    (75) empty -> .
    (11) instruction -> . FO number_expression
    (12) instruction -> . FORWARD number_expression
    (13) instruction -> . BK number_expression
    (14) instruction -> . BACKWARD number_expression
    (15) instruction -> . RT number_expression
    (16) instruction -> . RIGHT expression
    (17) instruction -> . LT number_expression
    (18) instruction -> . LEFT number_expression
    (19) instruction -> . PD
    (20) instruction -> . PENDOWN
    (21) instruction -> . PU
    (22) instruction -> . PENUP
    (23) instruction -> . WC
    (24) instruction -> . WIPECLEAN
    (25) instruction -> . CS
    (26) instruction -> . CLEARSCREEN
    (27) instruction -> . HOME
    (28) instruction -> . HEADING
    (29) instruction -> . TYPEIN
    (30) instruction -> . SETXY number_expression COMMA number_expression
    (31) instruction -> . XCOR number_expression
    (32) instruction -> . YCOR number_expression
    (33) variable_declaration -> . ID ASSIGN expression
    (39) procedure_declaration -> . TO ID argument_list other_statement END
    (43) procedure_call -> . ID expression_list
    (70) if_then_else -> . IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement END
    (71) if_then_else -> . IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement ELSE other_statement END
    (72) while_loop -> . WHILE OPEN_PAR boolean_expression CLOSE_PAR other_statement END
    (73) write -> . WRITE expression
    (74) write -> . WRITE string

    COMMA           shift and go to state 123
    END             reduce using rule 75 (empty -> .)
    FO              shift and go to state 10
    FORWARD         shift and go to state 11
    BK              shift and go to state 12
    BACKWARD        shift and go to state 13
    RT              shift and go to state 14
    RIGHT           shift and go to state 15
    LT              shift and go to state 16
    LEFT            shift and go to state 17
    PD              shift and go to state 18
    PENDOWN         shift and go to state 19
    PU              shift and go to state 20
    PENUP           shift and go to state 21
    WC              shift and go to state 22
    WIPECLEAN       shift and go to state 23
    CS              shift and go to state 24
    CLEARSCREEN     shift and go to state 25
    HOME            shift and go to state 26
    HEADING         shift and go to state 27
    TYPEIN          shift and go to state 28
    SETXY           shift and go to state 29
    XCOR            shift and go to state 30
    YCOR            shift and go to state 31
    ID              shift and go to state 32
    TO              shift and go to state 33
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    WRITE           shift and go to state 36

    other_statement                shift and go to state 122
    statement                      shift and go to state 37
    empty                          shift and go to state 39
    instruction                    shift and go to state 3
    variable_declaration           shift and go to state 4
    procedure_declaration          shift and go to state 5
    procedure_call                 shift and go to state 6
    if_then_else                   shift and go to state 7
    while_loop                     shift and go to state 8
    write                          shift and go to state 9

state 100

    (36) argument_list -> argument .

    COMMA           reduce using rule 36 (argument_list -> argument .)
    FO              reduce using rule 36 (argument_list -> argument .)
    FORWARD         reduce using rule 36 (argument_list -> argument .)
    BK              reduce using rule 36 (argument_list -> argument .)
    BACKWARD        reduce using rule 36 (argument_list -> argument .)
    RT              reduce using rule 36 (argument_list -> argument .)
    RIGHT           reduce using rule 36 (argument_list -> argument .)
    LT              reduce using rule 36 (argument_list -> argument .)
    LEFT            reduce using rule 36 (argument_list -> argument .)
    PD              reduce using rule 36 (argument_list -> argument .)
    PENDOWN         reduce using rule 36 (argument_list -> argument .)
    PU              reduce using rule 36 (argument_list -> argument .)
    PENUP           reduce using rule 36 (argument_list -> argument .)
    WC              reduce using rule 36 (argument_list -> argument .)
    WIPECLEAN       reduce using rule 36 (argument_list -> argument .)
    CS              reduce using rule 36 (argument_list -> argument .)
    CLEARSCREEN     reduce using rule 36 (argument_list -> argument .)
    HOME            reduce using rule 36 (argument_list -> argument .)
    HEADING         reduce using rule 36 (argument_list -> argument .)
    TYPEIN          reduce using rule 36 (argument_list -> argument .)
    SETXY           reduce using rule 36 (argument_list -> argument .)
    XCOR            reduce using rule 36 (argument_list -> argument .)
    YCOR            reduce using rule 36 (argument_list -> argument .)
    ID              reduce using rule 36 (argument_list -> argument .)
    TO              reduce using rule 36 (argument_list -> argument .)
    IF              reduce using rule 36 (argument_list -> argument .)
    WHILE           reduce using rule 36 (argument_list -> argument .)
    WRITE           reduce using rule 36 (argument_list -> argument .)
    END             reduce using rule 36 (argument_list -> argument .)


state 101

    (37) argument -> expression .
    (64) relational_operation -> expression . GT_OP expression
    (65) relational_operation -> expression . LT_OP expression
    (66) relational_operation -> expression . GTE_OP expression
    (67) relational_operation -> expression . LTE_OP expression
    (68) relational_operation -> expression . EQ_OP expression
    (69) relational_operation -> expression . NE_OP expression

    COMMA           reduce using rule 37 (argument -> expression .)
    FO              reduce using rule 37 (argument -> expression .)
    FORWARD         reduce using rule 37 (argument -> expression .)
    BK              reduce using rule 37 (argument -> expression .)
    BACKWARD        reduce using rule 37 (argument -> expression .)
    RT              reduce using rule 37 (argument -> expression .)
    RIGHT           reduce using rule 37 (argument -> expression .)
    LT              reduce using rule 37 (argument -> expression .)
    LEFT            reduce using rule 37 (argument -> expression .)
    PD              reduce using rule 37 (argument -> expression .)
    PENDOWN         reduce using rule 37 (argument -> expression .)
    PU              reduce using rule 37 (argument -> expression .)
    PENUP           reduce using rule 37 (argument -> expression .)
    WC              reduce using rule 37 (argument -> expression .)
    WIPECLEAN       reduce using rule 37 (argument -> expression .)
    CS              reduce using rule 37 (argument -> expression .)
    CLEARSCREEN     reduce using rule 37 (argument -> expression .)
    HOME            reduce using rule 37 (argument -> expression .)
    HEADING         reduce using rule 37 (argument -> expression .)
    TYPEIN          reduce using rule 37 (argument -> expression .)
    SETXY           reduce using rule 37 (argument -> expression .)
    XCOR            reduce using rule 37 (argument -> expression .)
    YCOR            reduce using rule 37 (argument -> expression .)
    ID              reduce using rule 37 (argument -> expression .)
    TO              reduce using rule 37 (argument -> expression .)
    IF              reduce using rule 37 (argument -> expression .)
    WHILE           reduce using rule 37 (argument -> expression .)
    WRITE           reduce using rule 37 (argument -> expression .)
    END             reduce using rule 37 (argument -> expression .)
    GT_OP           shift and go to state 83
    LT_OP           shift and go to state 84
    GTE_OP          shift and go to state 85
    LTE_OP          shift and go to state 86
    EQ_OP           shift and go to state 87
    NE_OP           shift and go to state 88


state 102

    (38) argument -> empty .

    COMMA           reduce using rule 38 (argument -> empty .)
    FO              reduce using rule 38 (argument -> empty .)
    FORWARD         reduce using rule 38 (argument -> empty .)
    BK              reduce using rule 38 (argument -> empty .)
    BACKWARD        reduce using rule 38 (argument -> empty .)
    RT              reduce using rule 38 (argument -> empty .)
    RIGHT           reduce using rule 38 (argument -> empty .)
    LT              reduce using rule 38 (argument -> empty .)
    LEFT            reduce using rule 38 (argument -> empty .)
    PD              reduce using rule 38 (argument -> empty .)
    PENDOWN         reduce using rule 38 (argument -> empty .)
    PU              reduce using rule 38 (argument -> empty .)
    PENUP           reduce using rule 38 (argument -> empty .)
    WC              reduce using rule 38 (argument -> empty .)
    WIPECLEAN       reduce using rule 38 (argument -> empty .)
    CS              reduce using rule 38 (argument -> empty .)
    CLEARSCREEN     reduce using rule 38 (argument -> empty .)
    HOME            reduce using rule 38 (argument -> empty .)
    HEADING         reduce using rule 38 (argument -> empty .)
    TYPEIN          reduce using rule 38 (argument -> empty .)
    SETXY           reduce using rule 38 (argument -> empty .)
    XCOR            reduce using rule 38 (argument -> empty .)
    YCOR            reduce using rule 38 (argument -> empty .)
    ID              reduce using rule 38 (argument -> empty .)
    TO              reduce using rule 38 (argument -> empty .)
    IF              reduce using rule 38 (argument -> empty .)
    WHILE           reduce using rule 38 (argument -> empty .)
    WRITE           reduce using rule 38 (argument -> empty .)
    END             reduce using rule 38 (argument -> empty .)


state 103

    (70) if_then_else -> IF OPEN_PAR boolean_expression . CLOSE_PAR THEN other_statement END
    (71) if_then_else -> IF OPEN_PAR boolean_expression . CLOSE_PAR THEN other_statement ELSE other_statement END
    (58) boolean_expression -> boolean_expression . OR boolean_expression
    (59) boolean_expression -> boolean_expression . AND boolean_expression
    (45) expression -> boolean_expression .

    CLOSE_PAR       shift and go to state 124
    OR              shift and go to state 92
    AND             shift and go to state 93
    GT_OP           reduce using rule 45 (expression -> boolean_expression .)
    LT_OP           reduce using rule 45 (expression -> boolean_expression .)
    GTE_OP          reduce using rule 45 (expression -> boolean_expression .)
    LTE_OP          reduce using rule 45 (expression -> boolean_expression .)
    EQ_OP           reduce using rule 45 (expression -> boolean_expression .)
    NE_OP           reduce using rule 45 (expression -> boolean_expression .)


state 104

    (72) while_loop -> WHILE OPEN_PAR boolean_expression . CLOSE_PAR other_statement END
    (58) boolean_expression -> boolean_expression . OR boolean_expression
    (59) boolean_expression -> boolean_expression . AND boolean_expression
    (45) expression -> boolean_expression .

    CLOSE_PAR       shift and go to state 125
    OR              shift and go to state 92
    AND             shift and go to state 93
    GT_OP           reduce using rule 45 (expression -> boolean_expression .)
    LT_OP           reduce using rule 45 (expression -> boolean_expression .)
    GTE_OP          reduce using rule 45 (expression -> boolean_expression .)
    LTE_OP          reduce using rule 45 (expression -> boolean_expression .)
    EQ_OP           reduce using rule 45 (expression -> boolean_expression .)
    NE_OP           reduce using rule 45 (expression -> boolean_expression .)


state 105

    (49) number_expression -> number_expression ADD number_expression .
    (49) number_expression -> number_expression . ADD number_expression
    (50) number_expression -> number_expression . SUB number_expression
    (51) number_expression -> number_expression . MUL number_expression
    (52) number_expression -> number_expression . DIV number_expression
    (53) number_expression -> number_expression . POW number_expression

    ADD             reduce using rule 49 (number_expression -> number_expression ADD number_expression .)
    SUB             reduce using rule 49 (number_expression -> number_expression ADD number_expression .)
    FO              reduce using rule 49 (number_expression -> number_expression ADD number_expression .)
    FORWARD         reduce using rule 49 (number_expression -> number_expression ADD number_expression .)
    BK              reduce using rule 49 (number_expression -> number_expression ADD number_expression .)
    BACKWARD        reduce using rule 49 (number_expression -> number_expression ADD number_expression .)
    RT              reduce using rule 49 (number_expression -> number_expression ADD number_expression .)
    RIGHT           reduce using rule 49 (number_expression -> number_expression ADD number_expression .)
    LT              reduce using rule 49 (number_expression -> number_expression ADD number_expression .)
    LEFT            reduce using rule 49 (number_expression -> number_expression ADD number_expression .)
    PD              reduce using rule 49 (number_expression -> number_expression ADD number_expression .)
    PENDOWN         reduce using rule 49 (number_expression -> number_expression ADD number_expression .)
    PU              reduce using rule 49 (number_expression -> number_expression ADD number_expression .)
    PENUP           reduce using rule 49 (number_expression -> number_expression ADD number_expression .)
    WC              reduce using rule 49 (number_expression -> number_expression ADD number_expression .)
    WIPECLEAN       reduce using rule 49 (number_expression -> number_expression ADD number_expression .)
    CS              reduce using rule 49 (number_expression -> number_expression ADD number_expression .)
    CLEARSCREEN     reduce using rule 49 (number_expression -> number_expression ADD number_expression .)
    HOME            reduce using rule 49 (number_expression -> number_expression ADD number_expression .)
    HEADING         reduce using rule 49 (number_expression -> number_expression ADD number_expression .)
    TYPEIN          reduce using rule 49 (number_expression -> number_expression ADD number_expression .)
    SETXY           reduce using rule 49 (number_expression -> number_expression ADD number_expression .)
    XCOR            reduce using rule 49 (number_expression -> number_expression ADD number_expression .)
    YCOR            reduce using rule 49 (number_expression -> number_expression ADD number_expression .)
    ID              reduce using rule 49 (number_expression -> number_expression ADD number_expression .)
    TO              reduce using rule 49 (number_expression -> number_expression ADD number_expression .)
    IF              reduce using rule 49 (number_expression -> number_expression ADD number_expression .)
    WHILE           reduce using rule 49 (number_expression -> number_expression ADD number_expression .)
    WRITE           reduce using rule 49 (number_expression -> number_expression ADD number_expression .)
    $end            reduce using rule 49 (number_expression -> number_expression ADD number_expression .)
    END             reduce using rule 49 (number_expression -> number_expression ADD number_expression .)
    ELSE            reduce using rule 49 (number_expression -> number_expression ADD number_expression .)
    GT_OP           reduce using rule 49 (number_expression -> number_expression ADD number_expression .)
    LT_OP           reduce using rule 49 (number_expression -> number_expression ADD number_expression .)
    GTE_OP          reduce using rule 49 (number_expression -> number_expression ADD number_expression .)
    LTE_OP          reduce using rule 49 (number_expression -> number_expression ADD number_expression .)
    EQ_OP           reduce using rule 49 (number_expression -> number_expression ADD number_expression .)
    NE_OP           reduce using rule 49 (number_expression -> number_expression ADD number_expression .)
    COMMA           reduce using rule 49 (number_expression -> number_expression ADD number_expression .)
    CLOSE_PAR       reduce using rule 49 (number_expression -> number_expression ADD number_expression .)
    OR              reduce using rule 49 (number_expression -> number_expression ADD number_expression .)
    AND             reduce using rule 49 (number_expression -> number_expression ADD number_expression .)
    MUL             shift and go to state 78
    DIV             shift and go to state 79
    POW             shift and go to state 80

  ! MUL             [ reduce using rule 49 (number_expression -> number_expression ADD number_expression .) ]
  ! DIV             [ reduce using rule 49 (number_expression -> number_expression ADD number_expression .) ]
  ! POW             [ reduce using rule 49 (number_expression -> number_expression ADD number_expression .) ]
  ! ADD             [ shift and go to state 76 ]
  ! SUB             [ shift and go to state 77 ]


state 106

    (50) number_expression -> number_expression SUB number_expression .
    (49) number_expression -> number_expression . ADD number_expression
    (50) number_expression -> number_expression . SUB number_expression
    (51) number_expression -> number_expression . MUL number_expression
    (52) number_expression -> number_expression . DIV number_expression
    (53) number_expression -> number_expression . POW number_expression

    ADD             reduce using rule 50 (number_expression -> number_expression SUB number_expression .)
    SUB             reduce using rule 50 (number_expression -> number_expression SUB number_expression .)
    FO              reduce using rule 50 (number_expression -> number_expression SUB number_expression .)
    FORWARD         reduce using rule 50 (number_expression -> number_expression SUB number_expression .)
    BK              reduce using rule 50 (number_expression -> number_expression SUB number_expression .)
    BACKWARD        reduce using rule 50 (number_expression -> number_expression SUB number_expression .)
    RT              reduce using rule 50 (number_expression -> number_expression SUB number_expression .)
    RIGHT           reduce using rule 50 (number_expression -> number_expression SUB number_expression .)
    LT              reduce using rule 50 (number_expression -> number_expression SUB number_expression .)
    LEFT            reduce using rule 50 (number_expression -> number_expression SUB number_expression .)
    PD              reduce using rule 50 (number_expression -> number_expression SUB number_expression .)
    PENDOWN         reduce using rule 50 (number_expression -> number_expression SUB number_expression .)
    PU              reduce using rule 50 (number_expression -> number_expression SUB number_expression .)
    PENUP           reduce using rule 50 (number_expression -> number_expression SUB number_expression .)
    WC              reduce using rule 50 (number_expression -> number_expression SUB number_expression .)
    WIPECLEAN       reduce using rule 50 (number_expression -> number_expression SUB number_expression .)
    CS              reduce using rule 50 (number_expression -> number_expression SUB number_expression .)
    CLEARSCREEN     reduce using rule 50 (number_expression -> number_expression SUB number_expression .)
    HOME            reduce using rule 50 (number_expression -> number_expression SUB number_expression .)
    HEADING         reduce using rule 50 (number_expression -> number_expression SUB number_expression .)
    TYPEIN          reduce using rule 50 (number_expression -> number_expression SUB number_expression .)
    SETXY           reduce using rule 50 (number_expression -> number_expression SUB number_expression .)
    XCOR            reduce using rule 50 (number_expression -> number_expression SUB number_expression .)
    YCOR            reduce using rule 50 (number_expression -> number_expression SUB number_expression .)
    ID              reduce using rule 50 (number_expression -> number_expression SUB number_expression .)
    TO              reduce using rule 50 (number_expression -> number_expression SUB number_expression .)
    IF              reduce using rule 50 (number_expression -> number_expression SUB number_expression .)
    WHILE           reduce using rule 50 (number_expression -> number_expression SUB number_expression .)
    WRITE           reduce using rule 50 (number_expression -> number_expression SUB number_expression .)
    $end            reduce using rule 50 (number_expression -> number_expression SUB number_expression .)
    END             reduce using rule 50 (number_expression -> number_expression SUB number_expression .)
    ELSE            reduce using rule 50 (number_expression -> number_expression SUB number_expression .)
    GT_OP           reduce using rule 50 (number_expression -> number_expression SUB number_expression .)
    LT_OP           reduce using rule 50 (number_expression -> number_expression SUB number_expression .)
    GTE_OP          reduce using rule 50 (number_expression -> number_expression SUB number_expression .)
    LTE_OP          reduce using rule 50 (number_expression -> number_expression SUB number_expression .)
    EQ_OP           reduce using rule 50 (number_expression -> number_expression SUB number_expression .)
    NE_OP           reduce using rule 50 (number_expression -> number_expression SUB number_expression .)
    COMMA           reduce using rule 50 (number_expression -> number_expression SUB number_expression .)
    CLOSE_PAR       reduce using rule 50 (number_expression -> number_expression SUB number_expression .)
    OR              reduce using rule 50 (number_expression -> number_expression SUB number_expression .)
    AND             reduce using rule 50 (number_expression -> number_expression SUB number_expression .)
    MUL             shift and go to state 78
    DIV             shift and go to state 79
    POW             shift and go to state 80

  ! MUL             [ reduce using rule 50 (number_expression -> number_expression SUB number_expression .) ]
  ! DIV             [ reduce using rule 50 (number_expression -> number_expression SUB number_expression .) ]
  ! POW             [ reduce using rule 50 (number_expression -> number_expression SUB number_expression .) ]
  ! ADD             [ shift and go to state 76 ]
  ! SUB             [ shift and go to state 77 ]


state 107

    (51) number_expression -> number_expression MUL number_expression .
    (49) number_expression -> number_expression . ADD number_expression
    (50) number_expression -> number_expression . SUB number_expression
    (51) number_expression -> number_expression . MUL number_expression
    (52) number_expression -> number_expression . DIV number_expression
    (53) number_expression -> number_expression . POW number_expression

    ADD             reduce using rule 51 (number_expression -> number_expression MUL number_expression .)
    SUB             reduce using rule 51 (number_expression -> number_expression MUL number_expression .)
    MUL             reduce using rule 51 (number_expression -> number_expression MUL number_expression .)
    DIV             reduce using rule 51 (number_expression -> number_expression MUL number_expression .)
    FO              reduce using rule 51 (number_expression -> number_expression MUL number_expression .)
    FORWARD         reduce using rule 51 (number_expression -> number_expression MUL number_expression .)
    BK              reduce using rule 51 (number_expression -> number_expression MUL number_expression .)
    BACKWARD        reduce using rule 51 (number_expression -> number_expression MUL number_expression .)
    RT              reduce using rule 51 (number_expression -> number_expression MUL number_expression .)
    RIGHT           reduce using rule 51 (number_expression -> number_expression MUL number_expression .)
    LT              reduce using rule 51 (number_expression -> number_expression MUL number_expression .)
    LEFT            reduce using rule 51 (number_expression -> number_expression MUL number_expression .)
    PD              reduce using rule 51 (number_expression -> number_expression MUL number_expression .)
    PENDOWN         reduce using rule 51 (number_expression -> number_expression MUL number_expression .)
    PU              reduce using rule 51 (number_expression -> number_expression MUL number_expression .)
    PENUP           reduce using rule 51 (number_expression -> number_expression MUL number_expression .)
    WC              reduce using rule 51 (number_expression -> number_expression MUL number_expression .)
    WIPECLEAN       reduce using rule 51 (number_expression -> number_expression MUL number_expression .)
    CS              reduce using rule 51 (number_expression -> number_expression MUL number_expression .)
    CLEARSCREEN     reduce using rule 51 (number_expression -> number_expression MUL number_expression .)
    HOME            reduce using rule 51 (number_expression -> number_expression MUL number_expression .)
    HEADING         reduce using rule 51 (number_expression -> number_expression MUL number_expression .)
    TYPEIN          reduce using rule 51 (number_expression -> number_expression MUL number_expression .)
    SETXY           reduce using rule 51 (number_expression -> number_expression MUL number_expression .)
    XCOR            reduce using rule 51 (number_expression -> number_expression MUL number_expression .)
    YCOR            reduce using rule 51 (number_expression -> number_expression MUL number_expression .)
    ID              reduce using rule 51 (number_expression -> number_expression MUL number_expression .)
    TO              reduce using rule 51 (number_expression -> number_expression MUL number_expression .)
    IF              reduce using rule 51 (number_expression -> number_expression MUL number_expression .)
    WHILE           reduce using rule 51 (number_expression -> number_expression MUL number_expression .)
    WRITE           reduce using rule 51 (number_expression -> number_expression MUL number_expression .)
    $end            reduce using rule 51 (number_expression -> number_expression MUL number_expression .)
    END             reduce using rule 51 (number_expression -> number_expression MUL number_expression .)
    ELSE            reduce using rule 51 (number_expression -> number_expression MUL number_expression .)
    GT_OP           reduce using rule 51 (number_expression -> number_expression MUL number_expression .)
    LT_OP           reduce using rule 51 (number_expression -> number_expression MUL number_expression .)
    GTE_OP          reduce using rule 51 (number_expression -> number_expression MUL number_expression .)
    LTE_OP          reduce using rule 51 (number_expression -> number_expression MUL number_expression .)
    EQ_OP           reduce using rule 51 (number_expression -> number_expression MUL number_expression .)
    NE_OP           reduce using rule 51 (number_expression -> number_expression MUL number_expression .)
    COMMA           reduce using rule 51 (number_expression -> number_expression MUL number_expression .)
    CLOSE_PAR       reduce using rule 51 (number_expression -> number_expression MUL number_expression .)
    OR              reduce using rule 51 (number_expression -> number_expression MUL number_expression .)
    AND             reduce using rule 51 (number_expression -> number_expression MUL number_expression .)
    POW             shift and go to state 80

  ! POW             [ reduce using rule 51 (number_expression -> number_expression MUL number_expression .) ]
  ! ADD             [ shift and go to state 76 ]
  ! SUB             [ shift and go to state 77 ]
  ! MUL             [ shift and go to state 78 ]
  ! DIV             [ shift and go to state 79 ]


state 108

    (52) number_expression -> number_expression DIV number_expression .
    (49) number_expression -> number_expression . ADD number_expression
    (50) number_expression -> number_expression . SUB number_expression
    (51) number_expression -> number_expression . MUL number_expression
    (52) number_expression -> number_expression . DIV number_expression
    (53) number_expression -> number_expression . POW number_expression

    ADD             reduce using rule 52 (number_expression -> number_expression DIV number_expression .)
    SUB             reduce using rule 52 (number_expression -> number_expression DIV number_expression .)
    MUL             reduce using rule 52 (number_expression -> number_expression DIV number_expression .)
    DIV             reduce using rule 52 (number_expression -> number_expression DIV number_expression .)
    FO              reduce using rule 52 (number_expression -> number_expression DIV number_expression .)
    FORWARD         reduce using rule 52 (number_expression -> number_expression DIV number_expression .)
    BK              reduce using rule 52 (number_expression -> number_expression DIV number_expression .)
    BACKWARD        reduce using rule 52 (number_expression -> number_expression DIV number_expression .)
    RT              reduce using rule 52 (number_expression -> number_expression DIV number_expression .)
    RIGHT           reduce using rule 52 (number_expression -> number_expression DIV number_expression .)
    LT              reduce using rule 52 (number_expression -> number_expression DIV number_expression .)
    LEFT            reduce using rule 52 (number_expression -> number_expression DIV number_expression .)
    PD              reduce using rule 52 (number_expression -> number_expression DIV number_expression .)
    PENDOWN         reduce using rule 52 (number_expression -> number_expression DIV number_expression .)
    PU              reduce using rule 52 (number_expression -> number_expression DIV number_expression .)
    PENUP           reduce using rule 52 (number_expression -> number_expression DIV number_expression .)
    WC              reduce using rule 52 (number_expression -> number_expression DIV number_expression .)
    WIPECLEAN       reduce using rule 52 (number_expression -> number_expression DIV number_expression .)
    CS              reduce using rule 52 (number_expression -> number_expression DIV number_expression .)
    CLEARSCREEN     reduce using rule 52 (number_expression -> number_expression DIV number_expression .)
    HOME            reduce using rule 52 (number_expression -> number_expression DIV number_expression .)
    HEADING         reduce using rule 52 (number_expression -> number_expression DIV number_expression .)
    TYPEIN          reduce using rule 52 (number_expression -> number_expression DIV number_expression .)
    SETXY           reduce using rule 52 (number_expression -> number_expression DIV number_expression .)
    XCOR            reduce using rule 52 (number_expression -> number_expression DIV number_expression .)
    YCOR            reduce using rule 52 (number_expression -> number_expression DIV number_expression .)
    ID              reduce using rule 52 (number_expression -> number_expression DIV number_expression .)
    TO              reduce using rule 52 (number_expression -> number_expression DIV number_expression .)
    IF              reduce using rule 52 (number_expression -> number_expression DIV number_expression .)
    WHILE           reduce using rule 52 (number_expression -> number_expression DIV number_expression .)
    WRITE           reduce using rule 52 (number_expression -> number_expression DIV number_expression .)
    $end            reduce using rule 52 (number_expression -> number_expression DIV number_expression .)
    END             reduce using rule 52 (number_expression -> number_expression DIV number_expression .)
    ELSE            reduce using rule 52 (number_expression -> number_expression DIV number_expression .)
    GT_OP           reduce using rule 52 (number_expression -> number_expression DIV number_expression .)
    LT_OP           reduce using rule 52 (number_expression -> number_expression DIV number_expression .)
    GTE_OP          reduce using rule 52 (number_expression -> number_expression DIV number_expression .)
    LTE_OP          reduce using rule 52 (number_expression -> number_expression DIV number_expression .)
    EQ_OP           reduce using rule 52 (number_expression -> number_expression DIV number_expression .)
    NE_OP           reduce using rule 52 (number_expression -> number_expression DIV number_expression .)
    COMMA           reduce using rule 52 (number_expression -> number_expression DIV number_expression .)
    CLOSE_PAR       reduce using rule 52 (number_expression -> number_expression DIV number_expression .)
    OR              reduce using rule 52 (number_expression -> number_expression DIV number_expression .)
    AND             reduce using rule 52 (number_expression -> number_expression DIV number_expression .)
    POW             shift and go to state 80

  ! POW             [ reduce using rule 52 (number_expression -> number_expression DIV number_expression .) ]
  ! ADD             [ shift and go to state 76 ]
  ! SUB             [ shift and go to state 77 ]
  ! MUL             [ shift and go to state 78 ]
  ! DIV             [ shift and go to state 79 ]


state 109

    (53) number_expression -> number_expression POW number_expression .
    (49) number_expression -> number_expression . ADD number_expression
    (50) number_expression -> number_expression . SUB number_expression
    (51) number_expression -> number_expression . MUL number_expression
    (52) number_expression -> number_expression . DIV number_expression
    (53) number_expression -> number_expression . POW number_expression

    ADD             reduce using rule 53 (number_expression -> number_expression POW number_expression .)
    SUB             reduce using rule 53 (number_expression -> number_expression POW number_expression .)
    MUL             reduce using rule 53 (number_expression -> number_expression POW number_expression .)
    DIV             reduce using rule 53 (number_expression -> number_expression POW number_expression .)
    POW             reduce using rule 53 (number_expression -> number_expression POW number_expression .)
    FO              reduce using rule 53 (number_expression -> number_expression POW number_expression .)
    FORWARD         reduce using rule 53 (number_expression -> number_expression POW number_expression .)
    BK              reduce using rule 53 (number_expression -> number_expression POW number_expression .)
    BACKWARD        reduce using rule 53 (number_expression -> number_expression POW number_expression .)
    RT              reduce using rule 53 (number_expression -> number_expression POW number_expression .)
    RIGHT           reduce using rule 53 (number_expression -> number_expression POW number_expression .)
    LT              reduce using rule 53 (number_expression -> number_expression POW number_expression .)
    LEFT            reduce using rule 53 (number_expression -> number_expression POW number_expression .)
    PD              reduce using rule 53 (number_expression -> number_expression POW number_expression .)
    PENDOWN         reduce using rule 53 (number_expression -> number_expression POW number_expression .)
    PU              reduce using rule 53 (number_expression -> number_expression POW number_expression .)
    PENUP           reduce using rule 53 (number_expression -> number_expression POW number_expression .)
    WC              reduce using rule 53 (number_expression -> number_expression POW number_expression .)
    WIPECLEAN       reduce using rule 53 (number_expression -> number_expression POW number_expression .)
    CS              reduce using rule 53 (number_expression -> number_expression POW number_expression .)
    CLEARSCREEN     reduce using rule 53 (number_expression -> number_expression POW number_expression .)
    HOME            reduce using rule 53 (number_expression -> number_expression POW number_expression .)
    HEADING         reduce using rule 53 (number_expression -> number_expression POW number_expression .)
    TYPEIN          reduce using rule 53 (number_expression -> number_expression POW number_expression .)
    SETXY           reduce using rule 53 (number_expression -> number_expression POW number_expression .)
    XCOR            reduce using rule 53 (number_expression -> number_expression POW number_expression .)
    YCOR            reduce using rule 53 (number_expression -> number_expression POW number_expression .)
    ID              reduce using rule 53 (number_expression -> number_expression POW number_expression .)
    TO              reduce using rule 53 (number_expression -> number_expression POW number_expression .)
    IF              reduce using rule 53 (number_expression -> number_expression POW number_expression .)
    WHILE           reduce using rule 53 (number_expression -> number_expression POW number_expression .)
    WRITE           reduce using rule 53 (number_expression -> number_expression POW number_expression .)
    $end            reduce using rule 53 (number_expression -> number_expression POW number_expression .)
    END             reduce using rule 53 (number_expression -> number_expression POW number_expression .)
    ELSE            reduce using rule 53 (number_expression -> number_expression POW number_expression .)
    GT_OP           reduce using rule 53 (number_expression -> number_expression POW number_expression .)
    LT_OP           reduce using rule 53 (number_expression -> number_expression POW number_expression .)
    GTE_OP          reduce using rule 53 (number_expression -> number_expression POW number_expression .)
    LTE_OP          reduce using rule 53 (number_expression -> number_expression POW number_expression .)
    EQ_OP           reduce using rule 53 (number_expression -> number_expression POW number_expression .)
    NE_OP           reduce using rule 53 (number_expression -> number_expression POW number_expression .)
    COMMA           reduce using rule 53 (number_expression -> number_expression POW number_expression .)
    CLOSE_PAR       reduce using rule 53 (number_expression -> number_expression POW number_expression .)
    OR              reduce using rule 53 (number_expression -> number_expression POW number_expression .)
    AND             reduce using rule 53 (number_expression -> number_expression POW number_expression .)

  ! ADD             [ shift and go to state 76 ]
  ! SUB             [ shift and go to state 77 ]
  ! MUL             [ shift and go to state 78 ]
  ! DIV             [ shift and go to state 79 ]
  ! POW             [ shift and go to state 80 ]


state 110

    (54) number_expression -> OPEN_PAR number_expression CLOSE_PAR .

    ADD             reduce using rule 54 (number_expression -> OPEN_PAR number_expression CLOSE_PAR .)
    SUB             reduce using rule 54 (number_expression -> OPEN_PAR number_expression CLOSE_PAR .)
    MUL             reduce using rule 54 (number_expression -> OPEN_PAR number_expression CLOSE_PAR .)
    DIV             reduce using rule 54 (number_expression -> OPEN_PAR number_expression CLOSE_PAR .)
    POW             reduce using rule 54 (number_expression -> OPEN_PAR number_expression CLOSE_PAR .)
    FO              reduce using rule 54 (number_expression -> OPEN_PAR number_expression CLOSE_PAR .)
    FORWARD         reduce using rule 54 (number_expression -> OPEN_PAR number_expression CLOSE_PAR .)
    BK              reduce using rule 54 (number_expression -> OPEN_PAR number_expression CLOSE_PAR .)
    BACKWARD        reduce using rule 54 (number_expression -> OPEN_PAR number_expression CLOSE_PAR .)
    RT              reduce using rule 54 (number_expression -> OPEN_PAR number_expression CLOSE_PAR .)
    RIGHT           reduce using rule 54 (number_expression -> OPEN_PAR number_expression CLOSE_PAR .)
    LT              reduce using rule 54 (number_expression -> OPEN_PAR number_expression CLOSE_PAR .)
    LEFT            reduce using rule 54 (number_expression -> OPEN_PAR number_expression CLOSE_PAR .)
    PD              reduce using rule 54 (number_expression -> OPEN_PAR number_expression CLOSE_PAR .)
    PENDOWN         reduce using rule 54 (number_expression -> OPEN_PAR number_expression CLOSE_PAR .)
    PU              reduce using rule 54 (number_expression -> OPEN_PAR number_expression CLOSE_PAR .)
    PENUP           reduce using rule 54 (number_expression -> OPEN_PAR number_expression CLOSE_PAR .)
    WC              reduce using rule 54 (number_expression -> OPEN_PAR number_expression CLOSE_PAR .)
    WIPECLEAN       reduce using rule 54 (number_expression -> OPEN_PAR number_expression CLOSE_PAR .)
    CS              reduce using rule 54 (number_expression -> OPEN_PAR number_expression CLOSE_PAR .)
    CLEARSCREEN     reduce using rule 54 (number_expression -> OPEN_PAR number_expression CLOSE_PAR .)
    HOME            reduce using rule 54 (number_expression -> OPEN_PAR number_expression CLOSE_PAR .)
    HEADING         reduce using rule 54 (number_expression -> OPEN_PAR number_expression CLOSE_PAR .)
    TYPEIN          reduce using rule 54 (number_expression -> OPEN_PAR number_expression CLOSE_PAR .)
    SETXY           reduce using rule 54 (number_expression -> OPEN_PAR number_expression CLOSE_PAR .)
    XCOR            reduce using rule 54 (number_expression -> OPEN_PAR number_expression CLOSE_PAR .)
    YCOR            reduce using rule 54 (number_expression -> OPEN_PAR number_expression CLOSE_PAR .)
    ID              reduce using rule 54 (number_expression -> OPEN_PAR number_expression CLOSE_PAR .)
    TO              reduce using rule 54 (number_expression -> OPEN_PAR number_expression CLOSE_PAR .)
    IF              reduce using rule 54 (number_expression -> OPEN_PAR number_expression CLOSE_PAR .)
    WHILE           reduce using rule 54 (number_expression -> OPEN_PAR number_expression CLOSE_PAR .)
    WRITE           reduce using rule 54 (number_expression -> OPEN_PAR number_expression CLOSE_PAR .)
    $end            reduce using rule 54 (number_expression -> OPEN_PAR number_expression CLOSE_PAR .)
    END             reduce using rule 54 (number_expression -> OPEN_PAR number_expression CLOSE_PAR .)
    ELSE            reduce using rule 54 (number_expression -> OPEN_PAR number_expression CLOSE_PAR .)
    GT_OP           reduce using rule 54 (number_expression -> OPEN_PAR number_expression CLOSE_PAR .)
    LT_OP           reduce using rule 54 (number_expression -> OPEN_PAR number_expression CLOSE_PAR .)
    GTE_OP          reduce using rule 54 (number_expression -> OPEN_PAR number_expression CLOSE_PAR .)
    LTE_OP          reduce using rule 54 (number_expression -> OPEN_PAR number_expression CLOSE_PAR .)
    EQ_OP           reduce using rule 54 (number_expression -> OPEN_PAR number_expression CLOSE_PAR .)
    NE_OP           reduce using rule 54 (number_expression -> OPEN_PAR number_expression CLOSE_PAR .)
    COMMA           reduce using rule 54 (number_expression -> OPEN_PAR number_expression CLOSE_PAR .)
    CLOSE_PAR       reduce using rule 54 (number_expression -> OPEN_PAR number_expression CLOSE_PAR .)
    OR              reduce using rule 54 (number_expression -> OPEN_PAR number_expression CLOSE_PAR .)
    AND             reduce using rule 54 (number_expression -> OPEN_PAR number_expression CLOSE_PAR .)


state 111

    (64) relational_operation -> expression GT_OP expression .
    (64) relational_operation -> expression . GT_OP expression
    (65) relational_operation -> expression . LT_OP expression
    (66) relational_operation -> expression . GTE_OP expression
    (67) relational_operation -> expression . LTE_OP expression
    (68) relational_operation -> expression . EQ_OP expression
    (69) relational_operation -> expression . NE_OP expression

  ! shift/reduce conflict for GT_OP resolved as shift
  ! shift/reduce conflict for LT_OP resolved as shift
  ! shift/reduce conflict for GTE_OP resolved as shift
  ! shift/reduce conflict for LTE_OP resolved as shift
  ! shift/reduce conflict for EQ_OP resolved as shift
  ! shift/reduce conflict for NE_OP resolved as shift
    OR              reduce using rule 64 (relational_operation -> expression GT_OP expression .)
    AND             reduce using rule 64 (relational_operation -> expression GT_OP expression .)
    FO              reduce using rule 64 (relational_operation -> expression GT_OP expression .)
    FORWARD         reduce using rule 64 (relational_operation -> expression GT_OP expression .)
    BK              reduce using rule 64 (relational_operation -> expression GT_OP expression .)
    BACKWARD        reduce using rule 64 (relational_operation -> expression GT_OP expression .)
    RT              reduce using rule 64 (relational_operation -> expression GT_OP expression .)
    RIGHT           reduce using rule 64 (relational_operation -> expression GT_OP expression .)
    LT              reduce using rule 64 (relational_operation -> expression GT_OP expression .)
    LEFT            reduce using rule 64 (relational_operation -> expression GT_OP expression .)
    PD              reduce using rule 64 (relational_operation -> expression GT_OP expression .)
    PENDOWN         reduce using rule 64 (relational_operation -> expression GT_OP expression .)
    PU              reduce using rule 64 (relational_operation -> expression GT_OP expression .)
    PENUP           reduce using rule 64 (relational_operation -> expression GT_OP expression .)
    WC              reduce using rule 64 (relational_operation -> expression GT_OP expression .)
    WIPECLEAN       reduce using rule 64 (relational_operation -> expression GT_OP expression .)
    CS              reduce using rule 64 (relational_operation -> expression GT_OP expression .)
    CLEARSCREEN     reduce using rule 64 (relational_operation -> expression GT_OP expression .)
    HOME            reduce using rule 64 (relational_operation -> expression GT_OP expression .)
    HEADING         reduce using rule 64 (relational_operation -> expression GT_OP expression .)
    TYPEIN          reduce using rule 64 (relational_operation -> expression GT_OP expression .)
    SETXY           reduce using rule 64 (relational_operation -> expression GT_OP expression .)
    XCOR            reduce using rule 64 (relational_operation -> expression GT_OP expression .)
    YCOR            reduce using rule 64 (relational_operation -> expression GT_OP expression .)
    ID              reduce using rule 64 (relational_operation -> expression GT_OP expression .)
    TO              reduce using rule 64 (relational_operation -> expression GT_OP expression .)
    IF              reduce using rule 64 (relational_operation -> expression GT_OP expression .)
    WHILE           reduce using rule 64 (relational_operation -> expression GT_OP expression .)
    WRITE           reduce using rule 64 (relational_operation -> expression GT_OP expression .)
    $end            reduce using rule 64 (relational_operation -> expression GT_OP expression .)
    END             reduce using rule 64 (relational_operation -> expression GT_OP expression .)
    ELSE            reduce using rule 64 (relational_operation -> expression GT_OP expression .)
    COMMA           reduce using rule 64 (relational_operation -> expression GT_OP expression .)
    CLOSE_PAR       reduce using rule 64 (relational_operation -> expression GT_OP expression .)
    GT_OP           shift and go to state 83
    LT_OP           shift and go to state 84
    GTE_OP          shift and go to state 85
    LTE_OP          shift and go to state 86
    EQ_OP           shift and go to state 87
    NE_OP           shift and go to state 88

  ! GT_OP           [ reduce using rule 64 (relational_operation -> expression GT_OP expression .) ]
  ! LT_OP           [ reduce using rule 64 (relational_operation -> expression GT_OP expression .) ]
  ! GTE_OP          [ reduce using rule 64 (relational_operation -> expression GT_OP expression .) ]
  ! LTE_OP          [ reduce using rule 64 (relational_operation -> expression GT_OP expression .) ]
  ! EQ_OP           [ reduce using rule 64 (relational_operation -> expression GT_OP expression .) ]
  ! NE_OP           [ reduce using rule 64 (relational_operation -> expression GT_OP expression .) ]


state 112

    (65) relational_operation -> expression LT_OP expression .
    (64) relational_operation -> expression . GT_OP expression
    (65) relational_operation -> expression . LT_OP expression
    (66) relational_operation -> expression . GTE_OP expression
    (67) relational_operation -> expression . LTE_OP expression
    (68) relational_operation -> expression . EQ_OP expression
    (69) relational_operation -> expression . NE_OP expression

  ! shift/reduce conflict for GT_OP resolved as shift
  ! shift/reduce conflict for LT_OP resolved as shift
  ! shift/reduce conflict for GTE_OP resolved as shift
  ! shift/reduce conflict for LTE_OP resolved as shift
  ! shift/reduce conflict for EQ_OP resolved as shift
  ! shift/reduce conflict for NE_OP resolved as shift
    OR              reduce using rule 65 (relational_operation -> expression LT_OP expression .)
    AND             reduce using rule 65 (relational_operation -> expression LT_OP expression .)
    FO              reduce using rule 65 (relational_operation -> expression LT_OP expression .)
    FORWARD         reduce using rule 65 (relational_operation -> expression LT_OP expression .)
    BK              reduce using rule 65 (relational_operation -> expression LT_OP expression .)
    BACKWARD        reduce using rule 65 (relational_operation -> expression LT_OP expression .)
    RT              reduce using rule 65 (relational_operation -> expression LT_OP expression .)
    RIGHT           reduce using rule 65 (relational_operation -> expression LT_OP expression .)
    LT              reduce using rule 65 (relational_operation -> expression LT_OP expression .)
    LEFT            reduce using rule 65 (relational_operation -> expression LT_OP expression .)
    PD              reduce using rule 65 (relational_operation -> expression LT_OP expression .)
    PENDOWN         reduce using rule 65 (relational_operation -> expression LT_OP expression .)
    PU              reduce using rule 65 (relational_operation -> expression LT_OP expression .)
    PENUP           reduce using rule 65 (relational_operation -> expression LT_OP expression .)
    WC              reduce using rule 65 (relational_operation -> expression LT_OP expression .)
    WIPECLEAN       reduce using rule 65 (relational_operation -> expression LT_OP expression .)
    CS              reduce using rule 65 (relational_operation -> expression LT_OP expression .)
    CLEARSCREEN     reduce using rule 65 (relational_operation -> expression LT_OP expression .)
    HOME            reduce using rule 65 (relational_operation -> expression LT_OP expression .)
    HEADING         reduce using rule 65 (relational_operation -> expression LT_OP expression .)
    TYPEIN          reduce using rule 65 (relational_operation -> expression LT_OP expression .)
    SETXY           reduce using rule 65 (relational_operation -> expression LT_OP expression .)
    XCOR            reduce using rule 65 (relational_operation -> expression LT_OP expression .)
    YCOR            reduce using rule 65 (relational_operation -> expression LT_OP expression .)
    ID              reduce using rule 65 (relational_operation -> expression LT_OP expression .)
    TO              reduce using rule 65 (relational_operation -> expression LT_OP expression .)
    IF              reduce using rule 65 (relational_operation -> expression LT_OP expression .)
    WHILE           reduce using rule 65 (relational_operation -> expression LT_OP expression .)
    WRITE           reduce using rule 65 (relational_operation -> expression LT_OP expression .)
    $end            reduce using rule 65 (relational_operation -> expression LT_OP expression .)
    END             reduce using rule 65 (relational_operation -> expression LT_OP expression .)
    ELSE            reduce using rule 65 (relational_operation -> expression LT_OP expression .)
    COMMA           reduce using rule 65 (relational_operation -> expression LT_OP expression .)
    CLOSE_PAR       reduce using rule 65 (relational_operation -> expression LT_OP expression .)
    GT_OP           shift and go to state 83
    LT_OP           shift and go to state 84
    GTE_OP          shift and go to state 85
    LTE_OP          shift and go to state 86
    EQ_OP           shift and go to state 87
    NE_OP           shift and go to state 88

  ! GT_OP           [ reduce using rule 65 (relational_operation -> expression LT_OP expression .) ]
  ! LT_OP           [ reduce using rule 65 (relational_operation -> expression LT_OP expression .) ]
  ! GTE_OP          [ reduce using rule 65 (relational_operation -> expression LT_OP expression .) ]
  ! LTE_OP          [ reduce using rule 65 (relational_operation -> expression LT_OP expression .) ]
  ! EQ_OP           [ reduce using rule 65 (relational_operation -> expression LT_OP expression .) ]
  ! NE_OP           [ reduce using rule 65 (relational_operation -> expression LT_OP expression .) ]


state 113

    (66) relational_operation -> expression GTE_OP expression .
    (64) relational_operation -> expression . GT_OP expression
    (65) relational_operation -> expression . LT_OP expression
    (66) relational_operation -> expression . GTE_OP expression
    (67) relational_operation -> expression . LTE_OP expression
    (68) relational_operation -> expression . EQ_OP expression
    (69) relational_operation -> expression . NE_OP expression

  ! shift/reduce conflict for GT_OP resolved as shift
  ! shift/reduce conflict for LT_OP resolved as shift
  ! shift/reduce conflict for GTE_OP resolved as shift
  ! shift/reduce conflict for LTE_OP resolved as shift
  ! shift/reduce conflict for EQ_OP resolved as shift
  ! shift/reduce conflict for NE_OP resolved as shift
    OR              reduce using rule 66 (relational_operation -> expression GTE_OP expression .)
    AND             reduce using rule 66 (relational_operation -> expression GTE_OP expression .)
    FO              reduce using rule 66 (relational_operation -> expression GTE_OP expression .)
    FORWARD         reduce using rule 66 (relational_operation -> expression GTE_OP expression .)
    BK              reduce using rule 66 (relational_operation -> expression GTE_OP expression .)
    BACKWARD        reduce using rule 66 (relational_operation -> expression GTE_OP expression .)
    RT              reduce using rule 66 (relational_operation -> expression GTE_OP expression .)
    RIGHT           reduce using rule 66 (relational_operation -> expression GTE_OP expression .)
    LT              reduce using rule 66 (relational_operation -> expression GTE_OP expression .)
    LEFT            reduce using rule 66 (relational_operation -> expression GTE_OP expression .)
    PD              reduce using rule 66 (relational_operation -> expression GTE_OP expression .)
    PENDOWN         reduce using rule 66 (relational_operation -> expression GTE_OP expression .)
    PU              reduce using rule 66 (relational_operation -> expression GTE_OP expression .)
    PENUP           reduce using rule 66 (relational_operation -> expression GTE_OP expression .)
    WC              reduce using rule 66 (relational_operation -> expression GTE_OP expression .)
    WIPECLEAN       reduce using rule 66 (relational_operation -> expression GTE_OP expression .)
    CS              reduce using rule 66 (relational_operation -> expression GTE_OP expression .)
    CLEARSCREEN     reduce using rule 66 (relational_operation -> expression GTE_OP expression .)
    HOME            reduce using rule 66 (relational_operation -> expression GTE_OP expression .)
    HEADING         reduce using rule 66 (relational_operation -> expression GTE_OP expression .)
    TYPEIN          reduce using rule 66 (relational_operation -> expression GTE_OP expression .)
    SETXY           reduce using rule 66 (relational_operation -> expression GTE_OP expression .)
    XCOR            reduce using rule 66 (relational_operation -> expression GTE_OP expression .)
    YCOR            reduce using rule 66 (relational_operation -> expression GTE_OP expression .)
    ID              reduce using rule 66 (relational_operation -> expression GTE_OP expression .)
    TO              reduce using rule 66 (relational_operation -> expression GTE_OP expression .)
    IF              reduce using rule 66 (relational_operation -> expression GTE_OP expression .)
    WHILE           reduce using rule 66 (relational_operation -> expression GTE_OP expression .)
    WRITE           reduce using rule 66 (relational_operation -> expression GTE_OP expression .)
    $end            reduce using rule 66 (relational_operation -> expression GTE_OP expression .)
    END             reduce using rule 66 (relational_operation -> expression GTE_OP expression .)
    ELSE            reduce using rule 66 (relational_operation -> expression GTE_OP expression .)
    COMMA           reduce using rule 66 (relational_operation -> expression GTE_OP expression .)
    CLOSE_PAR       reduce using rule 66 (relational_operation -> expression GTE_OP expression .)
    GT_OP           shift and go to state 83
    LT_OP           shift and go to state 84
    GTE_OP          shift and go to state 85
    LTE_OP          shift and go to state 86
    EQ_OP           shift and go to state 87
    NE_OP           shift and go to state 88

  ! GT_OP           [ reduce using rule 66 (relational_operation -> expression GTE_OP expression .) ]
  ! LT_OP           [ reduce using rule 66 (relational_operation -> expression GTE_OP expression .) ]
  ! GTE_OP          [ reduce using rule 66 (relational_operation -> expression GTE_OP expression .) ]
  ! LTE_OP          [ reduce using rule 66 (relational_operation -> expression GTE_OP expression .) ]
  ! EQ_OP           [ reduce using rule 66 (relational_operation -> expression GTE_OP expression .) ]
  ! NE_OP           [ reduce using rule 66 (relational_operation -> expression GTE_OP expression .) ]


state 114

    (67) relational_operation -> expression LTE_OP expression .
    (64) relational_operation -> expression . GT_OP expression
    (65) relational_operation -> expression . LT_OP expression
    (66) relational_operation -> expression . GTE_OP expression
    (67) relational_operation -> expression . LTE_OP expression
    (68) relational_operation -> expression . EQ_OP expression
    (69) relational_operation -> expression . NE_OP expression

  ! shift/reduce conflict for GT_OP resolved as shift
  ! shift/reduce conflict for LT_OP resolved as shift
  ! shift/reduce conflict for GTE_OP resolved as shift
  ! shift/reduce conflict for LTE_OP resolved as shift
  ! shift/reduce conflict for EQ_OP resolved as shift
  ! shift/reduce conflict for NE_OP resolved as shift
    OR              reduce using rule 67 (relational_operation -> expression LTE_OP expression .)
    AND             reduce using rule 67 (relational_operation -> expression LTE_OP expression .)
    FO              reduce using rule 67 (relational_operation -> expression LTE_OP expression .)
    FORWARD         reduce using rule 67 (relational_operation -> expression LTE_OP expression .)
    BK              reduce using rule 67 (relational_operation -> expression LTE_OP expression .)
    BACKWARD        reduce using rule 67 (relational_operation -> expression LTE_OP expression .)
    RT              reduce using rule 67 (relational_operation -> expression LTE_OP expression .)
    RIGHT           reduce using rule 67 (relational_operation -> expression LTE_OP expression .)
    LT              reduce using rule 67 (relational_operation -> expression LTE_OP expression .)
    LEFT            reduce using rule 67 (relational_operation -> expression LTE_OP expression .)
    PD              reduce using rule 67 (relational_operation -> expression LTE_OP expression .)
    PENDOWN         reduce using rule 67 (relational_operation -> expression LTE_OP expression .)
    PU              reduce using rule 67 (relational_operation -> expression LTE_OP expression .)
    PENUP           reduce using rule 67 (relational_operation -> expression LTE_OP expression .)
    WC              reduce using rule 67 (relational_operation -> expression LTE_OP expression .)
    WIPECLEAN       reduce using rule 67 (relational_operation -> expression LTE_OP expression .)
    CS              reduce using rule 67 (relational_operation -> expression LTE_OP expression .)
    CLEARSCREEN     reduce using rule 67 (relational_operation -> expression LTE_OP expression .)
    HOME            reduce using rule 67 (relational_operation -> expression LTE_OP expression .)
    HEADING         reduce using rule 67 (relational_operation -> expression LTE_OP expression .)
    TYPEIN          reduce using rule 67 (relational_operation -> expression LTE_OP expression .)
    SETXY           reduce using rule 67 (relational_operation -> expression LTE_OP expression .)
    XCOR            reduce using rule 67 (relational_operation -> expression LTE_OP expression .)
    YCOR            reduce using rule 67 (relational_operation -> expression LTE_OP expression .)
    ID              reduce using rule 67 (relational_operation -> expression LTE_OP expression .)
    TO              reduce using rule 67 (relational_operation -> expression LTE_OP expression .)
    IF              reduce using rule 67 (relational_operation -> expression LTE_OP expression .)
    WHILE           reduce using rule 67 (relational_operation -> expression LTE_OP expression .)
    WRITE           reduce using rule 67 (relational_operation -> expression LTE_OP expression .)
    $end            reduce using rule 67 (relational_operation -> expression LTE_OP expression .)
    END             reduce using rule 67 (relational_operation -> expression LTE_OP expression .)
    ELSE            reduce using rule 67 (relational_operation -> expression LTE_OP expression .)
    COMMA           reduce using rule 67 (relational_operation -> expression LTE_OP expression .)
    CLOSE_PAR       reduce using rule 67 (relational_operation -> expression LTE_OP expression .)
    GT_OP           shift and go to state 83
    LT_OP           shift and go to state 84
    GTE_OP          shift and go to state 85
    LTE_OP          shift and go to state 86
    EQ_OP           shift and go to state 87
    NE_OP           shift and go to state 88

  ! GT_OP           [ reduce using rule 67 (relational_operation -> expression LTE_OP expression .) ]
  ! LT_OP           [ reduce using rule 67 (relational_operation -> expression LTE_OP expression .) ]
  ! GTE_OP          [ reduce using rule 67 (relational_operation -> expression LTE_OP expression .) ]
  ! LTE_OP          [ reduce using rule 67 (relational_operation -> expression LTE_OP expression .) ]
  ! EQ_OP           [ reduce using rule 67 (relational_operation -> expression LTE_OP expression .) ]
  ! NE_OP           [ reduce using rule 67 (relational_operation -> expression LTE_OP expression .) ]


state 115

    (68) relational_operation -> expression EQ_OP expression .
    (64) relational_operation -> expression . GT_OP expression
    (65) relational_operation -> expression . LT_OP expression
    (66) relational_operation -> expression . GTE_OP expression
    (67) relational_operation -> expression . LTE_OP expression
    (68) relational_operation -> expression . EQ_OP expression
    (69) relational_operation -> expression . NE_OP expression

  ! shift/reduce conflict for GT_OP resolved as shift
  ! shift/reduce conflict for LT_OP resolved as shift
  ! shift/reduce conflict for GTE_OP resolved as shift
  ! shift/reduce conflict for LTE_OP resolved as shift
  ! shift/reduce conflict for EQ_OP resolved as shift
  ! shift/reduce conflict for NE_OP resolved as shift
    OR              reduce using rule 68 (relational_operation -> expression EQ_OP expression .)
    AND             reduce using rule 68 (relational_operation -> expression EQ_OP expression .)
    FO              reduce using rule 68 (relational_operation -> expression EQ_OP expression .)
    FORWARD         reduce using rule 68 (relational_operation -> expression EQ_OP expression .)
    BK              reduce using rule 68 (relational_operation -> expression EQ_OP expression .)
    BACKWARD        reduce using rule 68 (relational_operation -> expression EQ_OP expression .)
    RT              reduce using rule 68 (relational_operation -> expression EQ_OP expression .)
    RIGHT           reduce using rule 68 (relational_operation -> expression EQ_OP expression .)
    LT              reduce using rule 68 (relational_operation -> expression EQ_OP expression .)
    LEFT            reduce using rule 68 (relational_operation -> expression EQ_OP expression .)
    PD              reduce using rule 68 (relational_operation -> expression EQ_OP expression .)
    PENDOWN         reduce using rule 68 (relational_operation -> expression EQ_OP expression .)
    PU              reduce using rule 68 (relational_operation -> expression EQ_OP expression .)
    PENUP           reduce using rule 68 (relational_operation -> expression EQ_OP expression .)
    WC              reduce using rule 68 (relational_operation -> expression EQ_OP expression .)
    WIPECLEAN       reduce using rule 68 (relational_operation -> expression EQ_OP expression .)
    CS              reduce using rule 68 (relational_operation -> expression EQ_OP expression .)
    CLEARSCREEN     reduce using rule 68 (relational_operation -> expression EQ_OP expression .)
    HOME            reduce using rule 68 (relational_operation -> expression EQ_OP expression .)
    HEADING         reduce using rule 68 (relational_operation -> expression EQ_OP expression .)
    TYPEIN          reduce using rule 68 (relational_operation -> expression EQ_OP expression .)
    SETXY           reduce using rule 68 (relational_operation -> expression EQ_OP expression .)
    XCOR            reduce using rule 68 (relational_operation -> expression EQ_OP expression .)
    YCOR            reduce using rule 68 (relational_operation -> expression EQ_OP expression .)
    ID              reduce using rule 68 (relational_operation -> expression EQ_OP expression .)
    TO              reduce using rule 68 (relational_operation -> expression EQ_OP expression .)
    IF              reduce using rule 68 (relational_operation -> expression EQ_OP expression .)
    WHILE           reduce using rule 68 (relational_operation -> expression EQ_OP expression .)
    WRITE           reduce using rule 68 (relational_operation -> expression EQ_OP expression .)
    $end            reduce using rule 68 (relational_operation -> expression EQ_OP expression .)
    END             reduce using rule 68 (relational_operation -> expression EQ_OP expression .)
    ELSE            reduce using rule 68 (relational_operation -> expression EQ_OP expression .)
    COMMA           reduce using rule 68 (relational_operation -> expression EQ_OP expression .)
    CLOSE_PAR       reduce using rule 68 (relational_operation -> expression EQ_OP expression .)
    GT_OP           shift and go to state 83
    LT_OP           shift and go to state 84
    GTE_OP          shift and go to state 85
    LTE_OP          shift and go to state 86
    EQ_OP           shift and go to state 87
    NE_OP           shift and go to state 88

  ! GT_OP           [ reduce using rule 68 (relational_operation -> expression EQ_OP expression .) ]
  ! LT_OP           [ reduce using rule 68 (relational_operation -> expression EQ_OP expression .) ]
  ! GTE_OP          [ reduce using rule 68 (relational_operation -> expression EQ_OP expression .) ]
  ! LTE_OP          [ reduce using rule 68 (relational_operation -> expression EQ_OP expression .) ]
  ! EQ_OP           [ reduce using rule 68 (relational_operation -> expression EQ_OP expression .) ]
  ! NE_OP           [ reduce using rule 68 (relational_operation -> expression EQ_OP expression .) ]


state 116

    (69) relational_operation -> expression NE_OP expression .
    (64) relational_operation -> expression . GT_OP expression
    (65) relational_operation -> expression . LT_OP expression
    (66) relational_operation -> expression . GTE_OP expression
    (67) relational_operation -> expression . LTE_OP expression
    (68) relational_operation -> expression . EQ_OP expression
    (69) relational_operation -> expression . NE_OP expression

  ! shift/reduce conflict for GT_OP resolved as shift
  ! shift/reduce conflict for LT_OP resolved as shift
  ! shift/reduce conflict for GTE_OP resolved as shift
  ! shift/reduce conflict for LTE_OP resolved as shift
  ! shift/reduce conflict for EQ_OP resolved as shift
  ! shift/reduce conflict for NE_OP resolved as shift
    OR              reduce using rule 69 (relational_operation -> expression NE_OP expression .)
    AND             reduce using rule 69 (relational_operation -> expression NE_OP expression .)
    FO              reduce using rule 69 (relational_operation -> expression NE_OP expression .)
    FORWARD         reduce using rule 69 (relational_operation -> expression NE_OP expression .)
    BK              reduce using rule 69 (relational_operation -> expression NE_OP expression .)
    BACKWARD        reduce using rule 69 (relational_operation -> expression NE_OP expression .)
    RT              reduce using rule 69 (relational_operation -> expression NE_OP expression .)
    RIGHT           reduce using rule 69 (relational_operation -> expression NE_OP expression .)
    LT              reduce using rule 69 (relational_operation -> expression NE_OP expression .)
    LEFT            reduce using rule 69 (relational_operation -> expression NE_OP expression .)
    PD              reduce using rule 69 (relational_operation -> expression NE_OP expression .)
    PENDOWN         reduce using rule 69 (relational_operation -> expression NE_OP expression .)
    PU              reduce using rule 69 (relational_operation -> expression NE_OP expression .)
    PENUP           reduce using rule 69 (relational_operation -> expression NE_OP expression .)
    WC              reduce using rule 69 (relational_operation -> expression NE_OP expression .)
    WIPECLEAN       reduce using rule 69 (relational_operation -> expression NE_OP expression .)
    CS              reduce using rule 69 (relational_operation -> expression NE_OP expression .)
    CLEARSCREEN     reduce using rule 69 (relational_operation -> expression NE_OP expression .)
    HOME            reduce using rule 69 (relational_operation -> expression NE_OP expression .)
    HEADING         reduce using rule 69 (relational_operation -> expression NE_OP expression .)
    TYPEIN          reduce using rule 69 (relational_operation -> expression NE_OP expression .)
    SETXY           reduce using rule 69 (relational_operation -> expression NE_OP expression .)
    XCOR            reduce using rule 69 (relational_operation -> expression NE_OP expression .)
    YCOR            reduce using rule 69 (relational_operation -> expression NE_OP expression .)
    ID              reduce using rule 69 (relational_operation -> expression NE_OP expression .)
    TO              reduce using rule 69 (relational_operation -> expression NE_OP expression .)
    IF              reduce using rule 69 (relational_operation -> expression NE_OP expression .)
    WHILE           reduce using rule 69 (relational_operation -> expression NE_OP expression .)
    WRITE           reduce using rule 69 (relational_operation -> expression NE_OP expression .)
    $end            reduce using rule 69 (relational_operation -> expression NE_OP expression .)
    END             reduce using rule 69 (relational_operation -> expression NE_OP expression .)
    ELSE            reduce using rule 69 (relational_operation -> expression NE_OP expression .)
    COMMA           reduce using rule 69 (relational_operation -> expression NE_OP expression .)
    CLOSE_PAR       reduce using rule 69 (relational_operation -> expression NE_OP expression .)
    GT_OP           shift and go to state 83
    LT_OP           shift and go to state 84
    GTE_OP          shift and go to state 85
    LTE_OP          shift and go to state 86
    EQ_OP           shift and go to state 87
    NE_OP           shift and go to state 88

  ! GT_OP           [ reduce using rule 69 (relational_operation -> expression NE_OP expression .) ]
  ! LT_OP           [ reduce using rule 69 (relational_operation -> expression NE_OP expression .) ]
  ! GTE_OP          [ reduce using rule 69 (relational_operation -> expression NE_OP expression .) ]
  ! LTE_OP          [ reduce using rule 69 (relational_operation -> expression NE_OP expression .) ]
  ! EQ_OP           [ reduce using rule 69 (relational_operation -> expression NE_OP expression .) ]
  ! NE_OP           [ reduce using rule 69 (relational_operation -> expression NE_OP expression .) ]


state 117

    (44) expression -> OPEN_PAR expression CLOSE_PAR .

    GT_OP           reduce using rule 44 (expression -> OPEN_PAR expression CLOSE_PAR .)
    LT_OP           reduce using rule 44 (expression -> OPEN_PAR expression CLOSE_PAR .)
    GTE_OP          reduce using rule 44 (expression -> OPEN_PAR expression CLOSE_PAR .)
    LTE_OP          reduce using rule 44 (expression -> OPEN_PAR expression CLOSE_PAR .)
    EQ_OP           reduce using rule 44 (expression -> OPEN_PAR expression CLOSE_PAR .)
    NE_OP           reduce using rule 44 (expression -> OPEN_PAR expression CLOSE_PAR .)
    FO              reduce using rule 44 (expression -> OPEN_PAR expression CLOSE_PAR .)
    FORWARD         reduce using rule 44 (expression -> OPEN_PAR expression CLOSE_PAR .)
    BK              reduce using rule 44 (expression -> OPEN_PAR expression CLOSE_PAR .)
    BACKWARD        reduce using rule 44 (expression -> OPEN_PAR expression CLOSE_PAR .)
    RT              reduce using rule 44 (expression -> OPEN_PAR expression CLOSE_PAR .)
    RIGHT           reduce using rule 44 (expression -> OPEN_PAR expression CLOSE_PAR .)
    LT              reduce using rule 44 (expression -> OPEN_PAR expression CLOSE_PAR .)
    LEFT            reduce using rule 44 (expression -> OPEN_PAR expression CLOSE_PAR .)
    PD              reduce using rule 44 (expression -> OPEN_PAR expression CLOSE_PAR .)
    PENDOWN         reduce using rule 44 (expression -> OPEN_PAR expression CLOSE_PAR .)
    PU              reduce using rule 44 (expression -> OPEN_PAR expression CLOSE_PAR .)
    PENUP           reduce using rule 44 (expression -> OPEN_PAR expression CLOSE_PAR .)
    WC              reduce using rule 44 (expression -> OPEN_PAR expression CLOSE_PAR .)
    WIPECLEAN       reduce using rule 44 (expression -> OPEN_PAR expression CLOSE_PAR .)
    CS              reduce using rule 44 (expression -> OPEN_PAR expression CLOSE_PAR .)
    CLEARSCREEN     reduce using rule 44 (expression -> OPEN_PAR expression CLOSE_PAR .)
    HOME            reduce using rule 44 (expression -> OPEN_PAR expression CLOSE_PAR .)
    HEADING         reduce using rule 44 (expression -> OPEN_PAR expression CLOSE_PAR .)
    TYPEIN          reduce using rule 44 (expression -> OPEN_PAR expression CLOSE_PAR .)
    SETXY           reduce using rule 44 (expression -> OPEN_PAR expression CLOSE_PAR .)
    XCOR            reduce using rule 44 (expression -> OPEN_PAR expression CLOSE_PAR .)
    YCOR            reduce using rule 44 (expression -> OPEN_PAR expression CLOSE_PAR .)
    ID              reduce using rule 44 (expression -> OPEN_PAR expression CLOSE_PAR .)
    TO              reduce using rule 44 (expression -> OPEN_PAR expression CLOSE_PAR .)
    IF              reduce using rule 44 (expression -> OPEN_PAR expression CLOSE_PAR .)
    WHILE           reduce using rule 44 (expression -> OPEN_PAR expression CLOSE_PAR .)
    WRITE           reduce using rule 44 (expression -> OPEN_PAR expression CLOSE_PAR .)
    $end            reduce using rule 44 (expression -> OPEN_PAR expression CLOSE_PAR .)
    END             reduce using rule 44 (expression -> OPEN_PAR expression CLOSE_PAR .)
    ELSE            reduce using rule 44 (expression -> OPEN_PAR expression CLOSE_PAR .)
    COMMA           reduce using rule 44 (expression -> OPEN_PAR expression CLOSE_PAR .)
    CLOSE_PAR       reduce using rule 44 (expression -> OPEN_PAR expression CLOSE_PAR .)
    OR              reduce using rule 44 (expression -> OPEN_PAR expression CLOSE_PAR .)
    AND             reduce using rule 44 (expression -> OPEN_PAR expression CLOSE_PAR .)


state 118

    (58) boolean_expression -> boolean_expression OR boolean_expression .
    (58) boolean_expression -> boolean_expression . OR boolean_expression
    (59) boolean_expression -> boolean_expression . AND boolean_expression
    (45) expression -> boolean_expression .

  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! reduce/reduce conflict for GT_OP resolved using rule 45 (expression -> boolean_expression .)
  ! reduce/reduce conflict for LT_OP resolved using rule 45 (expression -> boolean_expression .)
  ! reduce/reduce conflict for GTE_OP resolved using rule 45 (expression -> boolean_expression .)
  ! reduce/reduce conflict for LTE_OP resolved using rule 45 (expression -> boolean_expression .)
  ! reduce/reduce conflict for EQ_OP resolved using rule 45 (expression -> boolean_expression .)
  ! reduce/reduce conflict for NE_OP resolved using rule 45 (expression -> boolean_expression .)
    FO              reduce using rule 58 (boolean_expression -> boolean_expression OR boolean_expression .)
    FORWARD         reduce using rule 58 (boolean_expression -> boolean_expression OR boolean_expression .)
    BK              reduce using rule 58 (boolean_expression -> boolean_expression OR boolean_expression .)
    BACKWARD        reduce using rule 58 (boolean_expression -> boolean_expression OR boolean_expression .)
    RT              reduce using rule 58 (boolean_expression -> boolean_expression OR boolean_expression .)
    RIGHT           reduce using rule 58 (boolean_expression -> boolean_expression OR boolean_expression .)
    LT              reduce using rule 58 (boolean_expression -> boolean_expression OR boolean_expression .)
    LEFT            reduce using rule 58 (boolean_expression -> boolean_expression OR boolean_expression .)
    PD              reduce using rule 58 (boolean_expression -> boolean_expression OR boolean_expression .)
    PENDOWN         reduce using rule 58 (boolean_expression -> boolean_expression OR boolean_expression .)
    PU              reduce using rule 58 (boolean_expression -> boolean_expression OR boolean_expression .)
    PENUP           reduce using rule 58 (boolean_expression -> boolean_expression OR boolean_expression .)
    WC              reduce using rule 58 (boolean_expression -> boolean_expression OR boolean_expression .)
    WIPECLEAN       reduce using rule 58 (boolean_expression -> boolean_expression OR boolean_expression .)
    CS              reduce using rule 58 (boolean_expression -> boolean_expression OR boolean_expression .)
    CLEARSCREEN     reduce using rule 58 (boolean_expression -> boolean_expression OR boolean_expression .)
    HOME            reduce using rule 58 (boolean_expression -> boolean_expression OR boolean_expression .)
    HEADING         reduce using rule 58 (boolean_expression -> boolean_expression OR boolean_expression .)
    TYPEIN          reduce using rule 58 (boolean_expression -> boolean_expression OR boolean_expression .)
    SETXY           reduce using rule 58 (boolean_expression -> boolean_expression OR boolean_expression .)
    XCOR            reduce using rule 58 (boolean_expression -> boolean_expression OR boolean_expression .)
    YCOR            reduce using rule 58 (boolean_expression -> boolean_expression OR boolean_expression .)
    ID              reduce using rule 58 (boolean_expression -> boolean_expression OR boolean_expression .)
    TO              reduce using rule 58 (boolean_expression -> boolean_expression OR boolean_expression .)
    IF              reduce using rule 58 (boolean_expression -> boolean_expression OR boolean_expression .)
    WHILE           reduce using rule 58 (boolean_expression -> boolean_expression OR boolean_expression .)
    WRITE           reduce using rule 58 (boolean_expression -> boolean_expression OR boolean_expression .)
    $end            reduce using rule 58 (boolean_expression -> boolean_expression OR boolean_expression .)
    END             reduce using rule 58 (boolean_expression -> boolean_expression OR boolean_expression .)
    ELSE            reduce using rule 58 (boolean_expression -> boolean_expression OR boolean_expression .)
    COMMA           reduce using rule 58 (boolean_expression -> boolean_expression OR boolean_expression .)
    CLOSE_PAR       reduce using rule 58 (boolean_expression -> boolean_expression OR boolean_expression .)
    OR              shift and go to state 92
    AND             shift and go to state 93
    GT_OP           reduce using rule 45 (expression -> boolean_expression .)
    LT_OP           reduce using rule 45 (expression -> boolean_expression .)
    GTE_OP          reduce using rule 45 (expression -> boolean_expression .)
    LTE_OP          reduce using rule 45 (expression -> boolean_expression .)
    EQ_OP           reduce using rule 45 (expression -> boolean_expression .)
    NE_OP           reduce using rule 45 (expression -> boolean_expression .)

  ! OR              [ reduce using rule 58 (boolean_expression -> boolean_expression OR boolean_expression .) ]
  ! AND             [ reduce using rule 58 (boolean_expression -> boolean_expression OR boolean_expression .) ]
  ! GT_OP           [ reduce using rule 58 (boolean_expression -> boolean_expression OR boolean_expression .) ]
  ! LT_OP           [ reduce using rule 58 (boolean_expression -> boolean_expression OR boolean_expression .) ]
  ! GTE_OP          [ reduce using rule 58 (boolean_expression -> boolean_expression OR boolean_expression .) ]
  ! LTE_OP          [ reduce using rule 58 (boolean_expression -> boolean_expression OR boolean_expression .) ]
  ! EQ_OP           [ reduce using rule 58 (boolean_expression -> boolean_expression OR boolean_expression .) ]
  ! NE_OP           [ reduce using rule 58 (boolean_expression -> boolean_expression OR boolean_expression .) ]


state 119

    (59) boolean_expression -> boolean_expression AND boolean_expression .
    (58) boolean_expression -> boolean_expression . OR boolean_expression
    (59) boolean_expression -> boolean_expression . AND boolean_expression
    (45) expression -> boolean_expression .

  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! reduce/reduce conflict for GT_OP resolved using rule 45 (expression -> boolean_expression .)
  ! reduce/reduce conflict for LT_OP resolved using rule 45 (expression -> boolean_expression .)
  ! reduce/reduce conflict for GTE_OP resolved using rule 45 (expression -> boolean_expression .)
  ! reduce/reduce conflict for LTE_OP resolved using rule 45 (expression -> boolean_expression .)
  ! reduce/reduce conflict for EQ_OP resolved using rule 45 (expression -> boolean_expression .)
  ! reduce/reduce conflict for NE_OP resolved using rule 45 (expression -> boolean_expression .)
    FO              reduce using rule 59 (boolean_expression -> boolean_expression AND boolean_expression .)
    FORWARD         reduce using rule 59 (boolean_expression -> boolean_expression AND boolean_expression .)
    BK              reduce using rule 59 (boolean_expression -> boolean_expression AND boolean_expression .)
    BACKWARD        reduce using rule 59 (boolean_expression -> boolean_expression AND boolean_expression .)
    RT              reduce using rule 59 (boolean_expression -> boolean_expression AND boolean_expression .)
    RIGHT           reduce using rule 59 (boolean_expression -> boolean_expression AND boolean_expression .)
    LT              reduce using rule 59 (boolean_expression -> boolean_expression AND boolean_expression .)
    LEFT            reduce using rule 59 (boolean_expression -> boolean_expression AND boolean_expression .)
    PD              reduce using rule 59 (boolean_expression -> boolean_expression AND boolean_expression .)
    PENDOWN         reduce using rule 59 (boolean_expression -> boolean_expression AND boolean_expression .)
    PU              reduce using rule 59 (boolean_expression -> boolean_expression AND boolean_expression .)
    PENUP           reduce using rule 59 (boolean_expression -> boolean_expression AND boolean_expression .)
    WC              reduce using rule 59 (boolean_expression -> boolean_expression AND boolean_expression .)
    WIPECLEAN       reduce using rule 59 (boolean_expression -> boolean_expression AND boolean_expression .)
    CS              reduce using rule 59 (boolean_expression -> boolean_expression AND boolean_expression .)
    CLEARSCREEN     reduce using rule 59 (boolean_expression -> boolean_expression AND boolean_expression .)
    HOME            reduce using rule 59 (boolean_expression -> boolean_expression AND boolean_expression .)
    HEADING         reduce using rule 59 (boolean_expression -> boolean_expression AND boolean_expression .)
    TYPEIN          reduce using rule 59 (boolean_expression -> boolean_expression AND boolean_expression .)
    SETXY           reduce using rule 59 (boolean_expression -> boolean_expression AND boolean_expression .)
    XCOR            reduce using rule 59 (boolean_expression -> boolean_expression AND boolean_expression .)
    YCOR            reduce using rule 59 (boolean_expression -> boolean_expression AND boolean_expression .)
    ID              reduce using rule 59 (boolean_expression -> boolean_expression AND boolean_expression .)
    TO              reduce using rule 59 (boolean_expression -> boolean_expression AND boolean_expression .)
    IF              reduce using rule 59 (boolean_expression -> boolean_expression AND boolean_expression .)
    WHILE           reduce using rule 59 (boolean_expression -> boolean_expression AND boolean_expression .)
    WRITE           reduce using rule 59 (boolean_expression -> boolean_expression AND boolean_expression .)
    $end            reduce using rule 59 (boolean_expression -> boolean_expression AND boolean_expression .)
    END             reduce using rule 59 (boolean_expression -> boolean_expression AND boolean_expression .)
    ELSE            reduce using rule 59 (boolean_expression -> boolean_expression AND boolean_expression .)
    COMMA           reduce using rule 59 (boolean_expression -> boolean_expression AND boolean_expression .)
    CLOSE_PAR       reduce using rule 59 (boolean_expression -> boolean_expression AND boolean_expression .)
    OR              shift and go to state 92
    AND             shift and go to state 93
    GT_OP           reduce using rule 45 (expression -> boolean_expression .)
    LT_OP           reduce using rule 45 (expression -> boolean_expression .)
    GTE_OP          reduce using rule 45 (expression -> boolean_expression .)
    LTE_OP          reduce using rule 45 (expression -> boolean_expression .)
    EQ_OP           reduce using rule 45 (expression -> boolean_expression .)
    NE_OP           reduce using rule 45 (expression -> boolean_expression .)

  ! OR              [ reduce using rule 59 (boolean_expression -> boolean_expression AND boolean_expression .) ]
  ! AND             [ reduce using rule 59 (boolean_expression -> boolean_expression AND boolean_expression .) ]
  ! GT_OP           [ reduce using rule 59 (boolean_expression -> boolean_expression AND boolean_expression .) ]
  ! LT_OP           [ reduce using rule 59 (boolean_expression -> boolean_expression AND boolean_expression .) ]
  ! GTE_OP          [ reduce using rule 59 (boolean_expression -> boolean_expression AND boolean_expression .) ]
  ! LTE_OP          [ reduce using rule 59 (boolean_expression -> boolean_expression AND boolean_expression .) ]
  ! EQ_OP           [ reduce using rule 59 (boolean_expression -> boolean_expression AND boolean_expression .) ]
  ! NE_OP           [ reduce using rule 59 (boolean_expression -> boolean_expression AND boolean_expression .) ]


state 120

    (30) instruction -> SETXY number_expression COMMA number_expression .
    (49) number_expression -> number_expression . ADD number_expression
    (50) number_expression -> number_expression . SUB number_expression
    (51) number_expression -> number_expression . MUL number_expression
    (52) number_expression -> number_expression . DIV number_expression
    (53) number_expression -> number_expression . POW number_expression

    FO              reduce using rule 30 (instruction -> SETXY number_expression COMMA number_expression .)
    FORWARD         reduce using rule 30 (instruction -> SETXY number_expression COMMA number_expression .)
    BK              reduce using rule 30 (instruction -> SETXY number_expression COMMA number_expression .)
    BACKWARD        reduce using rule 30 (instruction -> SETXY number_expression COMMA number_expression .)
    RT              reduce using rule 30 (instruction -> SETXY number_expression COMMA number_expression .)
    RIGHT           reduce using rule 30 (instruction -> SETXY number_expression COMMA number_expression .)
    LT              reduce using rule 30 (instruction -> SETXY number_expression COMMA number_expression .)
    LEFT            reduce using rule 30 (instruction -> SETXY number_expression COMMA number_expression .)
    PD              reduce using rule 30 (instruction -> SETXY number_expression COMMA number_expression .)
    PENDOWN         reduce using rule 30 (instruction -> SETXY number_expression COMMA number_expression .)
    PU              reduce using rule 30 (instruction -> SETXY number_expression COMMA number_expression .)
    PENUP           reduce using rule 30 (instruction -> SETXY number_expression COMMA number_expression .)
    WC              reduce using rule 30 (instruction -> SETXY number_expression COMMA number_expression .)
    WIPECLEAN       reduce using rule 30 (instruction -> SETXY number_expression COMMA number_expression .)
    CS              reduce using rule 30 (instruction -> SETXY number_expression COMMA number_expression .)
    CLEARSCREEN     reduce using rule 30 (instruction -> SETXY number_expression COMMA number_expression .)
    HOME            reduce using rule 30 (instruction -> SETXY number_expression COMMA number_expression .)
    HEADING         reduce using rule 30 (instruction -> SETXY number_expression COMMA number_expression .)
    TYPEIN          reduce using rule 30 (instruction -> SETXY number_expression COMMA number_expression .)
    SETXY           reduce using rule 30 (instruction -> SETXY number_expression COMMA number_expression .)
    XCOR            reduce using rule 30 (instruction -> SETXY number_expression COMMA number_expression .)
    YCOR            reduce using rule 30 (instruction -> SETXY number_expression COMMA number_expression .)
    ID              reduce using rule 30 (instruction -> SETXY number_expression COMMA number_expression .)
    TO              reduce using rule 30 (instruction -> SETXY number_expression COMMA number_expression .)
    IF              reduce using rule 30 (instruction -> SETXY number_expression COMMA number_expression .)
    WHILE           reduce using rule 30 (instruction -> SETXY number_expression COMMA number_expression .)
    WRITE           reduce using rule 30 (instruction -> SETXY number_expression COMMA number_expression .)
    $end            reduce using rule 30 (instruction -> SETXY number_expression COMMA number_expression .)
    END             reduce using rule 30 (instruction -> SETXY number_expression COMMA number_expression .)
    ELSE            reduce using rule 30 (instruction -> SETXY number_expression COMMA number_expression .)
    ADD             shift and go to state 76
    SUB             shift and go to state 77
    MUL             shift and go to state 78
    DIV             shift and go to state 79
    POW             shift and go to state 80


state 121

    (40) expression_list -> expression_list COMMA expression .
    (64) relational_operation -> expression . GT_OP expression
    (65) relational_operation -> expression . LT_OP expression
    (66) relational_operation -> expression . GTE_OP expression
    (67) relational_operation -> expression . LTE_OP expression
    (68) relational_operation -> expression . EQ_OP expression
    (69) relational_operation -> expression . NE_OP expression

    COMMA           reduce using rule 40 (expression_list -> expression_list COMMA expression .)
    FO              reduce using rule 40 (expression_list -> expression_list COMMA expression .)
    FORWARD         reduce using rule 40 (expression_list -> expression_list COMMA expression .)
    BK              reduce using rule 40 (expression_list -> expression_list COMMA expression .)
    BACKWARD        reduce using rule 40 (expression_list -> expression_list COMMA expression .)
    RT              reduce using rule 40 (expression_list -> expression_list COMMA expression .)
    RIGHT           reduce using rule 40 (expression_list -> expression_list COMMA expression .)
    LT              reduce using rule 40 (expression_list -> expression_list COMMA expression .)
    LEFT            reduce using rule 40 (expression_list -> expression_list COMMA expression .)
    PD              reduce using rule 40 (expression_list -> expression_list COMMA expression .)
    PENDOWN         reduce using rule 40 (expression_list -> expression_list COMMA expression .)
    PU              reduce using rule 40 (expression_list -> expression_list COMMA expression .)
    PENUP           reduce using rule 40 (expression_list -> expression_list COMMA expression .)
    WC              reduce using rule 40 (expression_list -> expression_list COMMA expression .)
    WIPECLEAN       reduce using rule 40 (expression_list -> expression_list COMMA expression .)
    CS              reduce using rule 40 (expression_list -> expression_list COMMA expression .)
    CLEARSCREEN     reduce using rule 40 (expression_list -> expression_list COMMA expression .)
    HOME            reduce using rule 40 (expression_list -> expression_list COMMA expression .)
    HEADING         reduce using rule 40 (expression_list -> expression_list COMMA expression .)
    TYPEIN          reduce using rule 40 (expression_list -> expression_list COMMA expression .)
    SETXY           reduce using rule 40 (expression_list -> expression_list COMMA expression .)
    XCOR            reduce using rule 40 (expression_list -> expression_list COMMA expression .)
    YCOR            reduce using rule 40 (expression_list -> expression_list COMMA expression .)
    ID              reduce using rule 40 (expression_list -> expression_list COMMA expression .)
    TO              reduce using rule 40 (expression_list -> expression_list COMMA expression .)
    IF              reduce using rule 40 (expression_list -> expression_list COMMA expression .)
    WHILE           reduce using rule 40 (expression_list -> expression_list COMMA expression .)
    WRITE           reduce using rule 40 (expression_list -> expression_list COMMA expression .)
    $end            reduce using rule 40 (expression_list -> expression_list COMMA expression .)
    END             reduce using rule 40 (expression_list -> expression_list COMMA expression .)
    ELSE            reduce using rule 40 (expression_list -> expression_list COMMA expression .)
    GT_OP           shift and go to state 83
    LT_OP           shift and go to state 84
    GTE_OP          shift and go to state 85
    LTE_OP          shift and go to state 86
    EQ_OP           shift and go to state 87
    NE_OP           shift and go to state 88


state 122

    (39) procedure_declaration -> TO ID argument_list other_statement . END

    END             shift and go to state 126


state 123

    (35) argument_list -> argument_list COMMA . argument
    (37) argument -> . expression
    (38) argument -> . empty
    (44) expression -> . OPEN_PAR expression CLOSE_PAR
    (45) expression -> . boolean_expression
    (46) expression -> . number_expression
    (47) expression -> . RANDOM
    (48) expression -> . string
    (75) empty -> .
    (57) boolean_expression -> . relational_operation
    (58) boolean_expression -> . boolean_expression OR boolean_expression
    (59) boolean_expression -> . boolean_expression AND boolean_expression
    (60) boolean_expression -> . NOT boolean_expression
    (61) boolean_expression -> . variable
    (62) boolean_expression -> . TRUE
    (63) boolean_expression -> . FALSE
    (49) number_expression -> . number_expression ADD number_expression
    (50) number_expression -> . number_expression SUB number_expression
    (51) number_expression -> . number_expression MUL number_expression
    (52) number_expression -> . number_expression DIV number_expression
    (53) number_expression -> . number_expression POW number_expression
    (54) number_expression -> . OPEN_PAR number_expression CLOSE_PAR
    (55) number_expression -> . variable
    (56) number_expression -> . NUM
    (76) string -> . STRING
    (64) relational_operation -> . expression GT_OP expression
    (65) relational_operation -> . expression LT_OP expression
    (66) relational_operation -> . expression GTE_OP expression
    (67) relational_operation -> . expression LTE_OP expression
    (68) relational_operation -> . expression EQ_OP expression
    (69) relational_operation -> . expression NE_OP expression
    (34) variable -> . COLON ID

    OPEN_PAR        shift and go to state 50
    RANDOM          shift and go to state 53
    COMMA           reduce using rule 75 (empty -> .)
    FO              reduce using rule 75 (empty -> .)
    FORWARD         reduce using rule 75 (empty -> .)
    BK              reduce using rule 75 (empty -> .)
    BACKWARD        reduce using rule 75 (empty -> .)
    RT              reduce using rule 75 (empty -> .)
    RIGHT           reduce using rule 75 (empty -> .)
    LT              reduce using rule 75 (empty -> .)
    LEFT            reduce using rule 75 (empty -> .)
    PD              reduce using rule 75 (empty -> .)
    PENDOWN         reduce using rule 75 (empty -> .)
    PU              reduce using rule 75 (empty -> .)
    PENUP           reduce using rule 75 (empty -> .)
    WC              reduce using rule 75 (empty -> .)
    WIPECLEAN       reduce using rule 75 (empty -> .)
    CS              reduce using rule 75 (empty -> .)
    CLEARSCREEN     reduce using rule 75 (empty -> .)
    HOME            reduce using rule 75 (empty -> .)
    HEADING         reduce using rule 75 (empty -> .)
    TYPEIN          reduce using rule 75 (empty -> .)
    SETXY           reduce using rule 75 (empty -> .)
    XCOR            reduce using rule 75 (empty -> .)
    YCOR            reduce using rule 75 (empty -> .)
    ID              reduce using rule 75 (empty -> .)
    TO              reduce using rule 75 (empty -> .)
    IF              reduce using rule 75 (empty -> .)
    WHILE           reduce using rule 75 (empty -> .)
    WRITE           reduce using rule 75 (empty -> .)
    END             reduce using rule 75 (empty -> .)
    NOT             shift and go to state 56
    TRUE            shift and go to state 58
    FALSE           shift and go to state 59
    NUM             shift and go to state 43
    STRING          shift and go to state 60
    COLON           shift and go to state 44

    argument                       shift and go to state 127
    expression                     shift and go to state 101
    empty                          shift and go to state 102
    boolean_expression             shift and go to state 51
    number_expression              shift and go to state 52
    string                         shift and go to state 54
    relational_operation           shift and go to state 55
    variable                       shift and go to state 57

state 124

    (70) if_then_else -> IF OPEN_PAR boolean_expression CLOSE_PAR . THEN other_statement END
    (71) if_then_else -> IF OPEN_PAR boolean_expression CLOSE_PAR . THEN other_statement ELSE other_statement END

    THEN            shift and go to state 128


state 125

    (72) while_loop -> WHILE OPEN_PAR boolean_expression CLOSE_PAR . other_statement END
    (2) other_statement -> . statement other_statement
    (3) other_statement -> . empty
    (4) statement -> . instruction
    (5) statement -> . variable_declaration
    (6) statement -> . procedure_declaration
    (7) statement -> . procedure_call
    (8) statement -> . if_then_else
    (9) statement -> . while_loop
    (10) statement -> . write
    (75) empty -> .
    (11) instruction -> . FO number_expression
    (12) instruction -> . FORWARD number_expression
    (13) instruction -> . BK number_expression
    (14) instruction -> . BACKWARD number_expression
    (15) instruction -> . RT number_expression
    (16) instruction -> . RIGHT expression
    (17) instruction -> . LT number_expression
    (18) instruction -> . LEFT number_expression
    (19) instruction -> . PD
    (20) instruction -> . PENDOWN
    (21) instruction -> . PU
    (22) instruction -> . PENUP
    (23) instruction -> . WC
    (24) instruction -> . WIPECLEAN
    (25) instruction -> . CS
    (26) instruction -> . CLEARSCREEN
    (27) instruction -> . HOME
    (28) instruction -> . HEADING
    (29) instruction -> . TYPEIN
    (30) instruction -> . SETXY number_expression COMMA number_expression
    (31) instruction -> . XCOR number_expression
    (32) instruction -> . YCOR number_expression
    (33) variable_declaration -> . ID ASSIGN expression
    (39) procedure_declaration -> . TO ID argument_list other_statement END
    (43) procedure_call -> . ID expression_list
    (70) if_then_else -> . IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement END
    (71) if_then_else -> . IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement ELSE other_statement END
    (72) while_loop -> . WHILE OPEN_PAR boolean_expression CLOSE_PAR other_statement END
    (73) write -> . WRITE expression
    (74) write -> . WRITE string

    END             reduce using rule 75 (empty -> .)
    FO              shift and go to state 10
    FORWARD         shift and go to state 11
    BK              shift and go to state 12
    BACKWARD        shift and go to state 13
    RT              shift and go to state 14
    RIGHT           shift and go to state 15
    LT              shift and go to state 16
    LEFT            shift and go to state 17
    PD              shift and go to state 18
    PENDOWN         shift and go to state 19
    PU              shift and go to state 20
    PENUP           shift and go to state 21
    WC              shift and go to state 22
    WIPECLEAN       shift and go to state 23
    CS              shift and go to state 24
    CLEARSCREEN     shift and go to state 25
    HOME            shift and go to state 26
    HEADING         shift and go to state 27
    TYPEIN          shift and go to state 28
    SETXY           shift and go to state 29
    XCOR            shift and go to state 30
    YCOR            shift and go to state 31
    ID              shift and go to state 32
    TO              shift and go to state 33
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    WRITE           shift and go to state 36

    other_statement                shift and go to state 129
    statement                      shift and go to state 37
    empty                          shift and go to state 39
    instruction                    shift and go to state 3
    variable_declaration           shift and go to state 4
    procedure_declaration          shift and go to state 5
    procedure_call                 shift and go to state 6
    if_then_else                   shift and go to state 7
    while_loop                     shift and go to state 8
    write                          shift and go to state 9

state 126

    (39) procedure_declaration -> TO ID argument_list other_statement END .

    FO              reduce using rule 39 (procedure_declaration -> TO ID argument_list other_statement END .)
    FORWARD         reduce using rule 39 (procedure_declaration -> TO ID argument_list other_statement END .)
    BK              reduce using rule 39 (procedure_declaration -> TO ID argument_list other_statement END .)
    BACKWARD        reduce using rule 39 (procedure_declaration -> TO ID argument_list other_statement END .)
    RT              reduce using rule 39 (procedure_declaration -> TO ID argument_list other_statement END .)
    RIGHT           reduce using rule 39 (procedure_declaration -> TO ID argument_list other_statement END .)
    LT              reduce using rule 39 (procedure_declaration -> TO ID argument_list other_statement END .)
    LEFT            reduce using rule 39 (procedure_declaration -> TO ID argument_list other_statement END .)
    PD              reduce using rule 39 (procedure_declaration -> TO ID argument_list other_statement END .)
    PENDOWN         reduce using rule 39 (procedure_declaration -> TO ID argument_list other_statement END .)
    PU              reduce using rule 39 (procedure_declaration -> TO ID argument_list other_statement END .)
    PENUP           reduce using rule 39 (procedure_declaration -> TO ID argument_list other_statement END .)
    WC              reduce using rule 39 (procedure_declaration -> TO ID argument_list other_statement END .)
    WIPECLEAN       reduce using rule 39 (procedure_declaration -> TO ID argument_list other_statement END .)
    CS              reduce using rule 39 (procedure_declaration -> TO ID argument_list other_statement END .)
    CLEARSCREEN     reduce using rule 39 (procedure_declaration -> TO ID argument_list other_statement END .)
    HOME            reduce using rule 39 (procedure_declaration -> TO ID argument_list other_statement END .)
    HEADING         reduce using rule 39 (procedure_declaration -> TO ID argument_list other_statement END .)
    TYPEIN          reduce using rule 39 (procedure_declaration -> TO ID argument_list other_statement END .)
    SETXY           reduce using rule 39 (procedure_declaration -> TO ID argument_list other_statement END .)
    XCOR            reduce using rule 39 (procedure_declaration -> TO ID argument_list other_statement END .)
    YCOR            reduce using rule 39 (procedure_declaration -> TO ID argument_list other_statement END .)
    ID              reduce using rule 39 (procedure_declaration -> TO ID argument_list other_statement END .)
    TO              reduce using rule 39 (procedure_declaration -> TO ID argument_list other_statement END .)
    IF              reduce using rule 39 (procedure_declaration -> TO ID argument_list other_statement END .)
    WHILE           reduce using rule 39 (procedure_declaration -> TO ID argument_list other_statement END .)
    WRITE           reduce using rule 39 (procedure_declaration -> TO ID argument_list other_statement END .)
    $end            reduce using rule 39 (procedure_declaration -> TO ID argument_list other_statement END .)
    END             reduce using rule 39 (procedure_declaration -> TO ID argument_list other_statement END .)
    ELSE            reduce using rule 39 (procedure_declaration -> TO ID argument_list other_statement END .)


state 127

    (35) argument_list -> argument_list COMMA argument .

    COMMA           reduce using rule 35 (argument_list -> argument_list COMMA argument .)
    FO              reduce using rule 35 (argument_list -> argument_list COMMA argument .)
    FORWARD         reduce using rule 35 (argument_list -> argument_list COMMA argument .)
    BK              reduce using rule 35 (argument_list -> argument_list COMMA argument .)
    BACKWARD        reduce using rule 35 (argument_list -> argument_list COMMA argument .)
    RT              reduce using rule 35 (argument_list -> argument_list COMMA argument .)
    RIGHT           reduce using rule 35 (argument_list -> argument_list COMMA argument .)
    LT              reduce using rule 35 (argument_list -> argument_list COMMA argument .)
    LEFT            reduce using rule 35 (argument_list -> argument_list COMMA argument .)
    PD              reduce using rule 35 (argument_list -> argument_list COMMA argument .)
    PENDOWN         reduce using rule 35 (argument_list -> argument_list COMMA argument .)
    PU              reduce using rule 35 (argument_list -> argument_list COMMA argument .)
    PENUP           reduce using rule 35 (argument_list -> argument_list COMMA argument .)
    WC              reduce using rule 35 (argument_list -> argument_list COMMA argument .)
    WIPECLEAN       reduce using rule 35 (argument_list -> argument_list COMMA argument .)
    CS              reduce using rule 35 (argument_list -> argument_list COMMA argument .)
    CLEARSCREEN     reduce using rule 35 (argument_list -> argument_list COMMA argument .)
    HOME            reduce using rule 35 (argument_list -> argument_list COMMA argument .)
    HEADING         reduce using rule 35 (argument_list -> argument_list COMMA argument .)
    TYPEIN          reduce using rule 35 (argument_list -> argument_list COMMA argument .)
    SETXY           reduce using rule 35 (argument_list -> argument_list COMMA argument .)
    XCOR            reduce using rule 35 (argument_list -> argument_list COMMA argument .)
    YCOR            reduce using rule 35 (argument_list -> argument_list COMMA argument .)
    ID              reduce using rule 35 (argument_list -> argument_list COMMA argument .)
    TO              reduce using rule 35 (argument_list -> argument_list COMMA argument .)
    IF              reduce using rule 35 (argument_list -> argument_list COMMA argument .)
    WHILE           reduce using rule 35 (argument_list -> argument_list COMMA argument .)
    WRITE           reduce using rule 35 (argument_list -> argument_list COMMA argument .)
    END             reduce using rule 35 (argument_list -> argument_list COMMA argument .)


state 128

    (70) if_then_else -> IF OPEN_PAR boolean_expression CLOSE_PAR THEN . other_statement END
    (71) if_then_else -> IF OPEN_PAR boolean_expression CLOSE_PAR THEN . other_statement ELSE other_statement END
    (2) other_statement -> . statement other_statement
    (3) other_statement -> . empty
    (4) statement -> . instruction
    (5) statement -> . variable_declaration
    (6) statement -> . procedure_declaration
    (7) statement -> . procedure_call
    (8) statement -> . if_then_else
    (9) statement -> . while_loop
    (10) statement -> . write
    (75) empty -> .
    (11) instruction -> . FO number_expression
    (12) instruction -> . FORWARD number_expression
    (13) instruction -> . BK number_expression
    (14) instruction -> . BACKWARD number_expression
    (15) instruction -> . RT number_expression
    (16) instruction -> . RIGHT expression
    (17) instruction -> . LT number_expression
    (18) instruction -> . LEFT number_expression
    (19) instruction -> . PD
    (20) instruction -> . PENDOWN
    (21) instruction -> . PU
    (22) instruction -> . PENUP
    (23) instruction -> . WC
    (24) instruction -> . WIPECLEAN
    (25) instruction -> . CS
    (26) instruction -> . CLEARSCREEN
    (27) instruction -> . HOME
    (28) instruction -> . HEADING
    (29) instruction -> . TYPEIN
    (30) instruction -> . SETXY number_expression COMMA number_expression
    (31) instruction -> . XCOR number_expression
    (32) instruction -> . YCOR number_expression
    (33) variable_declaration -> . ID ASSIGN expression
    (39) procedure_declaration -> . TO ID argument_list other_statement END
    (43) procedure_call -> . ID expression_list
    (70) if_then_else -> . IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement END
    (71) if_then_else -> . IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement ELSE other_statement END
    (72) while_loop -> . WHILE OPEN_PAR boolean_expression CLOSE_PAR other_statement END
    (73) write -> . WRITE expression
    (74) write -> . WRITE string

    END             reduce using rule 75 (empty -> .)
    ELSE            reduce using rule 75 (empty -> .)
    FO              shift and go to state 10
    FORWARD         shift and go to state 11
    BK              shift and go to state 12
    BACKWARD        shift and go to state 13
    RT              shift and go to state 14
    RIGHT           shift and go to state 15
    LT              shift and go to state 16
    LEFT            shift and go to state 17
    PD              shift and go to state 18
    PENDOWN         shift and go to state 19
    PU              shift and go to state 20
    PENUP           shift and go to state 21
    WC              shift and go to state 22
    WIPECLEAN       shift and go to state 23
    CS              shift and go to state 24
    CLEARSCREEN     shift and go to state 25
    HOME            shift and go to state 26
    HEADING         shift and go to state 27
    TYPEIN          shift and go to state 28
    SETXY           shift and go to state 29
    XCOR            shift and go to state 30
    YCOR            shift and go to state 31
    ID              shift and go to state 32
    TO              shift and go to state 33
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    WRITE           shift and go to state 36

    other_statement                shift and go to state 130
    statement                      shift and go to state 37
    empty                          shift and go to state 39
    instruction                    shift and go to state 3
    variable_declaration           shift and go to state 4
    procedure_declaration          shift and go to state 5
    procedure_call                 shift and go to state 6
    if_then_else                   shift and go to state 7
    while_loop                     shift and go to state 8
    write                          shift and go to state 9

state 129

    (72) while_loop -> WHILE OPEN_PAR boolean_expression CLOSE_PAR other_statement . END

    END             shift and go to state 131


state 130

    (70) if_then_else -> IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement . END
    (71) if_then_else -> IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement . ELSE other_statement END

    END             shift and go to state 132
    ELSE            shift and go to state 133


state 131

    (72) while_loop -> WHILE OPEN_PAR boolean_expression CLOSE_PAR other_statement END .

    FO              reduce using rule 72 (while_loop -> WHILE OPEN_PAR boolean_expression CLOSE_PAR other_statement END .)
    FORWARD         reduce using rule 72 (while_loop -> WHILE OPEN_PAR boolean_expression CLOSE_PAR other_statement END .)
    BK              reduce using rule 72 (while_loop -> WHILE OPEN_PAR boolean_expression CLOSE_PAR other_statement END .)
    BACKWARD        reduce using rule 72 (while_loop -> WHILE OPEN_PAR boolean_expression CLOSE_PAR other_statement END .)
    RT              reduce using rule 72 (while_loop -> WHILE OPEN_PAR boolean_expression CLOSE_PAR other_statement END .)
    RIGHT           reduce using rule 72 (while_loop -> WHILE OPEN_PAR boolean_expression CLOSE_PAR other_statement END .)
    LT              reduce using rule 72 (while_loop -> WHILE OPEN_PAR boolean_expression CLOSE_PAR other_statement END .)
    LEFT            reduce using rule 72 (while_loop -> WHILE OPEN_PAR boolean_expression CLOSE_PAR other_statement END .)
    PD              reduce using rule 72 (while_loop -> WHILE OPEN_PAR boolean_expression CLOSE_PAR other_statement END .)
    PENDOWN         reduce using rule 72 (while_loop -> WHILE OPEN_PAR boolean_expression CLOSE_PAR other_statement END .)
    PU              reduce using rule 72 (while_loop -> WHILE OPEN_PAR boolean_expression CLOSE_PAR other_statement END .)
    PENUP           reduce using rule 72 (while_loop -> WHILE OPEN_PAR boolean_expression CLOSE_PAR other_statement END .)
    WC              reduce using rule 72 (while_loop -> WHILE OPEN_PAR boolean_expression CLOSE_PAR other_statement END .)
    WIPECLEAN       reduce using rule 72 (while_loop -> WHILE OPEN_PAR boolean_expression CLOSE_PAR other_statement END .)
    CS              reduce using rule 72 (while_loop -> WHILE OPEN_PAR boolean_expression CLOSE_PAR other_statement END .)
    CLEARSCREEN     reduce using rule 72 (while_loop -> WHILE OPEN_PAR boolean_expression CLOSE_PAR other_statement END .)
    HOME            reduce using rule 72 (while_loop -> WHILE OPEN_PAR boolean_expression CLOSE_PAR other_statement END .)
    HEADING         reduce using rule 72 (while_loop -> WHILE OPEN_PAR boolean_expression CLOSE_PAR other_statement END .)
    TYPEIN          reduce using rule 72 (while_loop -> WHILE OPEN_PAR boolean_expression CLOSE_PAR other_statement END .)
    SETXY           reduce using rule 72 (while_loop -> WHILE OPEN_PAR boolean_expression CLOSE_PAR other_statement END .)
    XCOR            reduce using rule 72 (while_loop -> WHILE OPEN_PAR boolean_expression CLOSE_PAR other_statement END .)
    YCOR            reduce using rule 72 (while_loop -> WHILE OPEN_PAR boolean_expression CLOSE_PAR other_statement END .)
    ID              reduce using rule 72 (while_loop -> WHILE OPEN_PAR boolean_expression CLOSE_PAR other_statement END .)
    TO              reduce using rule 72 (while_loop -> WHILE OPEN_PAR boolean_expression CLOSE_PAR other_statement END .)
    IF              reduce using rule 72 (while_loop -> WHILE OPEN_PAR boolean_expression CLOSE_PAR other_statement END .)
    WHILE           reduce using rule 72 (while_loop -> WHILE OPEN_PAR boolean_expression CLOSE_PAR other_statement END .)
    WRITE           reduce using rule 72 (while_loop -> WHILE OPEN_PAR boolean_expression CLOSE_PAR other_statement END .)
    $end            reduce using rule 72 (while_loop -> WHILE OPEN_PAR boolean_expression CLOSE_PAR other_statement END .)
    END             reduce using rule 72 (while_loop -> WHILE OPEN_PAR boolean_expression CLOSE_PAR other_statement END .)
    ELSE            reduce using rule 72 (while_loop -> WHILE OPEN_PAR boolean_expression CLOSE_PAR other_statement END .)


state 132

    (70) if_then_else -> IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement END .

    FO              reduce using rule 70 (if_then_else -> IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement END .)
    FORWARD         reduce using rule 70 (if_then_else -> IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement END .)
    BK              reduce using rule 70 (if_then_else -> IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement END .)
    BACKWARD        reduce using rule 70 (if_then_else -> IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement END .)
    RT              reduce using rule 70 (if_then_else -> IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement END .)
    RIGHT           reduce using rule 70 (if_then_else -> IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement END .)
    LT              reduce using rule 70 (if_then_else -> IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement END .)
    LEFT            reduce using rule 70 (if_then_else -> IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement END .)
    PD              reduce using rule 70 (if_then_else -> IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement END .)
    PENDOWN         reduce using rule 70 (if_then_else -> IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement END .)
    PU              reduce using rule 70 (if_then_else -> IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement END .)
    PENUP           reduce using rule 70 (if_then_else -> IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement END .)
    WC              reduce using rule 70 (if_then_else -> IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement END .)
    WIPECLEAN       reduce using rule 70 (if_then_else -> IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement END .)
    CS              reduce using rule 70 (if_then_else -> IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement END .)
    CLEARSCREEN     reduce using rule 70 (if_then_else -> IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement END .)
    HOME            reduce using rule 70 (if_then_else -> IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement END .)
    HEADING         reduce using rule 70 (if_then_else -> IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement END .)
    TYPEIN          reduce using rule 70 (if_then_else -> IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement END .)
    SETXY           reduce using rule 70 (if_then_else -> IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement END .)
    XCOR            reduce using rule 70 (if_then_else -> IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement END .)
    YCOR            reduce using rule 70 (if_then_else -> IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement END .)
    ID              reduce using rule 70 (if_then_else -> IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement END .)
    TO              reduce using rule 70 (if_then_else -> IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement END .)
    IF              reduce using rule 70 (if_then_else -> IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement END .)
    WHILE           reduce using rule 70 (if_then_else -> IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement END .)
    WRITE           reduce using rule 70 (if_then_else -> IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement END .)
    $end            reduce using rule 70 (if_then_else -> IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement END .)
    END             reduce using rule 70 (if_then_else -> IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement END .)
    ELSE            reduce using rule 70 (if_then_else -> IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement END .)


state 133

    (71) if_then_else -> IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement ELSE . other_statement END
    (2) other_statement -> . statement other_statement
    (3) other_statement -> . empty
    (4) statement -> . instruction
    (5) statement -> . variable_declaration
    (6) statement -> . procedure_declaration
    (7) statement -> . procedure_call
    (8) statement -> . if_then_else
    (9) statement -> . while_loop
    (10) statement -> . write
    (75) empty -> .
    (11) instruction -> . FO number_expression
    (12) instruction -> . FORWARD number_expression
    (13) instruction -> . BK number_expression
    (14) instruction -> . BACKWARD number_expression
    (15) instruction -> . RT number_expression
    (16) instruction -> . RIGHT expression
    (17) instruction -> . LT number_expression
    (18) instruction -> . LEFT number_expression
    (19) instruction -> . PD
    (20) instruction -> . PENDOWN
    (21) instruction -> . PU
    (22) instruction -> . PENUP
    (23) instruction -> . WC
    (24) instruction -> . WIPECLEAN
    (25) instruction -> . CS
    (26) instruction -> . CLEARSCREEN
    (27) instruction -> . HOME
    (28) instruction -> . HEADING
    (29) instruction -> . TYPEIN
    (30) instruction -> . SETXY number_expression COMMA number_expression
    (31) instruction -> . XCOR number_expression
    (32) instruction -> . YCOR number_expression
    (33) variable_declaration -> . ID ASSIGN expression
    (39) procedure_declaration -> . TO ID argument_list other_statement END
    (43) procedure_call -> . ID expression_list
    (70) if_then_else -> . IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement END
    (71) if_then_else -> . IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement ELSE other_statement END
    (72) while_loop -> . WHILE OPEN_PAR boolean_expression CLOSE_PAR other_statement END
    (73) write -> . WRITE expression
    (74) write -> . WRITE string

    END             reduce using rule 75 (empty -> .)
    FO              shift and go to state 10
    FORWARD         shift and go to state 11
    BK              shift and go to state 12
    BACKWARD        shift and go to state 13
    RT              shift and go to state 14
    RIGHT           shift and go to state 15
    LT              shift and go to state 16
    LEFT            shift and go to state 17
    PD              shift and go to state 18
    PENDOWN         shift and go to state 19
    PU              shift and go to state 20
    PENUP           shift and go to state 21
    WC              shift and go to state 22
    WIPECLEAN       shift and go to state 23
    CS              shift and go to state 24
    CLEARSCREEN     shift and go to state 25
    HOME            shift and go to state 26
    HEADING         shift and go to state 27
    TYPEIN          shift and go to state 28
    SETXY           shift and go to state 29
    XCOR            shift and go to state 30
    YCOR            shift and go to state 31
    ID              shift and go to state 32
    TO              shift and go to state 33
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    WRITE           shift and go to state 36

    other_statement                shift and go to state 134
    statement                      shift and go to state 37
    empty                          shift and go to state 39
    instruction                    shift and go to state 3
    variable_declaration           shift and go to state 4
    procedure_declaration          shift and go to state 5
    procedure_call                 shift and go to state 6
    if_then_else                   shift and go to state 7
    while_loop                     shift and go to state 8
    write                          shift and go to state 9

state 134

    (71) if_then_else -> IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement ELSE other_statement . END

    END             shift and go to state 135


state 135

    (71) if_then_else -> IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement ELSE other_statement END .

    FO              reduce using rule 71 (if_then_else -> IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement ELSE other_statement END .)
    FORWARD         reduce using rule 71 (if_then_else -> IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement ELSE other_statement END .)
    BK              reduce using rule 71 (if_then_else -> IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement ELSE other_statement END .)
    BACKWARD        reduce using rule 71 (if_then_else -> IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement ELSE other_statement END .)
    RT              reduce using rule 71 (if_then_else -> IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement ELSE other_statement END .)
    RIGHT           reduce using rule 71 (if_then_else -> IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement ELSE other_statement END .)
    LT              reduce using rule 71 (if_then_else -> IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement ELSE other_statement END .)
    LEFT            reduce using rule 71 (if_then_else -> IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement ELSE other_statement END .)
    PD              reduce using rule 71 (if_then_else -> IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement ELSE other_statement END .)
    PENDOWN         reduce using rule 71 (if_then_else -> IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement ELSE other_statement END .)
    PU              reduce using rule 71 (if_then_else -> IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement ELSE other_statement END .)
    PENUP           reduce using rule 71 (if_then_else -> IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement ELSE other_statement END .)
    WC              reduce using rule 71 (if_then_else -> IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement ELSE other_statement END .)
    WIPECLEAN       reduce using rule 71 (if_then_else -> IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement ELSE other_statement END .)
    CS              reduce using rule 71 (if_then_else -> IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement ELSE other_statement END .)
    CLEARSCREEN     reduce using rule 71 (if_then_else -> IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement ELSE other_statement END .)
    HOME            reduce using rule 71 (if_then_else -> IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement ELSE other_statement END .)
    HEADING         reduce using rule 71 (if_then_else -> IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement ELSE other_statement END .)
    TYPEIN          reduce using rule 71 (if_then_else -> IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement ELSE other_statement END .)
    SETXY           reduce using rule 71 (if_then_else -> IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement ELSE other_statement END .)
    XCOR            reduce using rule 71 (if_then_else -> IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement ELSE other_statement END .)
    YCOR            reduce using rule 71 (if_then_else -> IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement ELSE other_statement END .)
    ID              reduce using rule 71 (if_then_else -> IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement ELSE other_statement END .)
    TO              reduce using rule 71 (if_then_else -> IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement ELSE other_statement END .)
    IF              reduce using rule 71 (if_then_else -> IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement ELSE other_statement END .)
    WHILE           reduce using rule 71 (if_then_else -> IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement ELSE other_statement END .)
    WRITE           reduce using rule 71 (if_then_else -> IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement ELSE other_statement END .)
    $end            reduce using rule 71 (if_then_else -> IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement ELSE other_statement END .)
    END             reduce using rule 71 (if_then_else -> IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement ELSE other_statement END .)
    ELSE            reduce using rule 71 (if_then_else -> IF OPEN_PAR boolean_expression CLOSE_PAR THEN other_statement ELSE other_statement END .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for OR in state 51 resolved as shift
WARNING: shift/reduce conflict for AND in state 51 resolved as shift
WARNING: shift/reduce conflict for CLOSE_PAR in state 90 resolved as shift
WARNING: shift/reduce conflict for OR in state 94 resolved as shift
WARNING: shift/reduce conflict for AND in state 94 resolved as shift
WARNING: shift/reduce conflict for GT_OP in state 111 resolved as shift
WARNING: shift/reduce conflict for LT_OP in state 111 resolved as shift
WARNING: shift/reduce conflict for GTE_OP in state 111 resolved as shift
WARNING: shift/reduce conflict for LTE_OP in state 111 resolved as shift
WARNING: shift/reduce conflict for EQ_OP in state 111 resolved as shift
WARNING: shift/reduce conflict for NE_OP in state 111 resolved as shift
WARNING: shift/reduce conflict for GT_OP in state 112 resolved as shift
WARNING: shift/reduce conflict for LT_OP in state 112 resolved as shift
WARNING: shift/reduce conflict for GTE_OP in state 112 resolved as shift
WARNING: shift/reduce conflict for LTE_OP in state 112 resolved as shift
WARNING: shift/reduce conflict for EQ_OP in state 112 resolved as shift
WARNING: shift/reduce conflict for NE_OP in state 112 resolved as shift
WARNING: shift/reduce conflict for GT_OP in state 113 resolved as shift
WARNING: shift/reduce conflict for LT_OP in state 113 resolved as shift
WARNING: shift/reduce conflict for GTE_OP in state 113 resolved as shift
WARNING: shift/reduce conflict for LTE_OP in state 113 resolved as shift
WARNING: shift/reduce conflict for EQ_OP in state 113 resolved as shift
WARNING: shift/reduce conflict for NE_OP in state 113 resolved as shift
WARNING: shift/reduce conflict for GT_OP in state 114 resolved as shift
WARNING: shift/reduce conflict for LT_OP in state 114 resolved as shift
WARNING: shift/reduce conflict for GTE_OP in state 114 resolved as shift
WARNING: shift/reduce conflict for LTE_OP in state 114 resolved as shift
WARNING: shift/reduce conflict for EQ_OP in state 114 resolved as shift
WARNING: shift/reduce conflict for NE_OP in state 114 resolved as shift
WARNING: shift/reduce conflict for GT_OP in state 115 resolved as shift
WARNING: shift/reduce conflict for LT_OP in state 115 resolved as shift
WARNING: shift/reduce conflict for GTE_OP in state 115 resolved as shift
WARNING: shift/reduce conflict for LTE_OP in state 115 resolved as shift
WARNING: shift/reduce conflict for EQ_OP in state 115 resolved as shift
WARNING: shift/reduce conflict for NE_OP in state 115 resolved as shift
WARNING: shift/reduce conflict for GT_OP in state 116 resolved as shift
WARNING: shift/reduce conflict for LT_OP in state 116 resolved as shift
WARNING: shift/reduce conflict for GTE_OP in state 116 resolved as shift
WARNING: shift/reduce conflict for LTE_OP in state 116 resolved as shift
WARNING: shift/reduce conflict for EQ_OP in state 116 resolved as shift
WARNING: shift/reduce conflict for NE_OP in state 116 resolved as shift
WARNING: shift/reduce conflict for OR in state 118 resolved as shift
WARNING: shift/reduce conflict for AND in state 118 resolved as shift
WARNING: shift/reduce conflict for OR in state 119 resolved as shift
WARNING: shift/reduce conflict for AND in state 119 resolved as shift
WARNING: reduce/reduce conflict in state 57 resolved using rule (number_expression -> variable)
WARNING: rejected rule (boolean_expression -> variable) in state 57
WARNING: reduce/reduce conflict in state 74 resolved using rule (expression -> string)
WARNING: rejected rule (write -> WRITE string) in state 74
WARNING: reduce/reduce conflict in state 91 resolved using rule (number_expression -> variable)
WARNING: rejected rule (boolean_expression -> variable) in state 91
WARNING: reduce/reduce conflict in state 94 resolved using rule (expression -> boolean_expression)
WARNING: rejected rule (boolean_expression -> NOT boolean_expression) in state 94
WARNING: reduce/reduce conflict in state 118 resolved using rule (expression -> boolean_expression)
WARNING: rejected rule (boolean_expression -> boolean_expression OR boolean_expression) in state 118
WARNING: reduce/reduce conflict in state 119 resolved using rule (expression -> boolean_expression)
WARNING: rejected rule (boolean_expression -> boolean_expression AND boolean_expression) in state 119
WARNING: Rule (write -> WRITE string) is never reduced
